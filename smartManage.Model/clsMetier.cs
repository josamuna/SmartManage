using ManageUtilities;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using smartManage.Tools;

namespace smartManage.Model
{
    public class clsMetier : IDisposable
    {
        //***Les variables globales***
        private static string _ConnectionString, _host, _db, _user, _pwd;
        private static clsMetier Fact;
        public static string bdEnCours = "";
        private SqlConnection conn;
        #region prerecquis
        public static clsMetier GetInstance()
        {
            if (Fact == null)
                Fact = new clsMetier();
            return Fact;
        }
        public object getParameter(IDbCommand cmd, string name, DbType type, int size, object value)
        {
            IDbDataParameter param = cmd.CreateParameter();
            param.Size = size;
            param.DbType = type;
            param.ParameterName = name; 
             param.Value = value;
            return param;
        }
        public void Initialize(string ConnectionString)
        {
            _ConnectionString = ConnectionString;
            conn = new SqlConnection(ConnectionString);
        }
        public void Initialize(clsConnexion con)
        {
            _host = con.Serveur;// host;
            _db = con.DB; ;
            _user = con.User;
            _pwd = con.Pwd;
            string sch = string.Format("server={0}; database={1}; user={2}; pwd={3}", _host, _db, _user, _pwd);
            conn = new SqlConnection(sch);
        }
        public void Initialize(clsConnexion con, int type)
        {
            _host = con.Serveur;// host;
            _db = con.DB; ;
            _user = con.User;
            _pwd = con.Pwd;
            string sch = string.Format("server={0}; database={1}; user={2}; pwd={3}", _host, _db, _user, _pwd);
            switch (type)
            {
                //sql server 2005
                case 1: sch = string.Format("Data Source={0};Persist Security Info=True; Initial Catalog={1};User ID={2}; Password={3}", _host, _db, _user, _pwd); break;
                //sql server 2008
                case 2: sch = string.Format("Data Source={0};Persist Security Info=True; Initial Catalog={1};User ID={2}; Password={3}", _host, _db, _user, _pwd); break;
                case 3: break;
            }

            //On garde la chaine de connexion pour utilisation avec les reports
            smartManage.Model.Properties.Settings.Default.strChaineConnexion = sch;
            conn = new SqlConnection(sch);
        }
        public void Initialize(string host, string db, string user, string pwd)
        {
            _host = host;
            _db = db;
            _user = user;
            _pwd = pwd;
            string sch = string.Format("server={0}; database={1}; user={2}; pwd={3}", _host, _db, _user, _pwd);
            conn = new SqlConnection(sch);
        }
        public void setDB(string db)
        {
            _db = db;
        }
        public bool isConnect()
        {
            bool bl = true;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                conn.Close();
            }
            catch (Exception exc)
            {
                bl = false;
                conn.Close();
                string MasterDirectory = ImplementUtilities.Instance.MasterDirectoryConfiguration;
                ImplementLog.Instance.PutLogMessage(MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Etat de la connexion à la BD sans paramètre : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            return bl;
        }
        public bool isConnect(clsConnexion con)
        {
            bool bl = true;
            _host = con.Serveur;// host;
            _db = con.DB;
            _user = con.User;
            _pwd = con.Pwd;
            string sch = string.Format("server={0}; database=Master; user={1}; pwd={2}", con.Serveur, con.User, con.Pwd);
            conn = new SqlConnection(sch);
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                conn.Close();
            }
            catch (Exception exc)
            {
                sch = string.Format("server={0}; database={1};id user={2}; pwd={3}", _host, _db, _user, _pwd);
                bl = false;
                conn.Close();
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Etat connexion à la BD avec paramètre : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            return bl;
        }
        public List<string> getAllDB()
        {
            List<string> lst = new List<string>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT name FROM sysdatabases where name!='master' order by name");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                            lst.Add(dr["name"].ToString());
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Récupération de toutes les bases de Données SQLServer : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lst;
        }
        public string getCurrentDataBase()
        {
            string bd = "";
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    //Sélection de la base des données en cours
                    cmd.CommandText = string.Format("SELECT DB_NAME() AS bd_encours");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            bd = (dr["bd_encours"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Récupération de toutes les bases de Données SQLServer : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return bd;
        }

        public void CloseConnection()
        {
            try
            {
                if (conn.State == ConnectionState.Open)
                    conn.Close();
                else
                    return;
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Récupération de toutes les bases de Données SQLServer : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
        }
        #endregion prerecquis
        #region  CLSCOMPTE
        public clscompte getClscompte(object intid)
        {
            clscompte varclscompte = new clscompte();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM compte WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.UInt32, 4, intid));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclscompte.Id = int.Parse(dr["id"].ToString());
                            varclscompte.Numero = dr["numero"].ToString();
                            varclscompte.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscompte.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscompte.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscompte.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'compte' avec la classe 'clscompte' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclscompte;
        }

        public List<clscompte> getAllClscompte(string criteria)
        {
            List<clscompte> lstclscompte = new List<clscompte>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_compte_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clscompte varclscompte = null;
                        while (dr.Read())
                        {
                            varclscompte = new clscompte();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscompte.Id = int.Parse(dr["id"].ToString());
                            varclscompte.Numero = dr["numero"].ToString();
                            varclscompte.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscompte.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscompte.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscompte.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclscompte.Add(varclscompte);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'compte' avec la classe 'clscompte' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclscompte;
        }

        public List<clscompte> getAllClscompte()
        {
            List<clscompte> lstclscompte = new List<clscompte>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM compte ORDER BY numero ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscompte varclscompte = null;
                        while (dr.Read())
                        {

                            varclscompte = new clscompte();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscompte.Id = int.Parse(dr["id"].ToString());
                            varclscompte.Numero = dr["numero"].ToString();
                            varclscompte.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscompte.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscompte.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscompte.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclscompte.Add(varclscompte);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'compte' avec la classe 'clscompte' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclscompte;
        }

        public int insertClscompte(clscompte varclscompte)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO compte ( id,numero,user_created,date_created,user_modified,date_modified ) VALUES (@id,@numero,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscompte.Id));
                    if (varclscompte.Numero != null) cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 10, varclscompte.Numero));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 10, DBNull.Value));
                    if (varclscompte.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclscompte.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclscompte.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclscompte.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclscompte.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclscompte.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclscompte.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclscompte.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'compte' avec la classe 'clscompte' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClscompte(clscompte varclscompte)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE compte  SET numero=@numero,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclscompte.Numero != null) cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 10, varclscompte.Numero));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 10, DBNull.Value));
                    if (varclscompte.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclscompte.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclscompte.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclscompte.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclscompte.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclscompte.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclscompte.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclscompte.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscompte.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'compte' avec la classe 'clscompte' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClscompte(clscompte varclscompte)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM compte  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscompte.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'compte' avec la classe 'clscompte' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSCOMPTE 
        #region  CLSFO
        public clsfo getClsfo(object intid)
        {
            clsfo varclsfo = new clsfo();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM fo WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfo.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsfo.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsfo.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfo.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfo.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfo.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'fo' avec la classe 'clsfo' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsfo;
        }

        public List<clsfo> getAllClsfo(string criteria)
        {
            List<clsfo> lstclsfo = new List<clsfo>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_fo_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfo varclsfo = null;
                        while (dr.Read())
                        {
                            varclsfo = new clsfo();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfo.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsfo.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsfo.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfo.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfo.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfo.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsfo.Add(varclsfo);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'fo' avec la classe 'clsfo' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsfo;
        }

        public List<clsfo> getAllClsfo()
        {
            List<clsfo> lstclsfo = new List<clsfo>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM fo ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsfo varclsfo = null;
                        while (dr.Read())
                        {

                            varclsfo = new clsfo();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfo.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsfo.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsfo.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfo.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfo.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfo.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsfo.Add(varclsfo);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'fo' avec la classe 'clsfo' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsfo;
        }

        public int insertClsfo(clsfo varclsfo)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO fo ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfo.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsfo.Valeur));
                    if (varclsfo.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsfo.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsfo.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsfo.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsfo.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsfo.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsfo.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsfo.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'fo' avec la classe 'clsfo' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsfo(clsfo varclsfo)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE fo  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsfo.Valeur));
                    if (varclsfo.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsfo.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsfo.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsfo.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsfo.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsfo.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsfo.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsfo.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfo.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'fo' avec la classe 'clsfo' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsfo(clsfo varclsfo)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM fo  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfo.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'fo' avec la classe 'clsfo' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSFO 
        #region  CLSGROUPE
        public clsgroupe getClsgroupe(object intid)
        {
            clsgroupe varclsgroupe = new clsgroupe();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM groupe WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgroupe.Id = int.Parse(dr["id"].ToString());
                            varclsgroupe.Designation = dr["designation"].ToString();
                            if (!dr["niveau"].ToString().Trim().Equals("")) varclsgroupe.Niveau = int.Parse(dr["niveau"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'groupe' avec la classe 'clsgroupe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsgroupe;
        }

        public List<clsgroupe> getAllClsgroupe(string criteria)
        {
            List<clsgroupe> lstclsgroupe = new List<clsgroupe>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_groupe_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 30, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgroupe varclsgroupe = null;
                        while (dr.Read())
                        {
                            varclsgroupe = new clsgroupe();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgroupe.Id = int.Parse(dr["id"].ToString());
                            varclsgroupe.Designation = dr["designation"].ToString();
                            if (!dr["niveau"].ToString().Trim().Equals("")) varclsgroupe.Niveau = int.Parse(dr["niveau"].ToString());
                            lstclsgroupe.Add(varclsgroupe);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'groupe' avec la classe 'clsgroupe' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsgroupe;
        }

        public List<clsgroupe> getAllClsgroupe()
        {
            List<clsgroupe> lstclsgroupe = new List<clsgroupe>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM groupe ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsgroupe varclsgroupe = null;
                        while (dr.Read())
                        {

                            varclsgroupe = new clsgroupe();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgroupe.Id = int.Parse(dr["id"].ToString());
                            varclsgroupe.Designation = dr["designation"].ToString();
                            if (!dr["niveau"].ToString().Trim().Equals("")) varclsgroupe.Niveau = int.Parse(dr["niveau"].ToString());
                            lstclsgroupe.Add(varclsgroupe);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'groupe' avec la classe 'clsgroupe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsgroupe;
        }

        public int insertClsgroupe(clsgroupe varclsgroupe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO groupe ( id,designation,niveau ) VALUES (@id,@designation,@niveau  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgroupe.Id));
                    if (varclsgroupe.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, varclsgroupe.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, DBNull.Value));
                    if (varclsgroupe.Niveau.HasValue) cmd.Parameters.Add(getParameter(cmd, "@niveau", DbType.Int32, 4, varclsgroupe.Niveau));
                    else cmd.Parameters.Add(getParameter(cmd, "@niveau", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'groupe' avec la classe 'clsgroupe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsgroupe(clsgroupe varclsgroupe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE groupe  SET designation=@designation,niveau=@niveau  WHERE 1=1  AND id=@id ");
                    if (varclsgroupe.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, varclsgroupe.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, DBNull.Value));
                    if (varclsgroupe.Niveau.HasValue) cmd.Parameters.Add(getParameter(cmd, "@niveau", DbType.Int32, 4, varclsgroupe.Niveau));
                    else cmd.Parameters.Add(getParameter(cmd, "@niveau", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgroupe.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'groupe' avec la classe 'clsgroupe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsgroupe(clsgroupe varclsgroupe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM groupe  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgroupe.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'groupe' avec la classe 'clsgroupe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSGROUPE 
        #region  CLSSERIAL
        public clsserial getClsserial(object intid)
        {
            clsserial varclsserial = new clsserial();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM serial WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsserial.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsserial.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsserial.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsserial.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsserial.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsserial.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'serial' avec la classe 'clsserial' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsserial;
        }

        public List<clsserial> getAllClsserial(string criteria)
        {
            List<clsserial> lstclsserial = new List<clsserial>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_serial_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsserial varclsserial = null;
                        while (dr.Read())
                        {
                            varclsserial = new clsserial();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsserial.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsserial.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsserial.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsserial.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsserial.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsserial.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsserial.Add(varclsserial);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'serial' avec la classe 'clsserial' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsserial;
        }

        public List<clsserial> getAllClsserial()
        {
            List<clsserial> lstclsserial = new List<clsserial>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM serial ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsserial varclsserial = null;
                        while (dr.Read())
                        {

                            varclsserial = new clsserial();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsserial.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsserial.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsserial.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsserial.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsserial.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsserial.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsserial.Add(varclsserial);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'serial' avec la classe 'clsserial' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsserial;
        }

        public int insertClsserial(clsserial varclsserial)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO serial ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsserial.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsserial.Valeur));
                    if (varclsserial.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsserial.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsserial.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsserial.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsserial.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsserial.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsserial.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsserial.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'serial' avec la classe 'clsserial' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsserial(clsserial varclsserial)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE serial  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsserial.Valeur));
                    if (varclsserial.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsserial.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsserial.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsserial.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsserial.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsserial.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsserial.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsserial.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsserial.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'serial' avec la classe 'clsserial' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsserial(clsserial varclsserial)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM serial  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsserial.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'serial' avec la classe 'clsserial' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSSERIAL 
        #region  CLSMARQUE
        public clsmarque getClsmarque(object intid)
        {
            clsmarque varclsmarque = new clsmarque();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM marque WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmarque.Id = int.Parse(dr["id"].ToString());
                            varclsmarque.Designation = dr["designation"].ToString();
                            varclsmarque.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmarque.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmarque.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmarque.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'marque' avec la classe 'clsmarque' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsmarque;
        }

        public List<clsmarque> getAllClsmarque(string criteria)
        {
            List<clsmarque> lstclsmarque = new List<clsmarque>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_marque_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmarque varclsmarque = null;
                        while (dr.Read())
                        {
                            varclsmarque = new clsmarque();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmarque.Id = int.Parse(dr["id"].ToString());
                            varclsmarque.Designation = dr["designation"].ToString();
                            varclsmarque.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmarque.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmarque.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmarque.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsmarque.Add(varclsmarque);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'marque' avec la classe 'clsmarque' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmarque;
        }

        public List<clsmarque> getAllClsmarque()
        {
            List<clsmarque> lstclsmarque = new List<clsmarque>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM marque ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmarque varclsmarque = null;
                        while (dr.Read())
                        {
                            varclsmarque = new clsmarque();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmarque.Id = int.Parse(dr["id"].ToString());
                            varclsmarque.Designation = dr["designation"].ToString();
                            varclsmarque.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmarque.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmarque.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmarque.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsmarque.Add(varclsmarque);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'marque' avec la classe 'clsmarque' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmarque;
        }

        public int insertClsmarque(clsmarque varclsmarque)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO marque ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmarque.Id));
                    if (varclsmarque.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsmarque.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsmarque.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsmarque.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsmarque.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsmarque.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmarque.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsmarque.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsmarque.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsmarque.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'marque' avec la classe 'clsmarque' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsmarque(clsmarque varclsmarque)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE marque  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsmarque.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsmarque.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsmarque.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsmarque.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsmarque.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsmarque.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmarque.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsmarque.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsmarque.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsmarque.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmarque.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'marque' avec la classe 'clsmarque' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsmarque(clsmarque varclsmarque)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM marque  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmarque.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            { 
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'marque' avec la classe 'clsmarque' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSMARQUE 
        #region  CLSMODELE
        public clsmodele getClsmodele(object intid)
        {
            clsmodele varclsmodele = new clsmodele();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM modele WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmodele.Id = int.Parse(dr["id"].ToString());
                            varclsmodele.Designation = dr["designation"].ToString();
                            varclsmodele.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmodele.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmodele.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmodele.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'modele' avec la classe 'clsmodele' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsmodele;
        }

        public List<clsmodele> getAllClsmodele(string criteria)
        {
            List<clsmodele> lstclsmodele = new List<clsmodele>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_modele_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmodele varclsmodele = null;
                        while (dr.Read())
                        {
                            varclsmodele = new clsmodele();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmodele.Id = int.Parse(dr["id"].ToString());
                            varclsmodele.Designation = dr["designation"].ToString();
                            varclsmodele.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmodele.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmodele.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmodele.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsmodele.Add(varclsmodele);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'modele' avec la classe 'clsmodele' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmodele;
        }

        public List<clsmodele> getAllClsmodele()
        {
            List<clsmodele> lstclsmodele = new List<clsmodele>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM modele ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmodele varclsmodele = null;
                        while (dr.Read())
                        {
                            varclsmodele = new clsmodele();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmodele.Id = int.Parse(dr["id"].ToString());
                            varclsmodele.Designation = dr["designation"].ToString();
                            varclsmodele.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmodele.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmodele.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmodele.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsmodele.Add(varclsmodele);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'modele' avec la classe 'clsmodele' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmodele;
        }

        public int insertClsmodele(clsmodele varclsmodele)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO modele ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmodele.Id));
                    if (varclsmodele.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsmodele.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsmodele.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsmodele.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsmodele.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsmodele.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmodele.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsmodele.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsmodele.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsmodele.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'modele' avec la classe 'clsmodele' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsmodele(clsmodele varclsmodele)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE modele  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsmodele.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsmodele.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsmodele.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsmodele.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsmodele.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsmodele.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmodele.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsmodele.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsmodele.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsmodele.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmodele.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'modele' avec la classe 'clsmodele' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsmodele(clsmodele varclsmodele)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM modele  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmodele.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'modele' avec la classe 'clsmodele' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSMODELE 
        #region  CLSDEFAULT_IP
        public clsdefault_ip getClsdefault_ip(object intid)
        {
            clsdefault_ip varclsdefault_ip = new clsdefault_ip();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM default_ip WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdefault_ip.Id = int.Parse(dr["id"].ToString());
                            varclsdefault_ip.Designation = dr["designation"].ToString();
                            varclsdefault_ip.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsdefault_ip.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsdefault_ip.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsdefault_ip.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'default_ip' avec la classe 'clsdefault_ip' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsdefault_ip;
        }

        public List<clsdefault_ip> getAllClsdefault_ip(string criteria)
        {
            List<clsdefault_ip> lstclsdefault_ip = new List<clsdefault_ip>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_default_ip_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdefault_ip varclsdefault_ip = null;
                        while (dr.Read())
                        {
                            varclsdefault_ip = new clsdefault_ip();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdefault_ip.Id = int.Parse(dr["id"].ToString());
                            varclsdefault_ip.Designation = dr["designation"].ToString();
                            varclsdefault_ip.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsdefault_ip.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsdefault_ip.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsdefault_ip.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsdefault_ip.Add(varclsdefault_ip);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'default_ip' avec la classe 'clsdefault_ip' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsdefault_ip;
        }

        public List<clsdefault_ip> getAllClsdefault_ip()
        {
            List<clsdefault_ip> lstclsdefault_ip = new List<clsdefault_ip>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM default_ip ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdefault_ip varclsdefault_ip = null;
                        while (dr.Read())
                        {

                            varclsdefault_ip = new clsdefault_ip();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdefault_ip.Id = int.Parse(dr["id"].ToString());
                            varclsdefault_ip.Designation = dr["designation"].ToString();
                            varclsdefault_ip.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsdefault_ip.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsdefault_ip.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsdefault_ip.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsdefault_ip.Add(varclsdefault_ip);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'default_ip' avec la classe 'clsdefault_ip' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsdefault_ip;
        }

        public int insertClsdefault_ip(clsdefault_ip varclsdefault_ip)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO default_ip ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdefault_ip.Id));
                    if (!string.IsNullOrEmpty(varclsdefault_ip.Designation)) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, ValidateIPv4Regex(varclsdefault_ip.Designation)));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsdefault_ip.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsdefault_ip.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsdefault_ip.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsdefault_ip.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdefault_ip.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsdefault_ip.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsdefault_ip.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsdefault_ip.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'default_ip' avec la classe 'clsdefault_ip' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsdefault_ip(clsdefault_ip varclsdefault_ip)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE default_ip  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (!string.IsNullOrEmpty(varclsdefault_ip.Designation)) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, ValidateIPv4Regex(varclsdefault_ip.Designation)));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsdefault_ip.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsdefault_ip.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsdefault_ip.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsdefault_ip.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdefault_ip.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsdefault_ip.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsdefault_ip.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsdefault_ip.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdefault_ip.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'default_ip' avec la classe 'clsdefault_ip' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsdefault_ip(clsdefault_ip varclsdefault_ip)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM default_ip  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdefault_ip.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'default_ip' avec la classe 'clsdefault_ip' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSDEFAULT_IP 
        #region  CLSCOULEUR
        public clscouleur getClscouleur(object intid)
        {
            clscouleur varclscouleur = new clscouleur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM couleur WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclscouleur.Id = int.Parse(dr["id"].ToString());
                            varclscouleur.Designation = dr["designation"].ToString();
                            varclscouleur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscouleur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscouleur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscouleur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'couleur' avec la classe 'clscouleur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclscouleur;
        }

        public List<clscouleur> getAllClscouleur(string criteria)
        {
            List<clscouleur> lstclscouleur = new List<clscouleur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_compte_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clscouleur varclscouleur = null;
                        while (dr.Read())
                        {
                            varclscouleur = new clscouleur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscouleur.Id = int.Parse(dr["id"].ToString());
                            varclscouleur.Designation = dr["designation"].ToString();
                            varclscouleur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscouleur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscouleur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscouleur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclscouleur.Add(varclscouleur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'couleur' avec la classe 'clscouleur' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclscouleur;
        }

        public List<clscouleur> getAllClscouleur()
        {
            List<clscouleur> lstclscouleur = new List<clscouleur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM couleur ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscouleur varclscouleur = null;
                        while (dr.Read())
                        {

                            varclscouleur = new clscouleur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscouleur.Id = int.Parse(dr["id"].ToString());
                            varclscouleur.Designation = dr["designation"].ToString();
                            varclscouleur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscouleur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscouleur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscouleur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclscouleur.Add(varclscouleur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'couleur' avec la classe 'clscouleur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclscouleur;
        }

        public int insertClscouleur(clscouleur varclscouleur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO couleur ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscouleur.Id));
                    if (varclscouleur.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclscouleur.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclscouleur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclscouleur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclscouleur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclscouleur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclscouleur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclscouleur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclscouleur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclscouleur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'couleur' avec la classe 'clscouleur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClscouleur(clscouleur varclscouleur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE couleur  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclscouleur.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclscouleur.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclscouleur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclscouleur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclscouleur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclscouleur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclscouleur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclscouleur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclscouleur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclscouleur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscouleur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'couleur' avec la classe 'clscouleur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClscouleur(clscouleur varclscouleur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM couleur  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscouleur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'couleur' avec la classe 'clscouleur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSCOULEUR 
        #region  CLSDEFAULT_PWD
        public clsdefault_pwd getClsdefault_pwd(object intid)
        {
            clsdefault_pwd varclsdefault_pwd = new clsdefault_pwd();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM default_pwd WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdefault_pwd.Id = int.Parse(dr["id"].ToString());
                            varclsdefault_pwd.Designation = dr["designation"].ToString();
                            varclsdefault_pwd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsdefault_pwd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsdefault_pwd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsdefault_pwd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'default_pwd' avec la classe 'clsdefault_pwd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsdefault_pwd;
        }

        public List<clsdefault_pwd> getAllClsdefault_pwd(string criteria)
        {
            List<clsdefault_pwd> lstclsdefault_pwd = new List<clsdefault_pwd>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_default_pwd_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdefault_pwd varclsdefault_pwd = null;
                        while (dr.Read())
                        {
                            varclsdefault_pwd = new clsdefault_pwd();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdefault_pwd.Id = int.Parse(dr["id"].ToString());
                            varclsdefault_pwd.Designation = dr["designation"].ToString();
                            varclsdefault_pwd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsdefault_pwd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsdefault_pwd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsdefault_pwd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsdefault_pwd.Add(varclsdefault_pwd);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'default_pwd' avec la classe 'clsdefault_pwd' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsdefault_pwd;
        }

        public List<clsdefault_pwd> getAllClsdefault_pwd()
        {
            List<clsdefault_pwd> lstclsdefault_pwd = new List<clsdefault_pwd>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM default_pwd ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdefault_pwd varclsdefault_pwd = null;
                        while (dr.Read())
                        {
                            varclsdefault_pwd = new clsdefault_pwd();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdefault_pwd.Id = int.Parse(dr["id"].ToString());
                            varclsdefault_pwd.Designation = dr["designation"].ToString();
                            varclsdefault_pwd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsdefault_pwd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsdefault_pwd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsdefault_pwd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsdefault_pwd.Add(varclsdefault_pwd);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'default_pwd' avec la classe 'clsdefault_pwd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsdefault_pwd;
        }

        public int insertClsdefault_pwd(clsdefault_pwd varclsdefault_pwd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO default_pwd ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdefault_pwd.Id));
                    if (varclsdefault_pwd.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsdefault_pwd.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    if (varclsdefault_pwd.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsdefault_pwd.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsdefault_pwd.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsdefault_pwd.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdefault_pwd.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsdefault_pwd.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsdefault_pwd.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsdefault_pwd.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'default_pwd' avec la classe 'clsdefault_pwd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsdefault_pwd(clsdefault_pwd varclsdefault_pwd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE default_pwd  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsdefault_pwd.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsdefault_pwd.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    if (varclsdefault_pwd.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsdefault_pwd.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsdefault_pwd.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsdefault_pwd.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdefault_pwd.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsdefault_pwd.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsdefault_pwd.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsdefault_pwd.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdefault_pwd.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'default_pwd' avec la classe 'clsdefault_pwd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsdefault_pwd(clsdefault_pwd varclsdefault_pwd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM default_pwd  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdefault_pwd.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'default_pwd' avec la classe 'clsdefault_pwd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSDEFAULT_PWD 
        #region  CLSPORTEE
        public clsportee getClsportee(object intid)
        {
            clsportee varclsportee = new clsportee();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM portee WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsportee.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsportee.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsportee.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsportee.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsportee.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsportee.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'portee' avec la classe 'clsportee' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsportee;
        }

        public List<clsportee> getAllClsportee(string criteria)
        {
            List<clsportee> lstclsportee = new List<clsportee>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_compte_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsportee varclsportee = null;
                        while (dr.Read())
                        {
                            varclsportee = new clsportee();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsportee.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsportee.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsportee.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsportee.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsportee.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsportee.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsportee.Add(varclsportee);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'portee' avec la classe 'clsportee' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsportee;
        }

        public List<clsportee> getAllClsportee()
        {
            List<clsportee> lstclsportee = new List<clsportee>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM portee ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsportee varclsportee = null;
                        while (dr.Read())
                        {
                            varclsportee = new clsportee();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsportee.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsportee.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsportee.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsportee.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsportee.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsportee.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsportee.Add(varclsportee);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'portee' avec la classe 'clsportee' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsportee;
        }

        public int insertClsportee(clsportee varclsportee)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO portee ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsportee.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclsportee.Valeur));
                    if (varclsportee.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsportee.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsportee.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsportee.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsportee.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsportee.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsportee.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsportee.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'portee' avec la classe 'clsportee' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsportee(clsportee varclsportee)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE portee  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclsportee.Valeur));
                    if (varclsportee.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsportee.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsportee.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsportee.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsportee.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsportee.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsportee.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsportee.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsportee.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'portee' avec la classe 'clsportee' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsportee(clsportee varclsportee)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM portee  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsportee.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'portee' avec la classe 'clsportee' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSPORTEE 
        #region  CLSPOIDS
        public clspoids getClspoids(object intid)
        {
            clspoids varclspoids = new clspoids();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM poids WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspoids.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspoids.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspoids.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspoids.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspoids.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspoids.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'poids' avec la classe 'clspoids' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclspoids;
        }

        public List<clspoids> getAllClspoids(string criteria)
        {
            List<clspoids> lstclspoids = new List<clspoids>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_compte_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspoids varclspoids = null;
                        while (dr.Read())
                        {
                            varclspoids = new clspoids();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspoids.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspoids.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspoids.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspoids.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspoids.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspoids.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclspoids.Add(varclspoids);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'poids' avec la classe 'clspoids' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspoids;
        }

        public List<clspoids> getAllClspoids()
        {
            List<clspoids> lstclspoids = new List<clspoids>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM poids ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspoids varclspoids = null;
                        while (dr.Read())
                        {
                            varclspoids = new clspoids();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspoids.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspoids.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspoids.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspoids.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspoids.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspoids.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclspoids.Add(varclspoids);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'poids' avec la classe 'clspoids' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspoids;
        }

        public int insertClspoids(clspoids varclspoids)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO poids ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspoids.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclspoids.Valeur));
                    if (varclspoids.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspoids.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspoids.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspoids.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspoids.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspoids.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspoids.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspoids.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'poids' avec la classe 'clspoids' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClspoids(clspoids varclspoids)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE poids  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclspoids.Valeur));
                    if (varclspoids.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspoids.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspoids.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspoids.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspoids.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspoids.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspoids.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspoids.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspoids.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'poids' avec la classe 'clspoids' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClspoids(clspoids varclspoids)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM poids  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspoids.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'poids' avec la classe 'clspoids' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSPOIDS 
        #region  CLSCONSOLE
        public clsconsole getClsconsole(object intid)
        {
            clsconsole varclsconsole = new clsconsole();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM console WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsole.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsconsole.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsconsole.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsconsole.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsconsole.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsconsole.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'console' avec la classe 'clsconsole' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsconsole;
        }

        public List<clsconsole> getAllClsconsole(string criteria)
        {
            List<clsconsole> lstclsconsole = new List<clsconsole>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_compte_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsole varclsconsole = null;
                        while (dr.Read())
                        {
                            varclsconsole = new clsconsole();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsole.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsconsole.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsconsole.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsconsole.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsconsole.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsconsole.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsconsole.Add(varclsconsole);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'console' avec la classe 'clsconsole' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsconsole;
        }

        public List<clsconsole> getAllClsconsole()
        {
            List<clsconsole> lstclsconsole = new List<clsconsole>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM console ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconsole varclsconsole = null;
                        while (dr.Read())
                        {
                            varclsconsole = new clsconsole();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsole.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsconsole.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsconsole.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsconsole.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsconsole.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsconsole.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsconsole.Add(varclsconsole);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'console' avec la classe 'clsconsole' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsconsole;
        }

        public int insertClsconsole(clsconsole varclsconsole)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO console ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsconsole.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsconsole.Valeur));
                    if (varclsconsole.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsconsole.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsconsole.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsconsole.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsconsole.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsconsole.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsconsole.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsconsole.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'console' avec la classe 'clsconsole' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsconsole(clsconsole varclsconsole)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE console  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsconsole.Valeur));
                    if (varclsconsole.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsconsole.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsconsole.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsconsole.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsconsole.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsconsole.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsconsole.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsconsole.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsconsole.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'console' avec la classe 'clsconsole' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsconsole(clsconsole varclsconsole)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM console  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsconsole.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'console' avec la classe 'clsconsole' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSCONSOLE 
        #region  CLSTYPE_ORDINATEUR
        public clstype_ordinateur getClstype_ordinateur(object intid)
        {
            clstype_ordinateur varclstype_ordinateur = new clstype_ordinateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM type_ordinateur WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_ordinateur.Id = int.Parse(dr["id"].ToString());
                            varclstype_ordinateur.Designation = dr["designation"].ToString();
                            varclstype_ordinateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_ordinateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_ordinateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_ordinateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'type_ordinateur' avec la classe 'clstype_ordinateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstype_ordinateur;
        }

        public List<clstype_ordinateur> getAllClstype_ordinateur(string criteria)
        {
            List<clstype_ordinateur> lstclstype_ordinateur = new List<clstype_ordinateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_type_ordinateur_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_ordinateur varclstype_ordinateur = null;
                        while (dr.Read())
                        {
                            varclstype_ordinateur = new clstype_ordinateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_ordinateur.Id = int.Parse(dr["id"].ToString());
                            varclstype_ordinateur.Designation = dr["designation"].ToString();
                            varclstype_ordinateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_ordinateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_ordinateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_ordinateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_ordinateur.Add(varclstype_ordinateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'type_ordinateur' avec la classe 'clstype_ordinateur' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_ordinateur;
        }

        public List<clstype_ordinateur> getAllClstype_ordinateur()
        {
            List<clstype_ordinateur> lstclstype_ordinateur = new List<clstype_ordinateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM type_ordinateur ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_ordinateur varclstype_ordinateur = null;
                        while (dr.Read())
                        {
                            varclstype_ordinateur = new clstype_ordinateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_ordinateur.Id = int.Parse(dr["id"].ToString());
                            varclstype_ordinateur.Designation = dr["designation"].ToString();
                            varclstype_ordinateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_ordinateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_ordinateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_ordinateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_ordinateur.Add(varclstype_ordinateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'type_ordinateur' avec la classe 'clstype_ordinateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_ordinateur;
        }

        public int insertClstype_ordinateur(clstype_ordinateur varclstype_ordinateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO type_ordinateur ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_ordinateur.Id));
                    if (varclstype_ordinateur.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_ordinateur.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_ordinateur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_ordinateur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_ordinateur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_ordinateur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_ordinateur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_ordinateur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_ordinateur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_ordinateur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'type_ordinateur' avec la classe 'clstype_ordinateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstype_ordinateur(clstype_ordinateur varclstype_ordinateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE type_ordinateur  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclstype_ordinateur.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_ordinateur.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_ordinateur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_ordinateur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_ordinateur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_ordinateur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_ordinateur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_ordinateur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_ordinateur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_ordinateur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_ordinateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'type_ordinateur' avec la classe 'clstype_ordinateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstype_ordinateur(clstype_ordinateur varclstype_ordinateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM type_ordinateur  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_ordinateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'type_ordinateur' avec la classe 'clstype_ordinateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTYPE_ORDINATEUR 
        #region  CLSAUXILIAIRE
        public clsauxiliaire getClsauxiliaire(object intid)
        {
            clsauxiliaire varclsauxiliaire = new clsauxiliaire();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM auxiliaire WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsauxiliaire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsauxiliaire.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsauxiliaire.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsauxiliaire.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsauxiliaire.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsauxiliaire.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'auxiliaire' avec la classe 'clsauxiliaire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsauxiliaire;
        }

        public List<clsauxiliaire> getAllClsauxiliaire(string criteria)
        {
            List<clsauxiliaire> lstclsauxiliaire = new List<clsauxiliaire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_auxiliaire_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsauxiliaire varclsauxiliaire = null;
                        while (dr.Read())
                        {
                            varclsauxiliaire = new clsauxiliaire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsauxiliaire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsauxiliaire.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsauxiliaire.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsauxiliaire.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsauxiliaire.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsauxiliaire.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsauxiliaire.Add(varclsauxiliaire);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'auxiliaire' avec la classe 'clsauxiliaire' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsauxiliaire;
        }

        public List<clsauxiliaire> getAllClsauxiliaire()
        {
            List<clsauxiliaire> lstclsauxiliaire = new List<clsauxiliaire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM auxiliaire ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsauxiliaire varclsauxiliaire = null;
                        while (dr.Read())
                        {
                            varclsauxiliaire = new clsauxiliaire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsauxiliaire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsauxiliaire.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsauxiliaire.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsauxiliaire.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsauxiliaire.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsauxiliaire.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsauxiliaire.Add(varclsauxiliaire);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'auxiliaire' avec la classe 'clsauxiliaire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsauxiliaire;
        }

        public int insertClsauxiliaire(clsauxiliaire varclsauxiliaire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO auxiliaire ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsauxiliaire.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsauxiliaire.Valeur));
                    if (varclsauxiliaire.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsauxiliaire.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsauxiliaire.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsauxiliaire.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsauxiliaire.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsauxiliaire.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsauxiliaire.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsauxiliaire.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'auxiliaire' avec la classe 'clsauxiliaire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsauxiliaire(clsauxiliaire varclsauxiliaire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE auxiliaire  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsauxiliaire.Valeur));
                    if (varclsauxiliaire.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsauxiliaire.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsauxiliaire.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsauxiliaire.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsauxiliaire.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsauxiliaire.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsauxiliaire.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsauxiliaire.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsauxiliaire.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'auxiliaire' avec la classe 'clsauxiliaire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsauxiliaire(clsauxiliaire varclsauxiliaire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM auxiliaire  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsauxiliaire.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'auxiliaire' avec la classe 'clsauxiliaire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSAUXILIAIRE 
        #region  CLSTELEPHONE
        public clstelephone getClstelephone(object intid)
        {
            clstelephone varclstelephone = new clstelephone();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM telephone WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstelephone.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclstelephone.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclstelephone.Code = dr["code"].ToString();
                            varclstelephone.Numero = dr["numero"].ToString();
                            varclstelephone.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstelephone.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstelephone.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstelephone.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'telephone' avec la classe 'clstelephone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstelephone;
        }

        public List<clstelephone> getAllClstelephone(string criteria)
        {
            List<clstelephone> lstclstelephone = new List<clstelephone>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_telephone_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstelephone varclstelephone = null;
                        while (dr.Read())
                        {
                            varclstelephone = new clstelephone();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstelephone.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclstelephone.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclstelephone.Code = dr["code"].ToString();
                            varclstelephone.Numero = dr["numero"].ToString();
                            varclstelephone.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstelephone.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstelephone.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstelephone.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstelephone.Add(varclstelephone);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'telephone' avec la classe 'clstelephone' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstelephone;
        }

        public List<clstelephone> getAllClstelephone(string criteria, int id_personne)
        {
            List<clstelephone> lstclstelephone = new List<clstelephone>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_telephone_personne_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id_personne));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstelephone varclstelephone = null;
                        while (dr.Read())
                        {
                            varclstelephone = new clstelephone();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstelephone.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclstelephone.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclstelephone.Code = dr["code"].ToString();
                            varclstelephone.Numero = dr["numero"].ToString();
                            varclstelephone.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstelephone.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstelephone.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstelephone.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstelephone.Add(varclstelephone);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'telephone' avec la classe 'clstelephone' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstelephone;
        }

        public List<clstelephone> getAllClstelephone()
        {
            List<clstelephone> lstclstelephone = new List<clstelephone>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM telephone ORDER BY numero ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstelephone varclstelephone = null;
                        while (dr.Read())
                        {
                            varclstelephone = new clstelephone();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstelephone.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclstelephone.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclstelephone.Code = dr["code"].ToString();
                            varclstelephone.Numero = dr["numero"].ToString();
                            varclstelephone.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstelephone.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstelephone.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstelephone.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstelephone.Add(varclstelephone);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'telephone' avec la classe 'clstelephone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstelephone;
        }

        public List<string> getTelephonePersonne()
        {
            List<string> lsttelephonepersonne = new List<string>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.nom + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') + ' =>' + telephone.code + telephone.numero AS Tel FROM personne 
                    inner join telephone ON personne.id = telephone.id_personne");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            lsttelephonepersonne.Add(dr["Tel"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'telephone' avec la classe 'clstelephone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lsttelephonepersonne;
        }

        public List<clstelephone> getAllClstelephone(int id_personne)
        {
            List<clstelephone> lstclstelephone = new List<clstelephone>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM telephone INNER JOIN personne ON personne.id=telephone.id_personne WHERE personne.id=@id ORDER BY numero ASC");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id_personne));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstelephone varclstelephone = null;
                        while (dr.Read())
                        {
                            varclstelephone = new clstelephone();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstelephone.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclstelephone.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclstelephone.Code = dr["code"].ToString();
                            varclstelephone.Numero = dr["numero"].ToString();
                            varclstelephone.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstelephone.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstelephone.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstelephone.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstelephone.Add(varclstelephone);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'telephone' avec la classe 'clstelephone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstelephone;
        }

        public int insertClstelephone(clstelephone varclstelephone)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO telephone ( id,id_personne,code,numero,user_created,date_created,user_modified,date_modified ) VALUES (@id,@id_personne,@code,@numero,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstelephone.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclstelephone.Id_personne));
                    if (varclstelephone.Code != null) cmd.Parameters.Add(getParameter(cmd, "@code", DbType.String, 4, varclstelephone.Code));
                    else cmd.Parameters.Add(getParameter(cmd, "@code", DbType.String, 4, DBNull.Value));
                    if (varclstelephone.Numero != null) cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 9, varclstelephone.Numero));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 9, DBNull.Value));
                    if (varclstelephone.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstelephone.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstelephone.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstelephone.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstelephone.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstelephone.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstelephone.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstelephone.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'telephone' avec la classe 'clstelephone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstelephone(clstelephone varclstelephone)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE telephone  SET id_personne=@id_personne,code=@code,numero=@numero,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclstelephone.Id_personne));
                    if (varclstelephone.Code != null) cmd.Parameters.Add(getParameter(cmd, "@code", DbType.String, 4, varclstelephone.Code));
                    else cmd.Parameters.Add(getParameter(cmd, "@code", DbType.String, 4, DBNull.Value));
                    if (varclstelephone.Numero != null) cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 9, varclstelephone.Numero));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 9, DBNull.Value));
                    if (varclstelephone.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstelephone.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstelephone.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstelephone.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstelephone.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstelephone.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstelephone.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstelephone.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstelephone.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'telephone' avec la classe 'clstelephone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstelephone(clstelephone varclstelephone)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM telephone  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstelephone.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'telephone' avec la classe 'clstelephone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTELEPHONE 
        #region  CLSTYPE_IMPRIMANTE
        public clstype_imprimante getClstype_imprimante(object intid)
        {
            clstype_imprimante varclstype_imprimante = new clstype_imprimante();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM type_imprimante WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_imprimante.Id = int.Parse(dr["id"].ToString());
                            varclstype_imprimante.Designation = dr["designation"].ToString();
                            varclstype_imprimante.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_imprimante.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_imprimante.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_imprimante.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'type_imprimante' avec la classe 'clstype_imprimante' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstype_imprimante;
        }

        public List<clstype_imprimante> getAllClstype_imprimante(string criteria)
        {
            List<clstype_imprimante> lstclstype_imprimante = new List<clstype_imprimante>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_type_imprimante_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_imprimante varclstype_imprimante = null;
                        while (dr.Read())
                        {
                            varclstype_imprimante = new clstype_imprimante();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_imprimante.Id = int.Parse(dr["id"].ToString());
                            varclstype_imprimante.Designation = dr["designation"].ToString();
                            varclstype_imprimante.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_imprimante.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_imprimante.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_imprimante.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_imprimante.Add(varclstype_imprimante);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'type_imprimante' avec la classe 'clstype_imprimante' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_imprimante;
        }

        public List<clstype_imprimante> getAllClstype_imprimante()
        {
            List<clstype_imprimante> lstclstype_imprimante = new List<clstype_imprimante>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM type_imprimante ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_imprimante varclstype_imprimante = null;
                        while (dr.Read())
                        {
                            varclstype_imprimante = new clstype_imprimante();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_imprimante.Id = int.Parse(dr["id"].ToString());
                            varclstype_imprimante.Designation = dr["designation"].ToString();
                            varclstype_imprimante.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_imprimante.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_imprimante.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_imprimante.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_imprimante.Add(varclstype_imprimante);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'type_imprimante' avec la classe 'clstype_imprimante' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_imprimante;
        }

        public int insertClstype_imprimante(clstype_imprimante varclstype_imprimante)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO type_imprimante ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_imprimante.Id));
                    if (varclstype_imprimante.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_imprimante.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_imprimante.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_imprimante.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_imprimante.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_imprimante.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_imprimante.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_imprimante.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_imprimante.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_imprimante.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'type_imprimante' avec la classe 'clstype_imprimante' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstype_imprimante(clstype_imprimante varclstype_imprimante)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE type_imprimante  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclstype_imprimante.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_imprimante.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_imprimante.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_imprimante.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_imprimante.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_imprimante.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_imprimante.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_imprimante.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_imprimante.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_imprimante.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_imprimante.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'type_imprimante' avec la classe 'clstype_imprimante' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstype_imprimante(clstype_imprimante varclstype_imprimante)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM type_imprimante  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_imprimante.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'type_imprimante' avec la classe 'clstype_imprimante' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTYPE_IMPRIMANTE 
        #region  CLSFREQUENCE
        public clsfrequence getClsfrequence(object intid)
        {
            clsfrequence varclsfrequence = new clsfrequence();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM frequence WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfrequence.Id = int.Parse(dr["id"].ToString());
                            varclsfrequence.Designation = dr["designation"].ToString();
                            varclsfrequence.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfrequence.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfrequence.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfrequence.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'frequence' avec la classe 'clsfrequence' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsfrequence;
        }

        public List<clsfrequence> getAllClsfrequence(string criteria)
        {
            List<clsfrequence> lstclsfrequence = new List<clsfrequence>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_frequence_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfrequence varclsfrequence = null;
                        while (dr.Read())
                        {
                            varclsfrequence = new clsfrequence();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfrequence.Id = int.Parse(dr["id"].ToString());
                            varclsfrequence.Designation = dr["designation"].ToString();
                            varclsfrequence.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfrequence.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfrequence.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfrequence.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsfrequence.Add(varclsfrequence);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'frequence' avec la classe 'clsfrequence' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsfrequence;
        }

        public List<clsfrequence> getAllClsfrequence()
        {
            List<clsfrequence> lstclsfrequence = new List<clsfrequence>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM frequence ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfrequence varclsfrequence = null;
                        while (dr.Read())
                        {
                            varclsfrequence = new clsfrequence();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfrequence.Id = int.Parse(dr["id"].ToString());
                            varclsfrequence.Designation = dr["designation"].ToString();
                            varclsfrequence.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfrequence.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfrequence.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfrequence.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsfrequence.Add(varclsfrequence);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'frequence' avec la classe 'clsfrequence' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsfrequence;
        }

        public int insertClsfrequence(clsfrequence varclsfrequence)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO frequence ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfrequence.Id));
                    if (varclsfrequence.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsfrequence.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    if (varclsfrequence.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsfrequence.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsfrequence.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsfrequence.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsfrequence.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsfrequence.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsfrequence.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsfrequence.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'frequence' avec la classe 'clsfrequence' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsfrequence(clsfrequence varclsfrequence)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE frequence  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsfrequence.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsfrequence.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    if (varclsfrequence.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsfrequence.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsfrequence.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsfrequence.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsfrequence.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsfrequence.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsfrequence.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsfrequence.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfrequence.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'frequence' avec la classe 'clsfrequence' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsfrequence(clsfrequence varclsfrequence)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM frequence  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfrequence.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'frequence' avec la classe 'clsfrequence' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSFREQUENCE 
        #region  CLSANTENNE
        public clsantenne getClsantenne(object intid)
        {
            clsantenne varclsantenne = new clsantenne();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM antenne WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsantenne.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsantenne.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsantenne.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsantenne.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsantenne.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsantenne.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'antenne' avec la classe 'clsantenne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsantenne;
        }

        public List<clsantenne> getAllClsantenne(string criteria)
        {
            List<clsantenne> lstclsantenne = new List<clsantenne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_antenne_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsantenne varclsantenne = null;
                        while (dr.Read())
                        {
                            varclsantenne = new clsantenne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsantenne.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsantenne.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsantenne.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsantenne.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsantenne.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsantenne.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsantenne.Add(varclsantenne);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'antenne' avec la classe 'clsantenne' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsantenne;
        }

        public List<clsantenne> getAllClsantenne()
        {
            List<clsantenne> lstclsantenne = new List<clsantenne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM antenne ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsantenne varclsantenne = null;
                        while (dr.Read())
                        {
                            varclsantenne = new clsantenne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsantenne.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsantenne.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsantenne.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsantenne.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsantenne.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsantenne.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsantenne.Add(varclsantenne);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'antenne' avec la classe 'clsantenne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsantenne;
        }

        public int insertClsantenne(clsantenne varclsantenne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO antenne ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsantenne.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsantenne.Valeur));
                    if (varclsantenne.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsantenne.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsantenne.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsantenne.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsantenne.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsantenne.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsantenne.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsantenne.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'antenne' avec la classe 'clsantenne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsantenne(clsantenne varclsantenne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE antenne  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsantenne.Valeur));
                    if (varclsantenne.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsantenne.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsantenne.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsantenne.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsantenne.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsantenne.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsantenne.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsantenne.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsantenne.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'antenne' avec la classe 'clsantenne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsantenne(clsantenne varclsantenne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM antenne  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsantenne.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'antenne' avec la classe 'clsantenne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSANTENNE 
        #region  CLSTYPE_AMPLIFICATEUR
        public clstype_amplificateur getClstype_amplificateur(object intid)
        {
            clstype_amplificateur varclstype_amplificateur = new clstype_amplificateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM type_amplificateur WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_amplificateur.Id = int.Parse(dr["id"].ToString());
                            varclstype_amplificateur.Designation = dr["designation"].ToString();
                            varclstype_amplificateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_amplificateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_amplificateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_amplificateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'type_amplificateur' avec la classe 'clstype_amplificateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstype_amplificateur;
        }

        public List<clstype_amplificateur> getAllClstype_amplificateur(string criteria)
        {
            List<clstype_amplificateur> lstclstype_amplificateur = new List<clstype_amplificateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "type_amplificateur_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_amplificateur varclstype_amplificateur = null;
                        while (dr.Read())
                        {
                            varclstype_amplificateur = new clstype_amplificateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_amplificateur.Id = int.Parse(dr["id"].ToString());
                            varclstype_amplificateur.Designation = dr["designation"].ToString();
                            varclstype_amplificateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_amplificateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_amplificateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_amplificateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_amplificateur.Add(varclstype_amplificateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'type_amplificateur' avec la classe 'clstype_amplificateur' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_amplificateur;
        }

        public List<clstype_amplificateur> getAllClstype_amplificateur()
        {
            List<clstype_amplificateur> lstclstype_amplificateur = new List<clstype_amplificateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM type_amplificateur ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_amplificateur varclstype_amplificateur = null;
                        while (dr.Read())
                        {
                            varclstype_amplificateur = new clstype_amplificateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_amplificateur.Id = int.Parse(dr["id"].ToString());
                            varclstype_amplificateur.Designation = dr["designation"].ToString();
                            varclstype_amplificateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_amplificateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_amplificateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_amplificateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_amplificateur.Add(varclstype_amplificateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'type_amplificateur' avec la classe 'clstype_amplificateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_amplificateur;
        }

        public int insertClstype_amplificateur(clstype_amplificateur varclstype_amplificateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO type_amplificateur ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_amplificateur.Id));
                    if (varclstype_amplificateur.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_amplificateur.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_amplificateur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_amplificateur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_amplificateur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_amplificateur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_amplificateur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_amplificateur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_amplificateur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_amplificateur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'type_amplificateur' avec la classe 'clstype_amplificateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstype_amplificateur(clstype_amplificateur varclstype_amplificateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE type_amplificateur  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclstype_amplificateur.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_amplificateur.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_amplificateur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_amplificateur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_amplificateur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_amplificateur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_amplificateur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_amplificateur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_amplificateur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_amplificateur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_amplificateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'type_amplificateur' avec la classe 'clstype_amplificateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstype_amplificateur(clstype_amplificateur varclstype_amplificateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM type_amplificateur  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_amplificateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'type_amplificateur' avec la classe 'clstype_amplificateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTYPE_AMPLIFICATEUR 
        #region  CLSEMAIL
        public clsemail getClsemail(object intid)
        {
            clsemail varclsemail = new clsemail();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM email WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsemail.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsemail.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsemail.Designation = dr["designation"].ToString();
                            varclsemail.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsemail.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsemail.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsemail.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'email' avec la classe 'clsemail' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsemail;
        }

        public List<clsemail> getAllClsemail(string criteria)
        {
            List<clsemail> lstclsemail = new List<clsemail>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_email_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsemail varclsemail = null;
                        while (dr.Read())
                        {
                            varclsemail = new clsemail();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsemail.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsemail.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsemail.Designation = dr["designation"].ToString();
                            varclsemail.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsemail.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsemail.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsemail.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsemail.Add(varclsemail);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'email' avec la classe 'clsemail' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsemail;
        }

        public List<clsemail> getAllClsemail(string criteria, int id_personne)
        {
            List<clsemail> lstclsemail = new List<clsemail>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_email_personne_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, criteria));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id_personne));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsemail varclsemail = null;
                        while (dr.Read())
                        {
                            varclsemail = new clsemail();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsemail.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsemail.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsemail.Designation = dr["designation"].ToString();
                            varclsemail.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsemail.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsemail.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsemail.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsemail.Add(varclsemail);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'email' avec la classe 'clsemail' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsemail;
        }

        public List<clsemail> getAllClsemail()
        {
            List<clsemail> lstclsemail = new List<clsemail>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM email ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsemail varclsemail = null;
                        while (dr.Read())
                        {
                            varclsemail = new clsemail();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsemail.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsemail.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsemail.Designation = dr["designation"].ToString();
                            varclsemail.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsemail.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsemail.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsemail.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsemail.Add(varclsemail);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'email' avec la classe 'clsemail' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsemail;
        }

        public List<clsemail> getAllClsemail(int id_personne)
        {
            List<clsemail> lstclsemail = new List<clsemail>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM email INNER JOIN personne ON personne.id=email.id_personne WHERE personne.id=@id ORDER BY designation ASC");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id_personne));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsemail varclsemail = null;
                        while (dr.Read())
                        {
                            varclsemail = new clsemail();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsemail.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsemail.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsemail.Designation = dr["designation"].ToString();
                            varclsemail.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsemail.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsemail.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsemail.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsemail.Add(varclsemail);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'email' avec la classe 'clsemail' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsemail;
        }

        public int insertClsemail(clsemail varclsemail)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO email ( id,id_personne,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@id_personne,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsemail.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsemail.Id_personne));
                    if (varclsemail.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsemail.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsemail.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsemail.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsemail.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsemail.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsemail.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsemail.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsemail.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsemail.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'email' avec la classe 'clsemail' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsemail(clsemail varclsemail)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE email  SET id_personne=@id_personne,designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsemail.Id_personne));
                    if (varclsemail.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsemail.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsemail.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsemail.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsemail.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsemail.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsemail.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsemail.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsemail.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsemail.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsemail.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'email' avec la classe 'clsemail' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsemail(clsemail varclsemail)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM email  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsemail.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'email' avec la classe 'clsemail' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSEMAIL 
        #region  CLSTYPE_ROUTEUR_AP
        public clstype_routeur_AP getClstype_routeur_AP(object intid)
        {
            clstype_routeur_AP varclstype_routeur_AP = new clstype_routeur_AP();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM type_routeur_AP WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_routeur_AP.Id = int.Parse(dr["id"].ToString());
                            varclstype_routeur_AP.Designation = dr["designation"].ToString();
                            varclstype_routeur_AP.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_routeur_AP.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_routeur_AP.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_routeur_AP.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'type_routeur_AP' avec la classe 'clstype_routeur_AP' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstype_routeur_AP;
        }

        public List<clstype_routeur_AP> getAllClstype_routeur_AP(string criteria)
        {
            List<clstype_routeur_AP> lstclstype_routeur_AP = new List<clstype_routeur_AP>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_type_routeur_AP_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_routeur_AP varclstype_routeur_AP = null;
                        while (dr.Read())
                        {
                            varclstype_routeur_AP = new clstype_routeur_AP();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_routeur_AP.Id = int.Parse(dr["id"].ToString());
                            varclstype_routeur_AP.Designation = dr["designation"].ToString();
                            varclstype_routeur_AP.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_routeur_AP.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_routeur_AP.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_routeur_AP.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_routeur_AP.Add(varclstype_routeur_AP);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'type_routeur_AP' avec la classe 'clstype_routeur_AP' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_routeur_AP;
        }

        public List<clstype_routeur_AP> getAllClstype_routeur_AP()
        {
            List<clstype_routeur_AP> lstclstype_routeur_AP = new List<clstype_routeur_AP>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM type_routeur_AP ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_routeur_AP varclstype_routeur_AP = null;
                        while (dr.Read())
                        {
                            varclstype_routeur_AP = new clstype_routeur_AP();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_routeur_AP.Id = int.Parse(dr["id"].ToString());
                            varclstype_routeur_AP.Designation = dr["designation"].ToString();
                            varclstype_routeur_AP.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_routeur_AP.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_routeur_AP.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_routeur_AP.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_routeur_AP.Add(varclstype_routeur_AP);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'type_routeur_AP' avec la classe 'clstype_routeur_AP' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_routeur_AP;
        }

        public int insertClstype_routeur_AP(clstype_routeur_AP varclstype_routeur_AP)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO type_routeur_AP ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_routeur_AP.Id));
                    if (varclstype_routeur_AP.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_routeur_AP.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_routeur_AP.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_routeur_AP.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_routeur_AP.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_routeur_AP.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_routeur_AP.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_routeur_AP.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_routeur_AP.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_routeur_AP.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'type_routeur_AP' avec la classe 'clstype_routeur_AP' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstype_routeur_AP(clstype_routeur_AP varclstype_routeur_AP)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE type_routeur_AP  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclstype_routeur_AP.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_routeur_AP.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_routeur_AP.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_routeur_AP.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_routeur_AP.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_routeur_AP.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_routeur_AP.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_routeur_AP.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_routeur_AP.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_routeur_AP.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_routeur_AP.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'type_routeur_AP' avec la classe 'clstype_routeur_AP' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstype_routeur_AP(clstype_routeur_AP varclstype_routeur_AP)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM type_routeur_AP  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_routeur_AP.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'type_routeur_AP' avec la classe 'clstype_routeur_AP' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTYPE_ROUTEUR_AP 
        #region  CLSADRESSE
        public clsadresse getClsadresse(object intid)
        {
            clsadresse varclsadresse = new clsadresse();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM adresse WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsadresse.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsadresse.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsadresse.Designation = dr["designation"].ToString();
                            varclsadresse.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsadresse.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsadresse.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsadresse.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'adresse' avec la classe 'clsadresse' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsadresse;
        }

        public List<clsadresse> getAllClsadresse(string criteria)
        {
            List<clsadresse> lstclsadresse = new List<clsadresse>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_adresse_AP_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsadresse varclsadresse = null;
                        while (dr.Read())
                        {
                            varclsadresse = new clsadresse();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsadresse.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsadresse.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsadresse.Designation = dr["designation"].ToString();
                            varclsadresse.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsadresse.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsadresse.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsadresse.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsadresse.Add(varclsadresse);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'adresse' avec la classe 'clsadresse' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsadresse;
        }

        public List<clsadresse> getAllClsadresse(string criteria, int id_personne)
        {
            List<clsadresse> lstclsadresse = new List<clsadresse>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_adresse_personne_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 300, criteria));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id_personne));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsadresse varclsadresse = null;
                        while (dr.Read())
                        {
                            varclsadresse = new clsadresse();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsadresse.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsadresse.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsadresse.Designation = dr["designation"].ToString();
                            varclsadresse.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsadresse.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsadresse.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsadresse.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsadresse.Add(varclsadresse);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'adresse' avec la classe 'clsadresse' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsadresse;
        }

        public List<clsadresse> getAllClsadresse()
        {
            List<clsadresse> lstclsadresse = new List<clsadresse>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM adresse ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsadresse varclsadresse = null;
                        while (dr.Read())
                        {
                            varclsadresse = new clsadresse();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsadresse.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsadresse.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsadresse.Designation = dr["designation"].ToString();
                            varclsadresse.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsadresse.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsadresse.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsadresse.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsadresse.Add(varclsadresse);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'adresse' avec la classe 'clsadresse' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsadresse;
        }

        public List<clsadresse> getAllClsadresse(int id_personne)
        {
            List<clsadresse> lstclsadresse = new List<clsadresse>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM adresse INNER JOIN personne ON personne.id=adresse.id_personne WHERE personne.id=@id ORDER BY designation ASC");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id_personne));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsadresse varclsadresse = null;
                        while (dr.Read())
                        {
                            varclsadresse = new clsadresse();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsadresse.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsadresse.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsadresse.Designation = dr["designation"].ToString();
                            varclsadresse.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsadresse.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsadresse.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsadresse.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsadresse.Add(varclsadresse);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'adresse' avec la classe 'clsadresse' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsadresse;
        } 

        public int insertClsadresse(clsadresse varclsadresse)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO adresse ( id,id_personne,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@id_personne,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsadresse.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsadresse.Id_personne));
                    if (varclsadresse.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 300, varclsadresse.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 300, DBNull.Value));
                    if (varclsadresse.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsadresse.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsadresse.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsadresse.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsadresse.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsadresse.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsadresse.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsadresse.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'adresse' avec la classe 'clsadresse' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsadresse(clsadresse varclsadresse)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE adresse  SET id_personne=@id_personne,designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsadresse.Id_personne));
                    if (varclsadresse.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 300, varclsadresse.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 300, DBNull.Value));
                    if (varclsadresse.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsadresse.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsadresse.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsadresse.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsadresse.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsadresse.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsadresse.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsadresse.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsadresse.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'adresse' avec la classe 'clsadresse' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsadresse(clsadresse varclsadresse)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM adresse  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsadresse.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'adresse' avec la classe 'clsadresse' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSADRESSE 
        #region  CLSTYPE_AP
        public clstype_AP getClstype_AP(object intid)
        {
            clstype_AP varclstype_AP = new clstype_AP();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM type_AP WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_AP.Id = int.Parse(dr["id"].ToString());
                            varclstype_AP.Designation = dr["designation"].ToString();
                            varclstype_AP.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_AP.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_AP.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_AP.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'type_AP' avec la classe 'clstype_AP' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstype_AP;
        }

        public List<clstype_AP> getAllClstype_AP(string criteria)
        {
            List<clstype_AP> lstclstype_AP = new List<clstype_AP>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_type_AP_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_AP varclstype_AP = null;
                        while (dr.Read())
                        {
                            varclstype_AP = new clstype_AP();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_AP.Id = int.Parse(dr["id"].ToString());
                            varclstype_AP.Designation = dr["designation"].ToString();
                            varclstype_AP.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_AP.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_AP.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_AP.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_AP.Add(varclstype_AP);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'type_AP' avec la classe 'clstype_AP' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_AP;
        }

        public List<clstype_AP> getAllClstype_AP()
        {
            List<clstype_AP> lstclstype_AP = new List<clstype_AP>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM type_AP ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_AP varclstype_AP = null;
                        while (dr.Read())
                        {
                            varclstype_AP = new clstype_AP();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_AP.Id = int.Parse(dr["id"].ToString());
                            varclstype_AP.Designation = dr["designation"].ToString();
                            varclstype_AP.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_AP.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_AP.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_AP.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_AP.Add(varclstype_AP);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'type_AP' avec la classe 'clstype_AP' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_AP;
        }

        public int insertClstype_AP(clstype_AP varclstype_AP)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO type_AP ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_AP.Id));
                    if (varclstype_AP.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_AP.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_AP.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_AP.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_AP.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_AP.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_AP.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_AP.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_AP.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_AP.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'type_AP' avec la classe 'clstype_AP' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstype_AP(clstype_AP varclstype_AP)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE type_AP  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclstype_AP.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_AP.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_AP.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_AP.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_AP.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_AP.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_AP.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_AP.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_AP.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_AP.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_AP.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'type_AP' avec la classe 'clstype_AP' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstype_AP(clstype_AP varclstype_AP)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM type_AP  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_AP.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'type_AP' avec la classe 'clstype_AP' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTYPE_AP 
        #region  CLSTYPE_SWITCH
        public clstype_switch getClstype_switch(object intid)
        {
            clstype_switch varclstype_switch = new clstype_switch();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM type_switch WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_switch.Id = int.Parse(dr["id"].ToString());
                            varclstype_switch.Designation = dr["designation"].ToString();
                            varclstype_switch.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_switch.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_switch.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_switch.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'type_switch' avec la classe 'clstype_switch' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstype_switch;
        }

        public List<clstype_switch> getAllClstype_switch(string criteria)
        {
            List<clstype_switch> lstclstype_switch = new List<clstype_switch>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_type_switch_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_switch varclstype_switch = null;
                        while (dr.Read())
                        {
                            varclstype_switch = new clstype_switch();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_switch.Id = int.Parse(dr["id"].ToString());
                            varclstype_switch.Designation = dr["designation"].ToString();
                            varclstype_switch.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_switch.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_switch.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_switch.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_switch.Add(varclstype_switch);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'type_switch' avec la classe 'clstype_switch' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_switch;
        }

        public List<clstype_switch> getAllClstype_switch()
        {
            List<clstype_switch> lstclstype_switch = new List<clstype_switch>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM type_switch ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_switch varclstype_switch = null;
                        while (dr.Read())
                        {
                            varclstype_switch = new clstype_switch();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_switch.Id = int.Parse(dr["id"].ToString());
                            varclstype_switch.Designation = dr["designation"].ToString();
                            varclstype_switch.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_switch.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_switch.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_switch.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_switch.Add(varclstype_switch);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'type_switch' avec la classe 'clstype_switch' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_switch;
        }

        public int insertClstype_switch(clstype_switch varclstype_switch)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO type_switch ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_switch.Id));
                    if (varclstype_switch.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_switch.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_switch.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_switch.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_switch.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_switch.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_switch.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_switch.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_switch.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_switch.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'type_switch' avec la classe 'clstype_switch' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstype_switch(clstype_switch varclstype_switch)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE type_switch  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclstype_switch.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_switch.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_switch.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_switch.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_switch.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_switch.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_switch.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_switch.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_switch.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_switch.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_switch.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'type_switch' avec la classe 'clstype_switch' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstype_switch(clstype_switch varclstype_switch)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM type_switch  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_switch.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'type_switch' avec la classe 'clstype_switch' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTYPE_SWITCH 
        #region  CLSTYPE_CLAVIER
        public clstype_clavier getClstype_clavier(object intid)
        {
            clstype_clavier varclstype_clavier = new clstype_clavier();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM type_clavier WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_clavier.Id = int.Parse(dr["id"].ToString());
                            varclstype_clavier.Designation = dr["designation"].ToString();
                            varclstype_clavier.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_clavier.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_clavier.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_clavier.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'type_clavier' avec la classe 'clstype_clavier' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstype_clavier;
        }

        public List<clstype_clavier> getAllClstype_clavier(string criteria)
        {
            List<clstype_clavier> lstclstype_clavier = new List<clstype_clavier>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_type_clavier_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_clavier varclstype_clavier = null;
                        while (dr.Read())
                        {
                            varclstype_clavier = new clstype_clavier();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_clavier.Id = int.Parse(dr["id"].ToString());
                            varclstype_clavier.Designation = dr["designation"].ToString();
                            varclstype_clavier.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_clavier.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_clavier.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_clavier.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_clavier.Add(varclstype_clavier);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'type_clavier' avec la classe 'clstype_clavier' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_clavier;
        }

        public List<clstype_clavier> getAllClstype_clavier()
        {
            List<clstype_clavier> lstclstype_clavier = new List<clstype_clavier>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM type_clavier ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_clavier varclstype_clavier = null;
                        while (dr.Read())
                        {
                            varclstype_clavier = new clstype_clavier();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_clavier.Id = int.Parse(dr["id"].ToString());
                            varclstype_clavier.Designation = dr["designation"].ToString();
                            varclstype_clavier.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_clavier.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_clavier.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_clavier.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_clavier.Add(varclstype_clavier);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'type_clavier' avec la classe 'clstype_clavier' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_clavier;
        }

        public int insertClstype_clavier(clstype_clavier varclstype_clavier)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO type_clavier ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_clavier.Id));
                    if (varclstype_clavier.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, varclstype_clavier.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, DBNull.Value));
                    if (varclstype_clavier.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_clavier.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_clavier.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_clavier.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_clavier.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_clavier.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_clavier.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_clavier.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'type_clavier' avec la classe 'clstype_clavier' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstype_clavier(clstype_clavier varclstype_clavier)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE type_clavier  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclstype_clavier.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, varclstype_clavier.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, DBNull.Value));
                    if (varclstype_clavier.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_clavier.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_clavier.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_clavier.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_clavier.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_clavier.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_clavier.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_clavier.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_clavier.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'type_clavier' avec la classe 'clstype_clavier' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstype_clavier(clstype_clavier varclstype_clavier)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM type_clavier  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_clavier.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'type_clavier' avec la classe 'clstype_clavier' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTYPE_CLAVIER 
        #region  CLSETAT_MATERIEL
        public clsetat_materiel getClsetat_materiel(object intid)
        {
            clsetat_materiel varclsetat_materiel = new clsetat_materiel();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM etat_materiel WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsetat_materiel.Id = int.Parse(dr["id"].ToString());
                            varclsetat_materiel.Designation = dr["designation"].ToString();
                            varclsetat_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsetat_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsetat_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsetat_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'etat_materiel' avec la classe 'clsetat_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsetat_materiel;
        }

        public List<clsetat_materiel> getAllClsetat_materiel(string criteria)
        {
            List<clsetat_materiel> lstclsetat_materiel = new List<clsetat_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_etat_materiel_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsetat_materiel varclsetat_materiel = null;
                        while (dr.Read())
                        {
                            varclsetat_materiel = new clsetat_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsetat_materiel.Id = int.Parse(dr["id"].ToString());
                            varclsetat_materiel.Designation = dr["designation"].ToString();
                            varclsetat_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsetat_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsetat_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsetat_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsetat_materiel.Add(varclsetat_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'etat_materiel' avec la classe 'clsetat_materiel' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsetat_materiel;
        }

        public List<clsetat_materiel> getAllClsetat_materiel()
        {
            List<clsetat_materiel> lstclsetat_materiel = new List<clsetat_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM etat_materiel ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsetat_materiel varclsetat_materiel = null;
                        while (dr.Read())
                        {
                            varclsetat_materiel = new clsetat_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsetat_materiel.Id = int.Parse(dr["id"].ToString());
                            varclsetat_materiel.Designation = dr["designation"].ToString();
                            varclsetat_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsetat_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsetat_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsetat_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsetat_materiel.Add(varclsetat_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'etat_materiel' avec la classe 'clsetat_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsetat_materiel;
        }

        public int insertClsetat_materiel(clsetat_materiel varclsetat_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO etat_materiel ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsetat_materiel.Id));
                    if (varclsetat_materiel.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsetat_materiel.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsetat_materiel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsetat_materiel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsetat_materiel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsetat_materiel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsetat_materiel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsetat_materiel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsetat_materiel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsetat_materiel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'etat_materiel' avec la classe 'clsetat_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsetat_materiel(clsetat_materiel varclsetat_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE etat_materiel  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsetat_materiel.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsetat_materiel.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsetat_materiel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsetat_materiel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsetat_materiel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsetat_materiel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsetat_materiel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsetat_materiel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsetat_materiel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsetat_materiel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsetat_materiel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'etat_materiel' avec la classe 'clsetat_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsetat_materiel(clsetat_materiel varclsetat_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM etat_materiel  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsetat_materiel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'etat_materiel' avec la classe 'clsetat_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSETAT_MATERIEL 
        #region  CLSTYPE_OS
        public clstype_OS getClstype_OS(object intid)
        {
            clstype_OS varclstype_OS = new clstype_OS();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM type_OS WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_OS.Id = int.Parse(dr["id"].ToString());
                            varclstype_OS.Designation = dr["designation"].ToString();
                            varclstype_OS.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_OS.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_OS.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_OS.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'type_OS' avec la classe 'clstype_OS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstype_OS;
        }

        public List<clstype_OS> getAllClstype_OS(string criteria)
        {
            List<clstype_OS> lstclstype_OS = new List<clstype_OS>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_type_OS_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_OS varclstype_OS = null;
                        while (dr.Read())
                        {
                            varclstype_OS = new clstype_OS();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_OS.Id = int.Parse(dr["id"].ToString());
                            varclstype_OS.Designation = dr["designation"].ToString();
                            varclstype_OS.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_OS.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_OS.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_OS.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_OS.Add(varclstype_OS);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'type_OS' avec la classe 'clstype_OS' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_OS;
        }

        public List<clstype_OS> getAllClstype_OS()
        {
            List<clstype_OS> lstclstype_OS = new List<clstype_OS>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM type_OS ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_OS varclstype_OS = null;
                        while (dr.Read())
                        {
                            varclstype_OS = new clstype_OS();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_OS.Id = int.Parse(dr["id"].ToString());
                            varclstype_OS.Designation = dr["designation"].ToString();
                            varclstype_OS.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_OS.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_OS.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_OS.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_OS.Add(varclstype_OS);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'type_OS' avec la classe 'clstype_OS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_OS;
        }

        public int insertClstype_OS(clstype_OS varclstype_OS)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO type_OS ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_OS.Id));
                    if (varclstype_OS.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclstype_OS.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    if (varclstype_OS.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_OS.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_OS.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_OS.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_OS.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_OS.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_OS.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_OS.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'type_OS' avec la classe 'clstype_OS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstype_OS(clstype_OS varclstype_OS)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE type_OS  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclstype_OS.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclstype_OS.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    if (varclstype_OS.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_OS.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_OS.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_OS.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_OS.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_OS.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_OS.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_OS.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_OS.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'type_OS' avec la classe 'clstype_OS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstype_OS(clstype_OS varclstype_OS)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM type_OS  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_OS.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'type_OS' avec la classe 'clstype_OS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTYPE_OS 
        #region  CLSARCHITECTURE_OS
        public clsarchitecture_OS getClsarchitecture_OS(object intid)
        {
            clsarchitecture_OS varclsarchitecture_OS = new clsarchitecture_OS();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM architecture_OS WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarchitecture_OS.Id = int.Parse(dr["id"].ToString());
                            varclsarchitecture_OS.Designation = dr["designation"].ToString();
                            varclsarchitecture_OS.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsarchitecture_OS.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsarchitecture_OS.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsarchitecture_OS.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'architecture_OS' avec la classe 'clsarchitecture_OS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsarchitecture_OS;
        }

        public List<clsarchitecture_OS> getAllClsarchitecture_OS(string criteria)
        {
            List<clsarchitecture_OS> lstclsarchitecture_OS = new List<clsarchitecture_OS>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_architecture_OS_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsarchitecture_OS varclsarchitecture_OS = null;
                        while (dr.Read())
                        {
                            varclsarchitecture_OS = new clsarchitecture_OS();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarchitecture_OS.Id = int.Parse(dr["id"].ToString());
                            varclsarchitecture_OS.Designation = dr["designation"].ToString();
                            varclsarchitecture_OS.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsarchitecture_OS.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsarchitecture_OS.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsarchitecture_OS.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsarchitecture_OS.Add(varclsarchitecture_OS);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'architecture_OS' avec la classe 'clsarchitecture_OS' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsarchitecture_OS;
        }

        public List<clsarchitecture_OS> getAllClsarchitecture_OS()
        {
            List<clsarchitecture_OS> lstclsarchitecture_OS = new List<clsarchitecture_OS>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM architecture_OS ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsarchitecture_OS varclsarchitecture_OS = null;
                        while (dr.Read())
                        {
                            varclsarchitecture_OS = new clsarchitecture_OS();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarchitecture_OS.Id = int.Parse(dr["id"].ToString());
                            varclsarchitecture_OS.Designation = dr["designation"].ToString();
                            varclsarchitecture_OS.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsarchitecture_OS.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsarchitecture_OS.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsarchitecture_OS.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsarchitecture_OS.Add(varclsarchitecture_OS);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'architecture_OS' avec la classe 'clsarchitecture_OS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsarchitecture_OS;
        }

        public int insertClsarchitecture_OS(clsarchitecture_OS varclsarchitecture_OS)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO architecture_OS ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsarchitecture_OS.Id));
                    if (varclsarchitecture_OS.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, varclsarchitecture_OS.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, DBNull.Value));
                    if (varclsarchitecture_OS.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsarchitecture_OS.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsarchitecture_OS.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsarchitecture_OS.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsarchitecture_OS.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsarchitecture_OS.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsarchitecture_OS.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsarchitecture_OS.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'architecture_OS' avec la classe 'clsarchitecture_OS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsarchitecture_OS(clsarchitecture_OS varclsarchitecture_OS)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE architecture_OS  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsarchitecture_OS.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, varclsarchitecture_OS.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, DBNull.Value));
                    if (varclsarchitecture_OS.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsarchitecture_OS.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsarchitecture_OS.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsarchitecture_OS.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsarchitecture_OS.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsarchitecture_OS.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsarchitecture_OS.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsarchitecture_OS.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsarchitecture_OS.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'architecture_OS' avec la classe 'clsarchitecture_OS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsarchitecture_OS(clsarchitecture_OS varclsarchitecture_OS)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM architecture_OS  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsarchitecture_OS.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'architecture_OS' avec la classe 'clsarchitecture_OS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSARCHITECTURE_OS 
        #region  CLSOS
        public clsOS getClsOS(object intid)
        {
            clsOS varclsOS = new clsOS();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = @"SELECT type_OS.designation + ' ' + OS.designation + ' ' + architecture_OS.designation AS designation,OS.*  FROM OS 
                    INNER JOIN architecture_OS ON architecture_OS.id = OS.id_architecture_OS
                    INNER JOIN type_OS ON type_OS.id = OS.id_type_OS WHERE OS.id=@id";

                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsOS.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_type_OS"].ToString().Trim().Equals("")) varclsOS.Id_type_os = int.Parse(dr["id_type_OS"].ToString());
                            if (!dr["id_architecture_OS"].ToString().Trim().Equals("")) varclsOS.Id_architecture_os = int.Parse(dr["id_architecture_OS"].ToString());
                            varclsOS.Designation = dr["designation"].ToString();
                            varclsOS.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsOS.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsOS.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsOS.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'OS' avec la classe 'clsOS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsOS;
        }

        public List<clsOS> getAllClsOS(string criteria)
        {
            List<clsOS> lstclsOS = new List<clsOS>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_OS_architecture_OS_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsOS varclsOS = null;
                        while (dr.Read())
                        {
                            varclsOS = new clsOS();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsOS.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_type_OS"].ToString().Trim().Equals("")) varclsOS.Id_type_os = int.Parse(dr["id_type_OS"].ToString());
                            if (!dr["id_architecture_OS"].ToString().Trim().Equals("")) varclsOS.Id_architecture_os = int.Parse(dr["id_architecture_OS"].ToString());
                            varclsOS.Designation = dr["designation"].ToString();
                            varclsOS.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsOS.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsOS.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsOS.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsOS.Add(varclsOS);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'OS' avec la classe 'clsOS' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsOS;
        }

        public List<clsOS> getAllClsOS()
        {
            List<clsOS> lstclsOS = new List<clsOS>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT type_OS.designation + ' ' + OS.designation + ' ' + architecture_OS.designation AS designation,OS.*  FROM OS 
                    INNER JOIN architecture_OS ON architecture_OS.id=OS.id_architecture_OS 
                    INNER JOIN type_OS ON type_OS.id=OS.id_type_OS ORDER BY OS.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsOS varclsOS = null;
                        while (dr.Read())
                        {
                            varclsOS = new clsOS();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsOS.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_type_OS"].ToString().Trim().Equals("")) varclsOS.Id_type_os = int.Parse(dr["id_type_OS"].ToString());
                            if (!dr["id_architecture_OS"].ToString().Trim().Equals("")) varclsOS.Id_architecture_os = int.Parse(dr["id_architecture_OS"].ToString());
                            varclsOS.Designation = dr["designation"].ToString();
                            varclsOS.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsOS.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsOS.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsOS.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsOS.Add(varclsOS);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'OS' avec la classe 'clsOS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsOS;
        }

        public int insertClsOS(clsOS varclsOS)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO OS ( id,id_type_OS,id_architecture_OS,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@id_type_OS,@id_architecture_OS,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsOS.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@id_type_OS", DbType.Int32, 4, varclsOS.Id_type_os));
                    cmd.Parameters.Add(getParameter(cmd, "@id_architecture_OS", DbType.Int32, 4, varclsOS.Id_architecture_os));
                    if (varclsOS.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsOS.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsOS.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsOS.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsOS.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsOS.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsOS.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsOS.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsOS.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsOS.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'OS' avec la classe 'clsOS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsOS(clsOS varclsOS)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE OS  SET id_type_OS=@id_type_OS,id_architecture_OS=@id_architecture_OS,designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_type_OS", DbType.Int32, 4, varclsOS.Id_type_os));
                    cmd.Parameters.Add(getParameter(cmd, "@id_architecture_OS", DbType.Int32, 4, varclsOS.Id_architecture_os));
                    if (varclsOS.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsOS.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsOS.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsOS.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsOS.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsOS.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsOS.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsOS.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsOS.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsOS.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsOS.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'OS' avec la classe 'clsOS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsOS(clsOS varclsOS)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM OS  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsOS.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'OS' avec la classe 'clsOS' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSOS 
        #region  CLSVERSION_IOS
        public clsversion_ios getClsversion_ios(object intid)
        {
            clsversion_ios varclsversion_ios = new clsversion_ios();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM version_ios WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsversion_ios.Id = int.Parse(dr["id"].ToString());
                            varclsversion_ios.Designation = dr["designation"].ToString();
                            varclsversion_ios.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsversion_ios.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsversion_ios.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsversion_ios.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'version_ios' avec la classe 'clsversion_ios' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsversion_ios;
        }

        public List<clsversion_ios> getAllClsversion_ios(string criteria)
        {
            List<clsversion_ios> lstclsversion_ios = new List<clsversion_ios>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_version_ios_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsversion_ios varclsversion_ios = null;
                        while (dr.Read())
                        {
                            varclsversion_ios = new clsversion_ios();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsversion_ios.Id = int.Parse(dr["id"].ToString());
                            varclsversion_ios.Designation = dr["designation"].ToString();
                            varclsversion_ios.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsversion_ios.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsversion_ios.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsversion_ios.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsversion_ios.Add(varclsversion_ios);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'version_ios' avec la classe 'clsversion_ios' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsversion_ios;
        }

        public List<clsversion_ios> getAllClsversion_ios()
        {
            List<clsversion_ios> lstclsversion_ios = new List<clsversion_ios>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM version_ios ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsversion_ios varclsversion_ios = null;
                        while (dr.Read())
                        {
                            varclsversion_ios = new clsversion_ios();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsversion_ios.Id = int.Parse(dr["id"].ToString());
                            varclsversion_ios.Designation = dr["designation"].ToString();
                            varclsversion_ios.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsversion_ios.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsversion_ios.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsversion_ios.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsversion_ios.Add(varclsversion_ios);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'version_ios' avec la classe 'clsversion_ios' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsversion_ios;
        }

        public int insertClsversion_ios(clsversion_ios varclsversion_ios)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO version_ios ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsversion_ios.Id));
                    if (varclsversion_ios.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, varclsversion_ios.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, DBNull.Value));
                    if (varclsversion_ios.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsversion_ios.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsversion_ios.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsversion_ios.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsversion_ios.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsversion_ios.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsversion_ios.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsversion_ios.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'version_ios' avec la classe 'clsversion_ios' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsversion_ios(clsversion_ios varclsversion_ios)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE version_ios  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsversion_ios.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, varclsversion_ios.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 10, DBNull.Value));
                    if (varclsversion_ios.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsversion_ios.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsversion_ios.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsversion_ios.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsversion_ios.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsversion_ios.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsversion_ios.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsversion_ios.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsversion_ios.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'version_ios' avec la classe 'clsversion_ios' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsversion_ios(clsversion_ios varclsversion_ios)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM version_ios  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsversion_ios.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'version_ios' avec la classe 'clsversion_ios' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSVERSION_IOS 
        #region  CLSNETETTE
        public clsnetette getClsnetette(object intid)
        {
            clsnetette varclsnetette = new clsnetette();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM netette WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsnetette.Id = int.Parse(dr["id"].ToString());
                            varclsnetette.Designation = dr["designation"].ToString();
                            varclsnetette.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsnetette.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsnetette.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsnetette.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'netette' avec la classe 'clsnetette' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsnetette;
        }

        public List<clsnetette> getAllClsnetette(string criteria)
        {
            List<clsnetette> lstclsnetette = new List<clsnetette>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_netette_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsnetette varclsnetette = null;
                        while (dr.Read())
                        {
                            varclsnetette = new clsnetette();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsnetette.Id = int.Parse(dr["id"].ToString());
                            varclsnetette.Designation = dr["designation"].ToString();
                            varclsnetette.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsnetette.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsnetette.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsnetette.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsnetette.Add(varclsnetette);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'netette' avec la classe 'clsnetette' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsnetette;
        }

        public List<clsnetette> getAllClsnetette()
        {
            List<clsnetette> lstclsnetette = new List<clsnetette>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM netette ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsnetette varclsnetette = null;
                        while (dr.Read())
                        {
                            varclsnetette = new clsnetette();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsnetette.Id = int.Parse(dr["id"].ToString());
                            varclsnetette.Designation = dr["designation"].ToString();
                            varclsnetette.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsnetette.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsnetette.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsnetette.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsnetette.Add(varclsnetette);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'netette' avec la classe 'clsnetette' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsnetette;
        }

        public int insertClsnetette(clsnetette varclsnetette)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO netette ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsnetette.Id));
                    if (varclsnetette.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsnetette.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    if (varclsnetette.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsnetette.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsnetette.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsnetette.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsnetette.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsnetette.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsnetette.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsnetette.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'netette' avec la classe 'clsnetette' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsnetette(clsnetette varclsnetette)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE netette  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsnetette.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsnetette.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    if (varclsnetette.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsnetette.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsnetette.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsnetette.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsnetette.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsnetette.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsnetette.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsnetette.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsnetette.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'netette' avec la classe 'clsnetette' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsnetette(clsnetette varclsnetette)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM netette  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsnetette.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'netette' avec la classe 'clsnetette' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSNETETTE 
        #region  CLSGARANTIE
        public clsgarantie getClsgarantie(object intid)
        {
            clsgarantie varclsgarantie = new clsgarantie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM garantie WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgarantie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsgarantie.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsgarantie.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgarantie.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgarantie.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgarantie.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'garantie' avec la classe 'clsgarantie' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsgarantie;
        }

        public List<clsgarantie> getAllClsgarantie(string criteria)
        {
            List<clsgarantie> lstclsgarantie = new List<clsgarantie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_garantie_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgarantie varclsgarantie = null;
                        while (dr.Read())
                        {
                            varclsgarantie = new clsgarantie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgarantie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsgarantie.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsgarantie.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgarantie.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgarantie.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgarantie.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsgarantie.Add(varclsgarantie);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'garantie' avec la classe 'clsgarantie' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsgarantie;
        }

        public List<clsgarantie> getAllClsgarantie()
        {
            List<clsgarantie> lstclsgarantie = new List<clsgarantie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM garantie ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgarantie varclsgarantie = null;
                        while (dr.Read())
                        {
                            varclsgarantie = new clsgarantie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgarantie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsgarantie.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsgarantie.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgarantie.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgarantie.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgarantie.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsgarantie.Add(varclsgarantie);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'garantie' avec la classe 'clsgarantie' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsgarantie;
        }

        public int insertClsgarantie(clsgarantie varclsgarantie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO garantie ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgarantie.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsgarantie.Valeur));
                    if (varclsgarantie.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsgarantie.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsgarantie.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsgarantie.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsgarantie.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsgarantie.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsgarantie.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsgarantie.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'garantie' avec la classe 'clsgarantie' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsgarantie(clsgarantie varclsgarantie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE garantie  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsgarantie.Valeur));
                    if (varclsgarantie.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsgarantie.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsgarantie.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsgarantie.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsgarantie.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsgarantie.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsgarantie.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsgarantie.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgarantie.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'garantie' avec la classe 'clsgarantie' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsgarantie(clsgarantie varclsgarantie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM garantie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgarantie.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'garantie' avec la classe 'clsgarantie' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSGARANTIE 
        #region  CLSRAM
        public clsram getClsram(object intid)
        {
            clsram varclsram = new clsram();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM ram WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsram.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsram.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsram.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsram.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsram.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsram.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'ram' avec la classe 'clsram' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsram;
        }

        public List<clsram> getAllClsram(string criteria)
        {
            List<clsram> lstclsram = new List<clsram>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_ram_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsram varclsram = null;
                        while (dr.Read())
                        {
                            varclsram = new clsram();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsram.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsram.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsram.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsram.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsram.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsram.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsram.Add(varclsram);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'ram' avec la classe 'clsram' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsram;
        }

        public List<clsram> getAllClsram()
        {
            List<clsram> lstclsram = new List<clsram>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM ram ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsram varclsram = null;
                        while (dr.Read())
                        {
                            varclsram = new clsram();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsram.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsram.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsram.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsram.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsram.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsram.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsram.Add(varclsram);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'ram' avec la classe 'clsram' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsram;
        }

        public int insertClsram(clsram varclsram)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO ram ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsram.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclsram.Valeur));
                    if (varclsram.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsram.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsram.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsram.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsram.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsram.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsram.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsram.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'ram' avec la classe 'clsram' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsram(clsram varclsram)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE ram  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclsram.Valeur));
                    if (varclsram.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsram.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsram.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsram.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsram.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsram.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsram.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsram.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsram.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'ram' avec la classe 'clsram' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsram(clsram varclsram)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM ram  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsram.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'ram' avec la classe 'clsram' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSRAM 
        #region  CLSPROCESSEUR
        public clsprocesseur getClsprocesseur(object intid)
        {
            clsprocesseur varclsprocesseur = new clsprocesseur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM processeur WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprocesseur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsprocesseur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsprocesseur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsprocesseur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsprocesseur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsprocesseur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'processeur' avec la classe 'clsprocesseur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsprocesseur;
        }

        public List<clsprocesseur> getAllClsprocesseur(string criteria)
        {
            List<clsprocesseur> lstclsprocesseur = new List<clsprocesseur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_processeur_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsprocesseur varclsprocesseur = null;
                        while (dr.Read())
                        {
                            varclsprocesseur = new clsprocesseur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprocesseur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsprocesseur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsprocesseur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsprocesseur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsprocesseur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsprocesseur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsprocesseur.Add(varclsprocesseur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'processeur' avec la classe 'clsprocesseur' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsprocesseur;
        }

        public List<clsprocesseur> getAllClsprocesseur()
        {
            List<clsprocesseur> lstclsprocesseur = new List<clsprocesseur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM processeur ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsprocesseur varclsprocesseur = null;
                        while (dr.Read())
                        {
                            varclsprocesseur = new clsprocesseur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprocesseur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsprocesseur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsprocesseur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsprocesseur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsprocesseur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsprocesseur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsprocesseur.Add(varclsprocesseur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'processeur' avec la classe 'clsprocesseur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsprocesseur;
        }

        public int insertClsprocesseur(clsprocesseur varclsprocesseur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO processeur ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsprocesseur.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclsprocesseur.Valeur));
                    if (varclsprocesseur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsprocesseur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsprocesseur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsprocesseur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsprocesseur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsprocesseur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsprocesseur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsprocesseur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'processeur' avec la classe 'clsprocesseur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsprocesseur(clsprocesseur varclsprocesseur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE processeur  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclsprocesseur.Valeur));
                    if (varclsprocesseur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsprocesseur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsprocesseur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsprocesseur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsprocesseur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsprocesseur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsprocesseur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsprocesseur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsprocesseur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'processeur' avec la classe 'clsprocesseur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsprocesseur(clsprocesseur varclsprocesseur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM processeur  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsprocesseur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'processeur' avec la classe 'clsprocesseur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSPROCESSEUR 
        #region  CLSNOMBRE_COEUR_PROCESSEUR
        public clsnombre_coeur_processeur getClsnombre_coeur_processeur(object intid)
        {
            clsnombre_coeur_processeur varclsnombre_coeur_processeur = new clsnombre_coeur_processeur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM nombre_coeur_processeur WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsnombre_coeur_processeur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsnombre_coeur_processeur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'nombre_coeur_processeur' avec la classe 'clsnombre_coeur_processeur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsnombre_coeur_processeur;
        }

        public List<clsnombre_coeur_processeur> getAllClsnombre_coeur_processeur(string criteria)
        {
            List<clsnombre_coeur_processeur> lstclsnombre_coeur_processeur = new List<clsnombre_coeur_processeur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_nombre_coeur_processeur_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsnombre_coeur_processeur varclsnombre_coeur_processeur = null;
                        while (dr.Read())
                        {
                            varclsnombre_coeur_processeur = new clsnombre_coeur_processeur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsnombre_coeur_processeur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsnombre_coeur_processeur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsnombre_coeur_processeur.Add(varclsnombre_coeur_processeur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'nombre_coeur_processeur' avec la classe 'clsnombre_coeur_processeur' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsnombre_coeur_processeur;
        }

        public List<clsnombre_coeur_processeur> getAllClsnombre_coeur_processeur()
        {
            List<clsnombre_coeur_processeur> lstclsnombre_coeur_processeur = new List<clsnombre_coeur_processeur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM nombre_coeur_processeur ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsnombre_coeur_processeur varclsnombre_coeur_processeur = null;
                        while (dr.Read())
                        {
                            varclsnombre_coeur_processeur = new clsnombre_coeur_processeur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsnombre_coeur_processeur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsnombre_coeur_processeur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsnombre_coeur_processeur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsnombre_coeur_processeur.Add(varclsnombre_coeur_processeur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'nombre_coeur_processeur' avec la classe 'clsnombre_coeur_processeur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsnombre_coeur_processeur;
        }

        public int insertClsnombre_coeur_processeur(clsnombre_coeur_processeur varclsnombre_coeur_processeur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO nombre_coeur_processeur ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsnombre_coeur_processeur.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsnombre_coeur_processeur.Valeur));
                    if (varclsnombre_coeur_processeur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsnombre_coeur_processeur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsnombre_coeur_processeur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsnombre_coeur_processeur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsnombre_coeur_processeur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsnombre_coeur_processeur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsnombre_coeur_processeur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsnombre_coeur_processeur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'nombre_coeur_processeur' avec la classe 'clsnombre_coeur_processeur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsnombre_coeur_processeur(clsnombre_coeur_processeur varclsnombre_coeur_processeur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE nombre_coeur_processeur  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsnombre_coeur_processeur.Valeur));
                    if (varclsnombre_coeur_processeur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsnombre_coeur_processeur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsnombre_coeur_processeur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsnombre_coeur_processeur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsnombre_coeur_processeur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsnombre_coeur_processeur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsnombre_coeur_processeur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsnombre_coeur_processeur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsnombre_coeur_processeur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'nombre_coeur_processeur' avec la classe 'clsnombre_coeur_processeur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsnombre_coeur_processeur(clsnombre_coeur_processeur varclsnombre_coeur_processeur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM nombre_coeur_processeur  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsnombre_coeur_processeur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'nombre_coeur_processeur' avec la classe 'clsnombre_coeur_processeur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSNOMBRE_COEUR_PROCESSEUR 
        #region  CLSTYPE_HDD
        public clstype_hdd getClstype_hdd(object intid)
        {
            clstype_hdd varclstype_hdd = new clstype_hdd();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM type_hdd WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_hdd.Id = int.Parse(dr["id"].ToString());
                            varclstype_hdd.Designation = dr["designation"].ToString();
                            varclstype_hdd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_hdd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_hdd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_hdd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'type_hdd' avec la classe 'clstype_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstype_hdd;
        }

        public List<clstype_hdd> getAllClstype_hdd(string criteria)
        {
            List<clstype_hdd> lstclstype_hdd = new List<clstype_hdd>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_type_hdd_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_hdd varclstype_hdd = null;
                        while (dr.Read())
                        {
                            varclstype_hdd = new clstype_hdd();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_hdd.Id = int.Parse(dr["id"].ToString());
                            varclstype_hdd.Designation = dr["designation"].ToString();
                            varclstype_hdd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_hdd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_hdd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_hdd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_hdd.Add(varclstype_hdd);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'type_hdd' avec la classe 'clstype_hdd' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_hdd;
        }

        public List<clstype_hdd> getAllClstype_hdd()
        {
            List<clstype_hdd> lstclstype_hdd = new List<clstype_hdd>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM type_hdd ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_hdd varclstype_hdd = null;
                        while (dr.Read())
                        {
                            varclstype_hdd = new clstype_hdd();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_hdd.Id = int.Parse(dr["id"].ToString());
                            varclstype_hdd.Designation = dr["designation"].ToString();
                            varclstype_hdd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_hdd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_hdd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_hdd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_hdd.Add(varclstype_hdd);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'type_hdd' avec la classe 'clstype_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_hdd;
        }

        public int insertClstype_hdd(clstype_hdd varclstype_hdd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO type_hdd ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_hdd.Id));
                    if (varclstype_hdd.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_hdd.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_hdd.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_hdd.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_hdd.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_hdd.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_hdd.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_hdd.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_hdd.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_hdd.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'type_hdd' avec la classe 'clstype_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstype_hdd(clstype_hdd varclstype_hdd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE type_hdd  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclstype_hdd.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_hdd.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_hdd.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_hdd.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_hdd.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_hdd.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_hdd.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_hdd.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_hdd.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_hdd.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_hdd.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'type_hdd' avec la classe 'clstype_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstype_hdd(clstype_hdd varclstype_hdd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM type_hdd  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_hdd.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'type_hdd' avec la classe 'clstype_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTYPE_HDD 
        #region  CLSNOMBRE_HDD
        public clsnombre_hdd getClsnombre_hdd(object intid)
        {
            clsnombre_hdd varclsnombre_hdd = new clsnombre_hdd();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM nombre_hdd WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsnombre_hdd.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsnombre_hdd.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsnombre_hdd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsnombre_hdd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsnombre_hdd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsnombre_hdd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'nombre_hdd' avec la classe 'clsnombre_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsnombre_hdd;
        }

        public List<clsnombre_hdd> getAllClsnombre_hdd(string criteria)
        {
            List<clsnombre_hdd> lstclsnombre_hdd = new List<clsnombre_hdd>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_nombre_hdd_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsnombre_hdd varclsnombre_hdd = null;
                        while (dr.Read())
                        {
                            varclsnombre_hdd = new clsnombre_hdd();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsnombre_hdd.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsnombre_hdd.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsnombre_hdd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsnombre_hdd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsnombre_hdd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsnombre_hdd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsnombre_hdd.Add(varclsnombre_hdd);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'nombre_hdd' avec la classe 'clsnombre_hdd' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsnombre_hdd;
        }

        public List<clsnombre_hdd> getAllClsnombre_hdd()
        {
            List<clsnombre_hdd> lstclsnombre_hdd = new List<clsnombre_hdd>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM nombre_hdd ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsnombre_hdd varclsnombre_hdd = null;
                        while (dr.Read())
                        {
                            varclsnombre_hdd = new clsnombre_hdd();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsnombre_hdd.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsnombre_hdd.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsnombre_hdd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsnombre_hdd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsnombre_hdd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsnombre_hdd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsnombre_hdd.Add(varclsnombre_hdd);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'nombre_hdd' avec la classe 'clsnombre_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsnombre_hdd;
        }

        public int insertClsnombre_hdd(clsnombre_hdd varclsnombre_hdd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO nombre_hdd ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsnombre_hdd.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsnombre_hdd.Valeur));
                    if (varclsnombre_hdd.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsnombre_hdd.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsnombre_hdd.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsnombre_hdd.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsnombre_hdd.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsnombre_hdd.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsnombre_hdd.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsnombre_hdd.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'nombre_hdd' avec la classe 'clsnombre_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsnombre_hdd(clsnombre_hdd varclsnombre_hdd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE nombre_hdd  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsnombre_hdd.Valeur));
                    if (varclsnombre_hdd.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsnombre_hdd.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsnombre_hdd.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsnombre_hdd.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsnombre_hdd.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsnombre_hdd.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsnombre_hdd.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsnombre_hdd.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsnombre_hdd.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'nombre_hdd' avec la classe 'clsnombre_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsnombre_hdd(clsnombre_hdd varclsnombre_hdd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM nombre_hdd  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsnombre_hdd.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'nombre_hdd' avec la classe 'clsnombre_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSNOMBRE_HDD 
        #region  CLSCAPACITE_HDD
        public clscapacite_hdd getClscapacite_hdd(object intid)
        {
            clscapacite_hdd varclscapacite_hdd = new clscapacite_hdd();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM capacite_hdd WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclscapacite_hdd.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclscapacite_hdd.Valeur = int.Parse(dr["valeur"].ToString());
                            varclscapacite_hdd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscapacite_hdd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscapacite_hdd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscapacite_hdd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'capacite_hdd' avec la classe 'clscapacite_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclscapacite_hdd;
        }

        public List<clscapacite_hdd> getAllClscapacite_hdd(string criteria)
        {
            List<clscapacite_hdd> lstclscapacite_hdd = new List<clscapacite_hdd>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_capacite_hdd_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clscapacite_hdd varclscapacite_hdd = null;
                        while (dr.Read())
                        {
                            varclscapacite_hdd = new clscapacite_hdd();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscapacite_hdd.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclscapacite_hdd.Valeur = int.Parse(dr["valeur"].ToString());
                            varclscapacite_hdd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscapacite_hdd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscapacite_hdd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscapacite_hdd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclscapacite_hdd.Add(varclscapacite_hdd);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'capacite_hdd' avec la classe 'clscapacite_hdd' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclscapacite_hdd;
        }

        public List<clscapacite_hdd> getAllClscapacite_hdd()
        {
            List<clscapacite_hdd> lstclscapacite_hdd = new List<clscapacite_hdd>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM capacite_hdd ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clscapacite_hdd varclscapacite_hdd = null;
                        while (dr.Read())
                        {
                            varclscapacite_hdd = new clscapacite_hdd();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscapacite_hdd.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclscapacite_hdd.Valeur = int.Parse(dr["valeur"].ToString());
                            varclscapacite_hdd.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscapacite_hdd.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscapacite_hdd.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscapacite_hdd.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclscapacite_hdd.Add(varclscapacite_hdd);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'capacite_hdd' avec la classe 'clscapacite_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclscapacite_hdd;
        }

        public int insertClscapacite_hdd(clscapacite_hdd varclscapacite_hdd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO capacite_hdd ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscapacite_hdd.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclscapacite_hdd.Valeur));
                    if (varclscapacite_hdd.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclscapacite_hdd.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclscapacite_hdd.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclscapacite_hdd.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclscapacite_hdd.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclscapacite_hdd.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclscapacite_hdd.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclscapacite_hdd.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'capacite_hdd' avec la classe 'clscapacite_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClscapacite_hdd(clscapacite_hdd varclscapacite_hdd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE capacite_hdd  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclscapacite_hdd.Valeur));
                    if (varclscapacite_hdd.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclscapacite_hdd.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclscapacite_hdd.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclscapacite_hdd.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclscapacite_hdd.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclscapacite_hdd.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclscapacite_hdd.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclscapacite_hdd.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscapacite_hdd.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'capacite_hdd' avec la classe 'clscapacite_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClscapacite_hdd(clscapacite_hdd varclscapacite_hdd)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM capacite_hdd  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscapacite_hdd.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'capacite_hdd' avec la classe 'clscapacite_hdd' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSCAPACITE_HDD 
        #region  CLSTAILLE_ECRAN
        public clstaille_ecran getClstaille_ecran(object intid)
        {
            clstaille_ecran varclstaille_ecran = new clstaille_ecran();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM taille_ecran WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstaille_ecran.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstaille_ecran.Valeur = int.Parse(dr["valeur"].ToString());
                            varclstaille_ecran.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstaille_ecran.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstaille_ecran.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstaille_ecran.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'taille_ecran' avec la classe 'clstaille_ecran' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstaille_ecran;
        }

        public List<clstaille_ecran> getAllClstaille_ecran(string criteria)
        {
            List<clstaille_ecran> lstclstaille_ecran = new List<clstaille_ecran>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_taille_ecran_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstaille_ecran varclstaille_ecran = null;
                        while (dr.Read())
                        {
                            varclstaille_ecran = new clstaille_ecran();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstaille_ecran.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstaille_ecran.Valeur = int.Parse(dr["valeur"].ToString());
                            varclstaille_ecran.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstaille_ecran.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstaille_ecran.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstaille_ecran.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstaille_ecran.Add(varclstaille_ecran);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'taille_ecran' avec la classe 'clstaille_ecran' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstaille_ecran;
        }

        public List<clstaille_ecran> getAllClstaille_ecran()
        {
            List<clstaille_ecran> lstclstaille_ecran = new List<clstaille_ecran>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM taille_ecran ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstaille_ecran varclstaille_ecran = null;
                        while (dr.Read())
                        {
                            varclstaille_ecran = new clstaille_ecran();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstaille_ecran.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstaille_ecran.Valeur = int.Parse(dr["valeur"].ToString());
                            varclstaille_ecran.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstaille_ecran.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstaille_ecran.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstaille_ecran.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstaille_ecran.Add(varclstaille_ecran);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'taille_ecran' avec la classe 'clstaille_ecran' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstaille_ecran;
        }

        public int insertClstaille_ecran(clstaille_ecran varclstaille_ecran)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO taille_ecran ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstaille_ecran.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclstaille_ecran.Valeur));
                    if (varclstaille_ecran.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstaille_ecran.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstaille_ecran.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstaille_ecran.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstaille_ecran.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstaille_ecran.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstaille_ecran.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstaille_ecran.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'taille_ecran' avec la classe 'clstaille_ecran' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstaille_ecran(clstaille_ecran varclstaille_ecran)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE taille_ecran  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclstaille_ecran.Valeur));
                    if (varclstaille_ecran.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstaille_ecran.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstaille_ecran.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstaille_ecran.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstaille_ecran.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstaille_ecran.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstaille_ecran.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstaille_ecran.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstaille_ecran.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'taille_ecran' avec la classe 'clstaille_ecran' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstaille_ecran(clstaille_ecran varclstaille_ecran)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM taille_ecran  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstaille_ecran.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'taille_ecran' avec la classe 'clstaille_ecran' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTAILLE_ECRAN 
        #region  CLSMATERIEL
        public string CalculateEndGuarany(int? dureeGuaraty, DateTime date_acquisition)
        {
            string str = "Durée de vie indeterminée";
            if (dureeGuaraty.HasValue)
            {
                double duree_annee_estime_garantie = (double)dureeGuaraty;
                TimeSpan ts = DateTime.Today - date_acquisition;
                double duree_annee = (double)ts.Days / 365;
                double annee_restantes = duree_annee_estime_garantie - duree_annee;

                if (annee_restantes < 0)
                {
                    //Equipement obsolete
                    if ((annee_restantes - (int)annee_restantes) < 0)
                    {
                        //Valeur decimale
                        annee_restantes = Math.Abs(annee_restantes);
                        int temps_annee = (int)(annee_restantes);
                        double temps_mois = (annee_restantes - temps_annee) * 12;

                        if ((temps_mois - (int)temps_mois) > 0)
                        {
                            double temps_jours = (temps_mois - (int)temps_mois) * 30;
                            str = string.Format("Durée dépassée d'environs {0} ans, {1} mois et {2} jours", temps_annee, (int)temps_mois, (int)temps_jours);
                        }
                        else
                        {
                            str = string.Format("Durée dépassée d'environs {0} ans et {1} mois", temps_annee, (int)temps_mois);
                        }
                    }
                    else
                    {
                        //Valeur entiere
                        str = string.Format("Durée dépassée d'environs {0} ans", annee_restantes);
                    }
                }
                else if (annee_restantes > 0)
                {
                    //Equipement non obsolete
                    if ((annee_restantes - (int)annee_restantes) > 0)
                    {
                        //Valeur decimale
                        int temps_annee = (int)annee_restantes;
                        double temps_mois = (annee_restantes - temps_annee) * 12;

                        if ((temps_mois - (int)temps_mois) > 0)
                        {
                            double temps_jours = (temps_mois - (int)temps_mois) * 30;
                            str = string.Format("Durée d'environs {0} ans, {1} mois et {2} jours", temps_annee, (int)temps_mois, (int)temps_jours);
                        }
                        else
                        {
                            str = string.Format("Durée d'environs {0} ans et {1} mois", temps_annee, (int)temps_mois);
                        }
                    }
                    else
                    {
                        //Valeur entiere
                        str = string.Format("Durée d'environs {0} ans", annee_restantes);
                    }
                }
            }
            else
                return str;
            return str;
        }

        public string GenerateLabelMateriel(int id_materiel, string initial)
        {
            if (id_materiel < 10 && id_materiel > 0)
                return string.Format("{0}-00{1}", initial, id_materiel);
            else if (id_materiel < 99 && id_materiel > 10)
                return string.Format("{0}-0{1}", initial, id_materiel);
            else
                return string.Format("{0}-{1}", initial, id_materiel);
        }

        public clsmateriel getClsmateriel(object intid)
        {
            clsmateriel varclsmateriel = new clsmateriel();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM materiel WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel(string criteria)
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_materiel_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel ORDER BY id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_Ordinateur()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel INNER JOIN categorie_materiel ON categorie_materiel.id=materiel.id_categorie_materiel WHERE categorie_materiel.id=1 ORDER BY materiel.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_Switch()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel INNER JOIN categorie_materiel ON categorie_materiel.id=materiel.id_categorie_materiel WHERE categorie_materiel.id=2 ORDER BY materiel.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_Imprimante()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel INNER JOIN categorie_materiel ON categorie_materiel.id=materiel.id_categorie_materiel WHERE categorie_materiel.id=3 ORDER BY materiel.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_Emetteur()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel INNER JOIN categorie_materiel ON categorie_materiel.id=materiel.id_categorie_materiel WHERE categorie_materiel.id=4 ORDER BY materiel.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_Amplificateur()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel INNER JOIN categorie_materiel ON categorie_materiel.id=materiel.id_categorie_materiel WHERE categorie_materiel.id=5 ORDER BY materiel.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_Retroprojecteur()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel INNER JOIN categorie_materiel ON categorie_materiel.id=materiel.id_categorie_materiel WHERE categorie_materiel.id=6 ORDER BY materiel.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_Routeur_AP()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel INNER JOIN categorie_materiel ON categorie_materiel.id=materiel.id_categorie_materiel WHERE categorie_materiel.id=7 ORDER BY materiel.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_AP()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel INNER JOIN categorie_materiel ON categorie_materiel.id=materiel.id_categorie_materiel WHERE categorie_materiel.id=8 ORDER BY materiel.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_Autre()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel INNER JOIN categorie_materiel ON categorie_materiel.id=materiel.id_categorie_materiel WHERE categorie_materiel.id=9 ORDER BY materiel.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_MAC1()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel where mac_adresse1 is not null");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        public List<clsmateriel> getAllClsmateriel_MAC2()
        {
            List<clsmateriel> lstclsmateriel = new List<clsmateriel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM materiel where mac_adresse2 is not null");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmateriel varclsmateriel = null;
                        while (dr.Read())
                        {
                            varclsmateriel = new clsmateriel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmateriel.Id = int.Parse(dr["id"].ToString());
                            varclsmateriel.Code_str = dr["code_str"].ToString();
                            if (!dr["id_categorie_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_categorie_materiel = int.Parse(dr["id_categorie_materiel"].ToString());
                            if (!dr["id_compte"].ToString().Trim().Equals("")) varclsmateriel.Id_compte = int.Parse(dr["id_compte"].ToString());
                            if (!dr["qrcode"].ToString().Trim().Equals("")) varclsmateriel.Qrcode = (Byte[])dr["qrcode"];
                            if (!dr["date_acquisition"].ToString().Trim().Equals("")) varclsmateriel.Date_acquisition = DateTime.Parse(dr["date_acquisition"].ToString());
                            if (!dr["id_garantie"].ToString().Trim().Equals("")) varclsmateriel.Id_garantie = int.Parse(dr["id_garantie"].ToString());
                            if (!dr["id_marque"].ToString().Trim().Equals("")) varclsmateriel.Id_marque = int.Parse(dr["id_marque"].ToString());
                            if (!dr["id_modele"].ToString().Trim().Equals("")) varclsmateriel.Id_modele = int.Parse(dr["id_modele"].ToString());
                            if (!dr["id_couleur"].ToString().Trim().Equals("")) varclsmateriel.Id_couleur = int.Parse(dr["id_couleur"].ToString());
                            if (!dr["id_poids"].ToString().Trim().Equals("")) varclsmateriel.Id_poids = int.Parse(dr["id_poids"].ToString());
                            if (!dr["id_etat_materiel"].ToString().Trim().Equals("")) varclsmateriel.Id_etat_materiel = int.Parse(dr["id_etat_materiel"].ToString());
                            if (!dr["photo1"].ToString().Trim().Equals("")) varclsmateriel.Photo1 = (Byte[])dr["photo1"];
                            if (!dr["photo2"].ToString().Trim().Equals("")) varclsmateriel.Photo2 = (Byte[])dr["photo2"];
                            if (!dr["photo3"].ToString().Trim().Equals("")) varclsmateriel.Photo3 = (Byte[])dr["photo3"];
                            varclsmateriel.Label = dr["label"].ToString();
                            varclsmateriel.Mac_adresse1 = dr["mac_adresse1"].ToString();
                            varclsmateriel.Mac_adresse2 = dr["mac_adresse2"].ToString();
                            varclsmateriel.Commentaire = dr["commentaire"].ToString();
                            varclsmateriel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmateriel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmateriel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmateriel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            if (!dr["archiver"].ToString().Trim().Equals("")) varclsmateriel.Archiver = bool.Parse(dr["archiver"].ToString());
                            if (!dr["id_type_ordinateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ordinateur = int.Parse(dr["id_type_ordinateur"].ToString());
                            if (!dr["id_type_clavier"].ToString().Trim().Equals("")) varclsmateriel.Id_type_clavier = int.Parse(dr["id_type_clavier"].ToString());
                            if (!dr["id_OS"].ToString().Trim().Equals("")) varclsmateriel.Id_os = int.Parse(dr["id_OS"].ToString());
                            if (!dr["id_ram"].ToString().Trim().Equals("")) varclsmateriel.Id_ram = int.Parse(dr["id_ram"].ToString());
                            if (!dr["id_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_processeur = int.Parse(dr["id_processeur"].ToString());
                            if (!dr["id_nombre_coeur_processeur"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_coeur_processeur = int.Parse(dr["id_nombre_coeur_processeur"].ToString());
                            if (!dr["id_type_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_type_hdd = int.Parse(dr["id_type_hdd"].ToString());
                            if (!dr["id_nombre_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_nombre_hdd = int.Parse(dr["id_nombre_hdd"].ToString());
                            if (!dr["id_capacite_hdd"].ToString().Trim().Equals("")) varclsmateriel.Id_capacite_hdd = int.Parse(dr["id_capacite_hdd"].ToString());
                            if (!dr["id_taille_ecran"].ToString().Trim().Equals("")) varclsmateriel.Id_taille_ecran = int.Parse(dr["id_taille_ecran"].ToString());
                            if (!dr["id_usb2"].ToString().Trim().Equals("")) varclsmateriel.Id_usb2 = int.Parse(dr["id_usb2"].ToString());
                            if (!dr["id_usb3"].ToString().Trim().Equals("")) varclsmateriel.Id_usb3 = int.Parse(dr["id_usb3"].ToString());
                            if (!dr["id_hdmi"].ToString().Trim().Equals("")) varclsmateriel.Id_hdmi = int.Parse(dr["id_hdmi"].ToString());
                            if (!dr["id_vga"].ToString().Trim().Equals("")) varclsmateriel.Id_vga = int.Parse(dr["id_vga"].ToString());
                            if (!dr["id_tension_batterie"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_batterie = int.Parse(dr["id_tension_batterie"].ToString());
                            if (!dr["id_tension_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_adaptateur = int.Parse(dr["id_tension_adaptateur"].ToString());
                            if (!dr["id_puissance_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance_adaptateur = int.Parse(dr["id_puissance_adaptateur"].ToString());
                            if (!dr["id_intensite_adaptateur"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite_adaptateur = int.Parse(dr["id_intensite_adaptateur"].ToString());
                            if (!dr["numero_cle"].ToString().Trim().Equals("")) varclsmateriel.Numero_cle = int.Parse(dr["numero_cle"].ToString());
                            if (!dr["id_type_imprimante"].ToString().Trim().Equals("")) varclsmateriel.Id_type_imprimante = int.Parse(dr["id_type_imprimante"].ToString());
                            if (!dr["id_puissance"].ToString().Trim().Equals("")) varclsmateriel.Id_puissance = int.Parse(dr["id_puissance"].ToString());
                            if (!dr["id_intensite"].ToString().Trim().Equals("")) varclsmateriel.Id_intensite = int.Parse(dr["id_intensite"].ToString());
                            if (!dr["id_page_par_minute"].ToString().Trim().Equals("")) varclsmateriel.Id_page_par_minute = int.Parse(dr["id_page_par_minute"].ToString());
                            if (!dr["id_type_amplificateur"].ToString().Trim().Equals("")) varclsmateriel.Id_type_amplificateur = int.Parse(dr["id_type_amplificateur"].ToString());
                            if (!dr["id_tension_alimentation"].ToString().Trim().Equals("")) varclsmateriel.Id_tension_alimentation = int.Parse(dr["id_tension_alimentation"].ToString());
                            if (!dr["id_usb"].ToString().Trim().Equals("")) varclsmateriel.Id_usb = int.Parse(dr["id_usb"].ToString());
                            if (!dr["id_memoire"].ToString().Trim().Equals("")) varclsmateriel.Id_memoire = int.Parse(dr["id_memoire"].ToString());
                            if (!dr["id_sorties_audio"].ToString().Trim().Equals("")) varclsmateriel.Id_sorties_audio = int.Parse(dr["id_sorties_audio"].ToString());
                            if (!dr["id_microphone"].ToString().Trim().Equals("")) varclsmateriel.Id_microphone = int.Parse(dr["id_microphone"].ToString());
                            if (!dr["id_gain"].ToString().Trim().Equals("")) varclsmateriel.Id_gain = int.Parse(dr["id_gain"].ToString());
                            if (!dr["id_type_routeur_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_routeur_ap = int.Parse(dr["id_type_routeur_AP"].ToString());
                            if (!dr["id_version_ios"].ToString().Trim().Equals("")) varclsmateriel.Id_version_ios = int.Parse(dr["id_version_ios"].ToString());
                            if (!dr["id_gbe"].ToString().Trim().Equals("")) varclsmateriel.Id_gbe = int.Parse(dr["id_gbe"].ToString());
                            if (!dr["id_fe"].ToString().Trim().Equals("")) varclsmateriel.Id_fe = int.Parse(dr["id_fe"].ToString());
                            if (!dr["id_fo"].ToString().Trim().Equals("")) varclsmateriel.Id_fo = int.Parse(dr["id_fo"].ToString());
                            if (!dr["id_serial"].ToString().Trim().Equals("")) varclsmateriel.Id_serial = int.Parse(dr["id_serial"].ToString());
                            if (!dr["capable_usb"].ToString().Trim().Equals("")) varclsmateriel.Capable_usb = bool.Parse(dr["capable_usb"].ToString());
                            if (!dr["id_default_pwd"].ToString().Trim().Equals("")) varclsmateriel.Id_default_pwd = int.Parse(dr["id_default_pwd"].ToString());
                            if (!dr["id_default_ip"].ToString().Trim().Equals("")) varclsmateriel.Id_default_ip = int.Parse(dr["id_default_ip"].ToString());
                            if (!dr["id_console"].ToString().Trim().Equals("")) varclsmateriel.Id_console = int.Parse(dr["id_console"].ToString());
                            if (!dr["id_auxiliaire"].ToString().Trim().Equals("")) varclsmateriel.Id_auxiliaire = int.Parse(dr["id_auxiliaire"].ToString());
                            if (!dr["id_type_AP"].ToString().Trim().Equals("")) varclsmateriel.Id_type_ap = int.Parse(dr["id_type_AP"].ToString());
                            if (!dr["id_type_switch"].ToString().Trim().Equals("")) varclsmateriel.Id_type_switch = int.Parse(dr["id_type_switch"].ToString());
                            if (!dr["id_frequence"].ToString().Trim().Equals("")) varclsmateriel.Id_frequence = int.Parse(dr["id_frequence"].ToString());
                            if (!dr["id_antenne"].ToString().Trim().Equals("")) varclsmateriel.Id_antenne = int.Parse(dr["id_antenne"].ToString());
                            if (!dr["id_netette"].ToString().Trim().Equals("")) varclsmateriel.Id_netette = int.Parse(dr["id_netette"].ToString());
                            if (!dr["compatible_wifi"].ToString().Trim().Equals("")) varclsmateriel.Compatible_wifi = bool.Parse(dr["compatible_wifi"].ToString());
                            if (!dr["id_portee"].ToString().Trim().Equals("")) varclsmateriel.Id_portee = int.Parse(dr["id_portee"].ToString());
                            lstclsmateriel.Add(varclsmateriel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmateriel;
        }

        #region Verification validation MAC
        private string ValidateMacAddress(string mac_address)
        {
            if (string.IsNullOrEmpty(mac_address))
            {
                mac_address = null;
            }
            else
            {
                if (mac_address.Length != 12)
                    throw new CustomException(string.Format("L'Adresse MAC {0} n'est pas valide\nUne adresse MAC valide doit avoir au plus 12 caractères svp !!!", mac_address));
                else
                {
                    System.Text.StringBuilder strMAC = new System.Text.StringBuilder();

                    foreach (char c in mac_address)
                    {
                        if (!char.IsLetterOrDigit(c))
                            throw new CustomException(string.Format("Le caractère {0} n'est pas valide dans une adresse MAC.\nUtiliser les chiffres de 0 à 9 et les lettres A à F ou a à f !!!", c));
                        else
                        {
                            if (c > 'f')
                                throw new CustomException(string.Format("Le caractère {0} n'est pas valide dans une adresse MAC.\nUtiliser les chiffres de 0 à 9 et les lettres A à F ou a à f !!!", c));
                            else
                                strMAC.Append(c);
                        }
                    }

                    mac_address = strMAC.ToString().ToUpper();
                }
            }
            return mac_address;
        }

        private string ValidateMacRegex(string mac_address)
        {
            if (string.IsNullOrEmpty(mac_address))
            {
                mac_address = null;
            }
            else
            {
                //Match match = Regex.Match(mac_address);
                if (System.Text.RegularExpressions.Regex.IsMatch(mac_address, "^[1-9a-fA-F][0-9a-fA-F]{11}$"))
                    return mac_address.ToUpper();
                else
                    throw new InvalidOperationException(string.Format("L'Adresse MAC {0} n'est pas valide\nUne adresse MAC valide doit avoir au plus 12 caractères et utilise les chiffres de 0 à 9 et les lettres A à F ou a à f !!!", mac_address));
            }
            return mac_address;
        }
        #endregion

        #region Verification validation IP Adress (IPv4)      
        private string ValidateIPv4Regex(string ipv4_address)
        {
            if (string.IsNullOrEmpty(ipv4_address))
            {
                ipv4_address = null;
            }
            else
            {
                if (System.Text.RegularExpressions.Regex.IsMatch(ipv4_address, @"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$"))
                    return ipv4_address.ToUpper();
                else
                    throw new InvalidOperationException(string.Format(@"L'Adresse IP {0} n'est pas valide\nUne adresse IP valide doit quatre chiffre séparés par des points et utilise uniquement les chiffres de 0 à 9 sans caractères spéciaux (/,\;# etc.) !!!", ipv4_address));
            }
            return ipv4_address;
        }
        #endregion

        public int insertClsmateriel(clsmateriel varclsmateriel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO materiel ( id,code_str,id_categorie_materiel,id_compte,qrcode,date_acquisition,id_garantie,id_marque,id_modele,id_couleur,id_poids,id_etat_materiel,photo1,photo2,photo3,label,mac_adresse1,mac_adresse2,commentaire,user_created,date_created,user_modified,date_modified,id_type_ordinateur,id_type_clavier,id_OS,id_ram,id_processeur,id_nombre_coeur_processeur,id_type_hdd,id_nombre_hdd,id_capacite_hdd,id_taille_ecran,id_usb2,id_usb3,id_hdmi,id_vga,id_tension_batterie,id_tension_adaptateur,id_puissance_adaptateur,id_intensite_adaptateur,numero_cle,id_type_imprimante,id_puissance,id_intensite,id_page_par_minute,id_type_amplificateur,id_tension_alimentation,id_usb,id_memoire,id_sorties_audio,id_microphone,id_gain,id_type_routeur_AP,id_version_ios,id_gbe,id_fe,id_fo,id_serial,capable_usb,id_default_pwd,id_default_ip,id_console,id_auxiliaire,id_type_AP,id_type_switch,id_frequence,id_antenne,id_netette,compatible_wifi,id_portee ) VALUES (@id,@code_str,@id_categorie_materiel,@id_compte,@qrcode,@date_acquisition,@id_garantie,@id_marque,@id_modele,@id_couleur,@id_poids,@id_etat_materiel,@photo1,@photo2,@photo3,@label,@mac_adresse1,@mac_adresse2,@commentaire,@user_created,@date_created,@user_modified,@date_modified,@id_type_ordinateur,@id_type_clavier,@id_OS,@id_ram,@id_processeur,@id_nombre_coeur_processeur,@id_type_hdd,@id_nombre_hdd,@id_capacite_hdd,@id_taille_ecran,@id_usb2,@id_usb3,@id_hdmi,@id_vga,@id_tension_batterie,@id_tension_adaptateur,@id_puissance_adaptateur,@id_intensite_adaptateur,@numero_cle,@id_type_imprimante,@id_puissance,@id_intensite,@id_page_par_minute,@id_type_amplificateur,@id_tension_alimentation,@id_usb,@id_memoire,@id_sorties_audio,@id_microphone,@id_gain,@id_type_routeur_AP,@id_version_ios,@id_gbe,@id_fe,@id_fo,@id_serial,@capable_usb,@id_default_pwd,@id_default_ip,@id_console,@id_auxiliaire,@id_type_AP,@id_type_switch,@id_frequence,@id_antenne,@id_netette,@compatible_wifi,@id_portee )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmateriel.Id));
                    if (varclsmateriel.Code_str != null) cmd.Parameters.Add(getParameter(cmd, "@code_str", DbType.String, 10, varclsmateriel.Code_str));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_str", DbType.String, 10, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_categorie_materiel", DbType.Int32, 4, varclsmateriel.Id_categorie_materiel));
                    cmd.Parameters.Add(getParameter(cmd, "@id_compte", DbType.Int32, 4, varclsmateriel.Id_compte));
                    if (varclsmateriel.Qrcode != null) cmd.Parameters.Add(getParameter(cmd, "@qrcode", DbType.Binary, Int32.MaxValue, varclsmateriel.Qrcode));
                    else cmd.Parameters.Add(getParameter(cmd, "@qrcode", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    if (varclsmateriel.Date_acquisition.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_acquisition", DbType.DateTime, 8, varclsmateriel.Date_acquisition));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_acquisition", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmateriel.Id_garantie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_garantie", DbType.Int32, 4, varclsmateriel.Id_garantie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_garantie", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_marque", DbType.Int32, 4, varclsmateriel.Id_marque));
                    cmd.Parameters.Add(getParameter(cmd, "@id_modele", DbType.Int32, 4, varclsmateriel.Id_modele));
                    cmd.Parameters.Add(getParameter(cmd, "@id_couleur", DbType.Int32, 4, varclsmateriel.Id_couleur));
                    cmd.Parameters.Add(getParameter(cmd, "@id_poids", DbType.Int32, 4, varclsmateriel.Id_poids));
                    cmd.Parameters.Add(getParameter(cmd, "@id_etat_materiel", DbType.Int32, 4, varclsmateriel.Id_etat_materiel));
                    if (varclsmateriel.Photo1 != null) cmd.Parameters.Add(getParameter(cmd, "@photo1", DbType.Binary, Int32.MaxValue, varclsmateriel.Photo1));
                    else cmd.Parameters.Add(getParameter(cmd, "@photo1", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    if (varclsmateriel.Photo2 != null) cmd.Parameters.Add(getParameter(cmd, "@photo2", DbType.Binary, Int32.MaxValue, varclsmateriel.Photo2));
                    else cmd.Parameters.Add(getParameter(cmd, "@photo2", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    if (varclsmateriel.Photo3 != null) cmd.Parameters.Add(getParameter(cmd, "@photo3", DbType.Binary, Int32.MaxValue, varclsmateriel.Photo3));
                    else cmd.Parameters.Add(getParameter(cmd, "@photo3", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    if (varclsmateriel.Label != null) cmd.Parameters.Add(getParameter(cmd, "@label", DbType.String, 20, varclsmateriel.Label));
                    else cmd.Parameters.Add(getParameter(cmd, "@label", DbType.String, 20, DBNull.Value));
                    if (!string.IsNullOrEmpty(varclsmateriel.Mac_adresse1)) cmd.Parameters.Add(getParameter(cmd, "@mac_adresse1", DbType.String, 20, ValidateMacRegex(varclsmateriel.Mac_adresse1)));
                    else cmd.Parameters.Add(getParameter(cmd, "@mac_adresse1", DbType.String, 20, DBNull.Value));
                    if (!string.IsNullOrEmpty(varclsmateriel.Mac_adresse2)) cmd.Parameters.Add(getParameter(cmd, "@mac_adresse2", DbType.String, 20, ValidateMacRegex(varclsmateriel.Mac_adresse2)));
                    else cmd.Parameters.Add(getParameter(cmd, "@mac_adresse2", DbType.String, 20, DBNull.Value));
                    if (varclsmateriel.Commentaire != null) cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 400, varclsmateriel.Commentaire));
                    else cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 400, DBNull.Value));
                    if (varclsmateriel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsmateriel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsmateriel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsmateriel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmateriel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsmateriel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsmateriel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsmateriel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    //if (varclsmateriel.Archiver.HasValue) cmd.Parameters.Add(getParameter(cmd, "@archiver", DbType.Boolean, 2, varclsmateriel.Archiver));
                    //else cmd.Parameters.Add(getParameter(cmd, "@archiver", DbType.Boolean, 2, DBNull.Value));
                    if (varclsmateriel.Id_type_ordinateur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_ordinateur", DbType.Int32, 4, varclsmateriel.Id_type_ordinateur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_ordinateur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_clavier.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_clavier", DbType.Int32, 4, varclsmateriel.Id_type_clavier));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_clavier", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_os.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_OS", DbType.Int32, 4, varclsmateriel.Id_os));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_OS", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_ram.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_ram", DbType.Int32, 4, varclsmateriel.Id_ram));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_ram", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_processeur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_processeur", DbType.Int32, 4, varclsmateriel.Id_processeur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_processeur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_nombre_coeur_processeur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_nombre_coeur_processeur", DbType.Int32, 4, varclsmateriel.Id_nombre_coeur_processeur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_nombre_coeur_processeur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_hdd.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_hdd", DbType.Int32, 4, varclsmateriel.Id_type_hdd));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_hdd", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_nombre_hdd.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_nombre_hdd", DbType.Int32, 4, varclsmateriel.Id_nombre_hdd));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_nombre_hdd", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_capacite_hdd.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_capacite_hdd", DbType.Int32, 4, varclsmateriel.Id_capacite_hdd));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_capacite_hdd", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_taille_ecran.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_taille_ecran", DbType.Int32, 4, varclsmateriel.Id_taille_ecran));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_taille_ecran", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_usb2.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_usb2", DbType.Int32, 4, varclsmateriel.Id_usb2));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_usb2", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_usb3.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_usb3", DbType.Int32, 4, varclsmateriel.Id_usb3));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_usb3", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_hdmi.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_hdmi", DbType.Int32, 4, varclsmateriel.Id_hdmi));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_hdmi", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_vga.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_vga", DbType.Int32, 4, varclsmateriel.Id_vga));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_vga", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_tension_batterie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tension_batterie", DbType.Int32, 4, varclsmateriel.Id_tension_batterie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tension_batterie", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_tension_adaptateur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tension_adaptateur", DbType.Int32, 4, varclsmateriel.Id_tension_adaptateur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tension_adaptateur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_puissance_adaptateur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_puissance_adaptateur", DbType.Int32, 4, varclsmateriel.Id_puissance_adaptateur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_puissance_adaptateur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_intensite_adaptateur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_intensite_adaptateur", DbType.Int32, 4, varclsmateriel.Id_intensite_adaptateur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_intensite_adaptateur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Numero_cle.HasValue) cmd.Parameters.Add(getParameter(cmd, "@numero_cle", DbType.Int32, 4, varclsmateriel.Numero_cle));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero_cle", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_imprimante.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_imprimante", DbType.Int32, 4, varclsmateriel.Id_type_imprimante));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_imprimante", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_puissance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_puissance", DbType.Int32, 4, varclsmateriel.Id_puissance));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_puissance", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_intensite.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_intensite", DbType.Int32, 4, varclsmateriel.Id_intensite));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_intensite", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_page_par_minute.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_page_par_minute", DbType.Int32, 4, varclsmateriel.Id_page_par_minute));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_page_par_minute", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_amplificateur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_amplificateur", DbType.Int32, 4, varclsmateriel.Id_type_amplificateur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_amplificateur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_tension_alimentation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tension_alimentation", DbType.Int32, 4, varclsmateriel.Id_tension_alimentation));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tension_alimentation", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_usb.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_usb", DbType.Int32, 4, varclsmateriel.Id_usb));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_usb", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_memoire.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_memoire", DbType.Int32, 4, varclsmateriel.Id_memoire));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_memoire", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_sorties_audio.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_sorties_audio", DbType.Int32, 4, varclsmateriel.Id_sorties_audio));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_sorties_audio", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_microphone.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_microphone", DbType.Int32, 4, varclsmateriel.Id_microphone));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_microphone", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_gain.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_gain", DbType.Int32, 4, varclsmateriel.Id_gain));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_gain", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_routeur_ap.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_routeur_AP", DbType.Int32, 4, varclsmateriel.Id_type_routeur_ap));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_routeur_AP", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_version_ios.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_version_ios", DbType.Int32, 4, varclsmateriel.Id_version_ios));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_version_ios", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_gbe.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_gbe", DbType.Int32, 4, varclsmateriel.Id_gbe));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_gbe", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_fe.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_fe", DbType.Int32, 4, varclsmateriel.Id_fe));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_fe", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_fo.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_fo", DbType.Int32, 4, varclsmateriel.Id_fo));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_fo", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_serial.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_serial", DbType.Int32, 4, varclsmateriel.Id_serial));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_serial", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Capable_usb.HasValue) cmd.Parameters.Add(getParameter(cmd, "@capable_usb", DbType.Boolean, 2, varclsmateriel.Capable_usb));
                    else cmd.Parameters.Add(getParameter(cmd, "@capable_usb", DbType.Boolean, 2, DBNull.Value));
                    if (varclsmateriel.Id_default_pwd.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_default_pwd", DbType.Int32, 4, varclsmateriel.Id_default_pwd));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_default_pwd", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_default_ip.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_default_ip", DbType.Int32, 4, varclsmateriel.Id_default_ip));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_default_ip", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_console.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_console", DbType.Int32, 4, varclsmateriel.Id_console));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_console", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_auxiliaire.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_auxiliaire", DbType.Int32, 4, varclsmateriel.Id_auxiliaire));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_auxiliaire", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_ap.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_AP", DbType.Int32, 4, varclsmateriel.Id_type_ap));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_AP", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_switch.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_switch", DbType.Int32, 4, varclsmateriel.Id_type_switch));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_switch", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_frequence.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_frequence", DbType.Int32, 4, varclsmateriel.Id_frequence));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_frequence", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_antenne.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_antenne", DbType.Int32, 4, varclsmateriel.Id_antenne));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_antenne", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_netette.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_netette", DbType.Int32, 4, varclsmateriel.Id_netette));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_netette", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Compatible_wifi.HasValue) cmd.Parameters.Add(getParameter(cmd, "@compatible_wifi", DbType.Boolean, 2, varclsmateriel.Compatible_wifi));
                    else cmd.Parameters.Add(getParameter(cmd, "@compatible_wifi", DbType.Boolean, 2, DBNull.Value));
                    if (varclsmateriel.Id_portee.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_portee", DbType.Int32, 4, varclsmateriel.Id_portee));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_portee", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsmateriel(clsmateriel varclsmateriel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE materiel  SET code_str=@code_str,id_categorie_materiel=@id_categorie_materiel,id_compte=@id_compte,qrcode=@qrcode,date_acquisition=@date_acquisition,id_garantie=@id_garantie,id_marque=@id_marque,id_modele=@id_modele,id_couleur=@id_couleur,id_poids=@id_poids,id_etat_materiel=@id_etat_materiel,photo1=@photo1,photo2=@photo2,photo3=@photo3,label=@label,mac_adresse1=@mac_adresse1,mac_adresse2=@mac_adresse2,commentaire=@commentaire,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified,id_type_ordinateur=@id_type_ordinateur,id_type_clavier=@id_type_clavier,id_OS=@id_OS,id_ram=@id_ram,id_processeur=@id_processeur,id_nombre_coeur_processeur=@id_nombre_coeur_processeur,id_type_hdd=@id_type_hdd,id_nombre_hdd=@id_nombre_hdd,id_capacite_hdd=@id_capacite_hdd,id_taille_ecran=@id_taille_ecran,id_usb2=@id_usb2,id_usb3=@id_usb3,id_hdmi=@id_hdmi,id_vga=@id_vga,id_tension_batterie=@id_tension_batterie,id_tension_adaptateur=@id_tension_adaptateur,id_puissance_adaptateur=@id_puissance_adaptateur,id_intensite_adaptateur=@id_intensite_adaptateur,numero_cle=@numero_cle,id_type_imprimante=@id_type_imprimante,id_puissance=@id_puissance,id_intensite=@id_intensite,id_page_par_minute=@id_page_par_minute,id_type_amplificateur=@id_type_amplificateur,id_tension_alimentation=@id_tension_alimentation,id_usb=@id_usb,id_memoire=@id_memoire,id_sorties_audio=@id_sorties_audio,id_microphone=@id_microphone,id_gain=@id_gain,id_type_routeur_AP=@id_type_routeur_AP,id_version_ios=@id_version_ios,id_gbe=@id_gbe,id_fe=@id_fe,id_fo=@id_fo,id_serial=@id_serial,capable_usb=@capable_usb,id_default_pwd=@id_default_pwd,id_default_ip=@id_default_ip,id_console=@id_console,id_auxiliaire=@id_auxiliaire,id_type_AP=@id_type_AP,id_type_switch=@id_type_switch,id_frequence=@id_frequence,id_antenne=@id_antenne,id_netette=@id_netette,compatible_wifi=@compatible_wifi,id_portee=@id_portee  WHERE 1=1  AND id=@id ");
                    if (varclsmateriel.Code_str != null) cmd.Parameters.Add(getParameter(cmd, "@code_str", DbType.String, 10, varclsmateriel.Code_str));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_str", DbType.String, 10, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_categorie_materiel", DbType.Int32, 4, varclsmateriel.Id_categorie_materiel));
                    cmd.Parameters.Add(getParameter(cmd, "@id_compte", DbType.Int32, 4, varclsmateriel.Id_compte));
                    if (varclsmateriel.Qrcode != null) cmd.Parameters.Add(getParameter(cmd, "@qrcode", DbType.Binary, Int32.MaxValue, varclsmateriel.Qrcode));
                    else cmd.Parameters.Add(getParameter(cmd, "@qrcode", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    if (varclsmateriel.Date_acquisition.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_acquisition", DbType.DateTime, 8, varclsmateriel.Date_acquisition));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_acquisition", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmateriel.Id_garantie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_garantie", DbType.Int32, 4, varclsmateriel.Id_garantie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_garantie", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_marque", DbType.Int32, 4, varclsmateriel.Id_marque));
                    cmd.Parameters.Add(getParameter(cmd, "@id_modele", DbType.Int32, 4, varclsmateriel.Id_modele));
                    cmd.Parameters.Add(getParameter(cmd, "@id_couleur", DbType.Int32, 4, varclsmateriel.Id_couleur));
                    cmd.Parameters.Add(getParameter(cmd, "@id_poids", DbType.Int32, 4, varclsmateriel.Id_poids));
                    cmd.Parameters.Add(getParameter(cmd, "@id_etat_materiel", DbType.Int32, 4, varclsmateriel.Id_etat_materiel));
                    if (varclsmateriel.Photo1 != null) cmd.Parameters.Add(getParameter(cmd, "@photo1", DbType.Binary, Int32.MaxValue, varclsmateriel.Photo1));
                    else cmd.Parameters.Add(getParameter(cmd, "@photo1", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    if (varclsmateriel.Photo2 != null) cmd.Parameters.Add(getParameter(cmd, "@photo2", DbType.Binary, Int32.MaxValue, varclsmateriel.Photo2));
                    else cmd.Parameters.Add(getParameter(cmd, "@photo2", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    if (varclsmateriel.Photo3 != null) cmd.Parameters.Add(getParameter(cmd, "@photo3", DbType.Binary, Int32.MaxValue, varclsmateriel.Photo3));
                    else cmd.Parameters.Add(getParameter(cmd, "@photo3", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    if (varclsmateriel.Label != null) cmd.Parameters.Add(getParameter(cmd, "@label", DbType.String, 20, varclsmateriel.Label));
                    else cmd.Parameters.Add(getParameter(cmd, "@label", DbType.String, 20, DBNull.Value));
                    if (!string.IsNullOrEmpty(varclsmateriel.Mac_adresse1)) cmd.Parameters.Add(getParameter(cmd, "@mac_adresse1", DbType.String, 20, ValidateMacRegex(varclsmateriel.Mac_adresse1)));
                    else cmd.Parameters.Add(getParameter(cmd, "@mac_adresse1", DbType.String, 20, DBNull.Value));
                    if (!string.IsNullOrEmpty(varclsmateriel.Mac_adresse2)) cmd.Parameters.Add(getParameter(cmd, "@mac_adresse2", DbType.String, 20, ValidateMacRegex(varclsmateriel.Mac_adresse2)));
                    else cmd.Parameters.Add(getParameter(cmd, "@mac_adresse2", DbType.String, 20, DBNull.Value));
                    if (varclsmateriel.Commentaire != null) cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 400, varclsmateriel.Commentaire));
                    else cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 400, DBNull.Value));
                    if (varclsmateriel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsmateriel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsmateriel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsmateriel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmateriel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsmateriel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsmateriel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsmateriel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    //if (varclsmateriel.Archiver.HasValue) cmd.Parameters.Add(getParameter(cmd, "@archiver", DbType.Boolean, 2, varclsmateriel.Archiver));
                    //else cmd.Parameters.Add(getParameter(cmd, "@archiver", DbType.Boolean, 2, DBNull.Value));
                    if (varclsmateriel.Id_type_ordinateur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_ordinateur", DbType.Int32, 4, varclsmateriel.Id_type_ordinateur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_ordinateur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_clavier.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_clavier", DbType.Int32, 4, varclsmateriel.Id_type_clavier));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_clavier", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_os.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_OS", DbType.Int32, 4, varclsmateriel.Id_os));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_OS", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_ram.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_ram", DbType.Int32, 4, varclsmateriel.Id_ram));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_ram", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_processeur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_processeur", DbType.Int32, 4, varclsmateriel.Id_processeur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_processeur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_nombre_coeur_processeur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_nombre_coeur_processeur", DbType.Int32, 4, varclsmateriel.Id_nombre_coeur_processeur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_nombre_coeur_processeur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_hdd.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_hdd", DbType.Int32, 4, varclsmateriel.Id_type_hdd));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_hdd", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_nombre_hdd.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_nombre_hdd", DbType.Int32, 4, varclsmateriel.Id_nombre_hdd));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_nombre_hdd", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_capacite_hdd.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_capacite_hdd", DbType.Int32, 4, varclsmateriel.Id_capacite_hdd));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_capacite_hdd", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_taille_ecran.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_taille_ecran", DbType.Int32, 4, varclsmateriel.Id_taille_ecran));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_taille_ecran", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_usb2.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_usb2", DbType.Int32, 4, varclsmateriel.Id_usb2));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_usb2", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_usb3.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_usb3", DbType.Int32, 4, varclsmateriel.Id_usb3));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_usb3", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_hdmi.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_hdmi", DbType.Int32, 4, varclsmateriel.Id_hdmi));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_hdmi", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_vga.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_vga", DbType.Int32, 4, varclsmateriel.Id_vga));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_vga", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_tension_batterie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tension_batterie", DbType.Int32, 4, varclsmateriel.Id_tension_batterie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tension_batterie", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_tension_adaptateur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tension_adaptateur", DbType.Int32, 4, varclsmateriel.Id_tension_adaptateur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tension_adaptateur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_puissance_adaptateur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_puissance_adaptateur", DbType.Int32, 4, varclsmateriel.Id_puissance_adaptateur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_puissance_adaptateur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_intensite_adaptateur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_intensite_adaptateur", DbType.Int32, 4, varclsmateriel.Id_intensite_adaptateur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_intensite_adaptateur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Numero_cle.HasValue) cmd.Parameters.Add(getParameter(cmd, "@numero_cle", DbType.Int32, 4, varclsmateriel.Numero_cle));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero_cle", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_imprimante.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_imprimante", DbType.Int32, 4, varclsmateriel.Id_type_imprimante));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_imprimante", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_puissance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_puissance", DbType.Int32, 4, varclsmateriel.Id_puissance));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_puissance", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_intensite.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_intensite", DbType.Int32, 4, varclsmateriel.Id_intensite));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_intensite", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_page_par_minute.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_page_par_minute", DbType.Int32, 4, varclsmateriel.Id_page_par_minute));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_page_par_minute", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_amplificateur.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_amplificateur", DbType.Int32, 4, varclsmateriel.Id_type_amplificateur));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_amplificateur", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_tension_alimentation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tension_alimentation", DbType.Int32, 4, varclsmateriel.Id_tension_alimentation));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tension_alimentation", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_usb.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_usb", DbType.Int32, 4, varclsmateriel.Id_usb));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_usb", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_memoire.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_memoire", DbType.Int32, 4, varclsmateriel.Id_memoire));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_memoire", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_sorties_audio.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_sorties_audio", DbType.Int32, 4, varclsmateriel.Id_sorties_audio));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_sorties_audio", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_microphone.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_microphone", DbType.Int32, 4, varclsmateriel.Id_microphone));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_microphone", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_gain.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_gain", DbType.Int32, 4, varclsmateriel.Id_gain));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_gain", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_routeur_ap.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_routeur_AP", DbType.Int32, 4, varclsmateriel.Id_type_routeur_ap));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_routeur_AP", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_version_ios.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_version_ios", DbType.Int32, 4, varclsmateriel.Id_version_ios));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_version_ios", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_gbe.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_gbe", DbType.Int32, 4, varclsmateriel.Id_gbe));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_gbe", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_fe.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_fe", DbType.Int32, 4, varclsmateriel.Id_fe));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_fe", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_fo.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_fo", DbType.Int32, 4, varclsmateriel.Id_fo));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_fo", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_serial.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_serial", DbType.Int32, 4, varclsmateriel.Id_serial));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_serial", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Capable_usb.HasValue) cmd.Parameters.Add(getParameter(cmd, "@capable_usb", DbType.Boolean, 2, varclsmateriel.Capable_usb));
                    else cmd.Parameters.Add(getParameter(cmd, "@capable_usb", DbType.Boolean, 2, DBNull.Value));
                    if (varclsmateriel.Id_default_pwd.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_default_pwd", DbType.Int32, 4, varclsmateriel.Id_default_pwd));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_default_pwd", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_default_ip.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_default_ip", DbType.Int32, 4, varclsmateriel.Id_default_ip));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_default_ip", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_console.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_console", DbType.Int32, 4, varclsmateriel.Id_console));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_console", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_auxiliaire.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_auxiliaire", DbType.Int32, 4, varclsmateriel.Id_auxiliaire));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_auxiliaire", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_ap.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_AP", DbType.Int32, 4, varclsmateriel.Id_type_ap));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_AP", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_type_switch.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_type_switch", DbType.Int32, 4, varclsmateriel.Id_type_switch));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_type_switch", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_frequence.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_frequence", DbType.Int32, 4, varclsmateriel.Id_frequence));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_frequence", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_antenne.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_antenne", DbType.Int32, 4, varclsmateriel.Id_antenne));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_antenne", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Id_netette.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_netette", DbType.Int32, 4, varclsmateriel.Id_netette));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_netette", DbType.Int32, 4, DBNull.Value));
                    if (varclsmateriel.Compatible_wifi.HasValue) cmd.Parameters.Add(getParameter(cmd, "@compatible_wifi", DbType.Boolean, 2, varclsmateriel.Compatible_wifi));
                    else cmd.Parameters.Add(getParameter(cmd, "@compatible_wifi", DbType.Boolean, 2, DBNull.Value));
                    if (varclsmateriel.Id_portee.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_portee", DbType.Int32, 4, varclsmateriel.Id_portee));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_portee", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmateriel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int ArchiverMateriel(clsmateriel varclsmateriel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE materiel  SET archiver=@archiver WHERE id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@archiver", DbType.Boolean, 2, varclsmateriel.Archiver));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmateriel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsmateriel(clsmateriel varclsmateriel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM materiel  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmateriel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'materiel' avec la classe 'clsmateriel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSMATERIEL 
        #region  CLSGRADE
        public clsgrade getClsgrade(object intid)
        {
            clsgrade varclsgrade = new clsgrade();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM grade WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgrade.Id = int.Parse(dr["id"].ToString());
                            varclsgrade.Designation = dr["designation"].ToString();
                            varclsgrade.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgrade.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgrade.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgrade.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'grade' avec la classe 'clsgrade' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsgrade;
        }

        public List<clsgrade> getAllClsgrade(string criteria)
        {
            List<clsgrade> lstclsgrade = new List<clsgrade>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_grade_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgrade varclsgrade = null;
                        while (dr.Read())
                        {
                            varclsgrade = new clsgrade();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgrade.Id = int.Parse(dr["id"].ToString());
                            varclsgrade.Designation = dr["designation"].ToString();
                            varclsgrade.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgrade.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgrade.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgrade.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsgrade.Add(varclsgrade);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'grade' avec la classe 'clsgrade' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsgrade;
        }

        public List<clsgrade> getAllClsgrade()
        {
            List<clsgrade> lstclsgrade = new List<clsgrade>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM grade ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgrade varclsgrade = null;
                        while (dr.Read())
                        {
                            varclsgrade = new clsgrade();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgrade.Id = int.Parse(dr["id"].ToString());
                            varclsgrade.Designation = dr["designation"].ToString();
                            varclsgrade.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgrade.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgrade.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgrade.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsgrade.Add(varclsgrade);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'grade' avec la classe 'clsgrade' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsgrade;
        }

        public int insertClsgrade(clsgrade varclsgrade)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO grade ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgrade.Id));
                    if (varclsgrade.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsgrade.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsgrade.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsgrade.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsgrade.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsgrade.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsgrade.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsgrade.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsgrade.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsgrade.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'grade' avec la classe 'clsgrade' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsgrade(clsgrade varclsgrade)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE grade  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsgrade.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsgrade.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsgrade.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsgrade.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsgrade.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsgrade.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsgrade.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsgrade.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsgrade.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsgrade.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgrade.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'grade' avec la classe 'clsgrade' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsgrade(clsgrade varclsgrade)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM grade  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgrade.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'grade' avec la classe 'clsgrade' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSGRADE 
        #region  CLSUSB2
        public clsusb2 getClsusb2(object intid)
        {
            clsusb2 varclsusb2 = new clsusb2();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM usb2 WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsusb2.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsusb2.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsusb2.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsusb2.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsusb2.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsusb2.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'usb2' avec la classe 'clsusb2' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsusb2;
        }

        public List<clsusb2> getAllClsusb2(string criteria)
        {
            List<clsusb2> lstclsusb2 = new List<clsusb2>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_usb2_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsusb2 varclsusb2 = null;
                        while (dr.Read())
                        {
                            varclsusb2 = new clsusb2();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsusb2.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsusb2.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsusb2.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsusb2.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsusb2.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsusb2.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsusb2.Add(varclsusb2);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'usb2' avec la classe 'clsusb2' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsusb2;
        }

        public List<clsusb2> getAllClsusb2()
        {
            List<clsusb2> lstclsusb2 = new List<clsusb2>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM usb2 ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsusb2 varclsusb2 = null;
                        while (dr.Read())
                        {
                            varclsusb2 = new clsusb2();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsusb2.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsusb2.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsusb2.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsusb2.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsusb2.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsusb2.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsusb2.Add(varclsusb2);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'usb2' avec la classe 'clsusb2' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsusb2;
        }

        public int insertClsusb2(clsusb2 varclsusb2)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO usb2 ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsusb2.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsusb2.Valeur));
                    if (varclsusb2.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsusb2.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsusb2.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsusb2.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsusb2.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsusb2.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsusb2.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsusb2.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'usb2' avec la classe 'clsusb2' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsusb2(clsusb2 varclsusb2)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE usb2  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsusb2.Valeur));
                    if (varclsusb2.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsusb2.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsusb2.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsusb2.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsusb2.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsusb2.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsusb2.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsusb2.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsusb2.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'usb2' avec la classe 'clsusb2' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsusb2(clsusb2 varclsusb2)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM usb2  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsusb2.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'usb2' avec la classe 'clsusb2' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSUSB2 
        #region  CLSPERSONNE
        public clspersonne getClspersonne(object intid)
        {
            clspersonne varclspersonne = new clspersonne();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM personne WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspersonne.Id = int.Parse(dr["id"].ToString());
                            varclspersonne.Nom = dr["nom"].ToString();
                            varclspersonne.Postnom = dr["postnom"].ToString();
                            varclspersonne.Prenom = dr["prenom"].ToString();
                            if (!dr["id_grade"].ToString().Trim().Equals("")) varclspersonne.Id_grade = int.Parse(dr["id_grade"].ToString());
                            if (!dr["isenseignant"].ToString().Trim().Equals("")) varclspersonne.Isenseignant = bool.Parse(dr["isenseignant"].ToString());
                            if (!dr["isagent"].ToString().Trim().Equals("")) varclspersonne.Isagent = bool.Parse(dr["isagent"].ToString());
                            if (!dr["isetudiant"].ToString().Trim().Equals("")) varclspersonne.Isetudiant = bool.Parse(dr["isetudiant"].ToString());
                            varclspersonne.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspersonne.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspersonne.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspersonne.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            varclspersonne.Sexe = dr["sexe"].ToString();
                            varclspersonne.Etatcivil = dr["etatcivil"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclspersonne.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            if (!dr["photo"].ToString().Trim().Equals("")) varclspersonne.Photo = (Byte[])dr["photo"];
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'personne' avec la classe 'clspersonne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclspersonne;
        }

        public List<clspersonne> getAllClspersonne(string criteria)
        {
            List<clspersonne> lstclspersonne = new List<clspersonne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_personne_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspersonne varclspersonne = null;
                        while (dr.Read())
                        {
                            varclspersonne = new clspersonne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspersonne.Id = int.Parse(dr["id"].ToString());
                            varclspersonne.Nom = dr["nom"].ToString();
                            varclspersonne.Postnom = dr["postnom"].ToString();
                            varclspersonne.Prenom = dr["prenom"].ToString();
                            if (!dr["id_grade"].ToString().Trim().Equals("")) varclspersonne.Id_grade = int.Parse(dr["id_grade"].ToString());
                            if (!dr["isenseignant"].ToString().Trim().Equals("")) varclspersonne.Isenseignant = bool.Parse(dr["isenseignant"].ToString());
                            if (!dr["isagent"].ToString().Trim().Equals("")) varclspersonne.Isagent = bool.Parse(dr["isagent"].ToString());
                            if (!dr["isetudiant"].ToString().Trim().Equals("")) varclspersonne.Isetudiant = bool.Parse(dr["isetudiant"].ToString());
                            varclspersonne.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspersonne.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspersonne.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspersonne.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            varclspersonne.Sexe = dr["sexe"].ToString();
                            varclspersonne.Etatcivil = dr["etatcivil"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclspersonne.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            if (!dr["photo"].ToString().Trim().Equals("")) varclspersonne.Photo = (Byte[])dr["photo"];
                            lstclspersonne.Add(varclspersonne);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'personne' avec la classe 'clspersonne' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspersonne;
        }

        public List<clspersonne> getAllClspersonne()
        {
            List<clspersonne> lstclspersonne = new List<clspersonne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM personne ORDER BY nom ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspersonne varclspersonne = null;
                        while (dr.Read())
                        {
                            varclspersonne = new clspersonne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspersonne.Id = int.Parse(dr["id"].ToString());
                            varclspersonne.Nom = dr["nom"].ToString();
                            varclspersonne.Postnom = dr["postnom"].ToString();
                            varclspersonne.Prenom = dr["prenom"].ToString();
                            if (!dr["id_grade"].ToString().Trim().Equals("")) varclspersonne.Id_grade = int.Parse(dr["id_grade"].ToString());
                            if (!dr["isenseignant"].ToString().Trim().Equals("")) varclspersonne.Isenseignant = bool.Parse(dr["isenseignant"].ToString());
                            if (!dr["isagent"].ToString().Trim().Equals("")) varclspersonne.Isagent = bool.Parse(dr["isagent"].ToString());
                            if (!dr["isetudiant"].ToString().Trim().Equals("")) varclspersonne.Isetudiant = bool.Parse(dr["isetudiant"].ToString());
                            varclspersonne.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspersonne.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspersonne.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspersonne.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            varclspersonne.Sexe = dr["sexe"].ToString();
                            varclspersonne.Etatcivil = dr["etatcivil"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclspersonne.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            if (!dr["photo"].ToString().Trim().Equals("")) varclspersonne.Photo = (Byte[])dr["photo"];
                            lstclspersonne.Add(varclspersonne);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'personne' avec la classe 'clspersonne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspersonne;
        }

        public List<clspersonne> getAllClspersonne_unique(int id_personne)
        {
            List<clspersonne> lstclspersonne = new List<clspersonne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM personne WHERE id=@id");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id_personne));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspersonne varclspersonne = null;
                        while (dr.Read())
                        {
                            varclspersonne = new clspersonne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspersonne.Id = int.Parse(dr["id"].ToString());
                            varclspersonne.Nom = dr["nom"].ToString();
                            varclspersonne.Postnom = dr["postnom"].ToString();
                            varclspersonne.Prenom = dr["prenom"].ToString();
                            if (!dr["id_grade"].ToString().Trim().Equals("")) varclspersonne.Id_grade = int.Parse(dr["id_grade"].ToString());
                            if (!dr["isenseignant"].ToString().Trim().Equals("")) varclspersonne.Isenseignant = bool.Parse(dr["isenseignant"].ToString());
                            if (!dr["isagent"].ToString().Trim().Equals("")) varclspersonne.Isagent = bool.Parse(dr["isagent"].ToString());
                            if (!dr["isetudiant"].ToString().Trim().Equals("")) varclspersonne.Isetudiant = bool.Parse(dr["isetudiant"].ToString());
                            varclspersonne.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspersonne.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspersonne.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspersonne.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            varclspersonne.Sexe = dr["sexe"].ToString();
                            varclspersonne.Etatcivil = dr["etatcivil"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclspersonne.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            if (!dr["photo"].ToString().Trim().Equals("")) varclspersonne.Photo = (Byte[])dr["photo"];
                            lstclspersonne.Add(varclspersonne);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'personne' avec la classe 'clspersonne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspersonne;
        }

        public int insertClspersonne(clspersonne varclspersonne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO personne ( id,nom,postnom,prenom,id_grade,isenseignant,isagent,isetudiant,user_created,date_created,user_modified,date_modified,sexe,etatcivil,datenaissance,photo ) VALUES (@id,@nom,@postnom,@prenom,@id_grade,@isenseignant,@isagent,@isetudiant,@user_created,@date_created,@user_modified,@date_modified,@sexe,@etatcivil,@datenaissance,@photo  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspersonne.Id));
                    if (varclspersonne.Nom != null) cmd.Parameters.Add(getParameter(cmd, "@nom", DbType.String, 50, varclspersonne.Nom));
                    else cmd.Parameters.Add(getParameter(cmd, "@nom", DbType.String, 50, DBNull.Value));
                    if (varclspersonne.Postnom != null) cmd.Parameters.Add(getParameter(cmd, "@postnom", DbType.String, 30, varclspersonne.Postnom));
                    else cmd.Parameters.Add(getParameter(cmd, "@postnom", DbType.String, 30, DBNull.Value));
                    if (varclspersonne.Prenom != null) cmd.Parameters.Add(getParameter(cmd, "@prenom", DbType.String, 30, varclspersonne.Prenom));
                    else cmd.Parameters.Add(getParameter(cmd, "@prenom", DbType.String, 30, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_grade", DbType.Int32, 4, varclspersonne.Id_grade));
                    if (varclspersonne.Isenseignant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@isenseignant", DbType.Boolean, 2, varclspersonne.Isenseignant));
                    else cmd.Parameters.Add(getParameter(cmd, "@isenseignant", DbType.Boolean, 2, DBNull.Value));
                    if (varclspersonne.Isagent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@isagent", DbType.Boolean, 2, varclspersonne.Isagent));
                    else cmd.Parameters.Add(getParameter(cmd, "@isagent", DbType.Boolean, 2, DBNull.Value));
                    if (varclspersonne.Isetudiant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@isetudiant", DbType.Boolean, 2, varclspersonne.Isetudiant));
                    else cmd.Parameters.Add(getParameter(cmd, "@isetudiant", DbType.Boolean, 2, DBNull.Value));
                    if (varclspersonne.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspersonne.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspersonne.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspersonne.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspersonne.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspersonne.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspersonne.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspersonne.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    if (varclspersonne.Sexe != null) cmd.Parameters.Add(getParameter(cmd, "@sexe", DbType.String, 1, varclspersonne.Sexe));
                    else cmd.Parameters.Add(getParameter(cmd, "@sexe", DbType.String, 1, DBNull.Value));
                    if (varclspersonne.Etatcivil != null) cmd.Parameters.Add(getParameter(cmd, "@etatcivil", DbType.String, 20, varclspersonne.Etatcivil));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatcivil", DbType.String, 20, DBNull.Value));
                    if (varclspersonne.Datenaissance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datenaissance", DbType.DateTime, 8, varclspersonne.Datenaissance));
                    else cmd.Parameters.Add(getParameter(cmd, "@datenaissance", DbType.DateTime, 8, DBNull.Value));
                    if (varclspersonne.Photo != null) cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, varclspersonne.Photo));
                    else cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'personne' avec la classe 'clspersonne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClspersonne(clspersonne varclspersonne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE personne  SET nom=@nom,postnom=@postnom,prenom=@prenom,id_grade=@id_grade,isenseignant=@isenseignant,isagent=@isagent,isetudiant=@isetudiant,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified,sexe=@sexe,etatcivil=@etatcivil,datenaissance=@datenaissance,photo=@photo  WHERE 1=1  AND id=@id ");
                    if (varclspersonne.Nom != null) cmd.Parameters.Add(getParameter(cmd, "@nom", DbType.String, 50, varclspersonne.Nom));
                    else cmd.Parameters.Add(getParameter(cmd, "@nom", DbType.String, 50, DBNull.Value));
                    if (varclspersonne.Postnom != null) cmd.Parameters.Add(getParameter(cmd, "@postnom", DbType.String, 30, varclspersonne.Postnom));
                    else cmd.Parameters.Add(getParameter(cmd, "@postnom", DbType.String, 30, DBNull.Value));
                    if (varclspersonne.Prenom != null) cmd.Parameters.Add(getParameter(cmd, "@prenom", DbType.String, 30, varclspersonne.Prenom));
                    else cmd.Parameters.Add(getParameter(cmd, "@prenom", DbType.String, 30, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_grade", DbType.Int32, 4, varclspersonne.Id_grade));
                    if (varclspersonne.Isenseignant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@isenseignant", DbType.Boolean, 2, varclspersonne.Isenseignant));
                    else cmd.Parameters.Add(getParameter(cmd, "@isenseignant", DbType.Boolean, 2, DBNull.Value));
                    if (varclspersonne.Isagent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@isagent", DbType.Boolean, 2, varclspersonne.Isagent));
                    else cmd.Parameters.Add(getParameter(cmd, "@isagent", DbType.Boolean, 2, DBNull.Value));
                    if (varclspersonne.Isetudiant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@isetudiant", DbType.Boolean, 2, varclspersonne.Isetudiant));
                    else cmd.Parameters.Add(getParameter(cmd, "@isetudiant", DbType.Boolean, 2, DBNull.Value));
                    if (varclspersonne.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspersonne.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspersonne.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspersonne.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspersonne.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspersonne.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspersonne.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspersonne.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    if (varclspersonne.Sexe != null) cmd.Parameters.Add(getParameter(cmd, "@sexe", DbType.String, 1, varclspersonne.Sexe));
                    else cmd.Parameters.Add(getParameter(cmd, "@sexe", DbType.String, 1, DBNull.Value));
                    if (varclspersonne.Etatcivil != null) cmd.Parameters.Add(getParameter(cmd, "@etatcivil", DbType.String, 20, varclspersonne.Etatcivil));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatcivil", DbType.String, 20, DBNull.Value));
                    if (varclspersonne.Datenaissance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datenaissance", DbType.DateTime, 8, varclspersonne.Datenaissance));
                    else cmd.Parameters.Add(getParameter(cmd, "@datenaissance", DbType.DateTime, 8, DBNull.Value));
                    if (varclspersonne.Photo != null) cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, varclspersonne.Photo));
                    else cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspersonne.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'personne' avec la classe 'clspersonne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClspersonne(clspersonne varclspersonne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM personne  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspersonne.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'personne' avec la classe 'clspersonne' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #region VALIDATING E-MAIL AND PHONE NUMBER
        private string ValidateEmailRegex(string email_address)
        {
            if (string.IsNullOrEmpty(email_address))
            {
                email_address = null;
            }
            else
            {
                if (System.Text.RegularExpressions.Regex.IsMatch(email_address, "^[_a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)@[a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)*(.[a-zA-Z]{2,4})$"))
                    return email_address.ToUpper();
                else
                    throw new Exception(string.Format("L'Adresse E-mail {0} n'est pas valide\nUne adresse E-mail valide doit respecter le format suivant : nom@domain.xx et n'utiliser que des lesttres A à Z ou a à z et les chiffres 0 à 9 !!!", email_address));
            }
            return email_address;
        }

        private string ValidatePhoneNumberRegex(string phone_number)
        {
            if (string.IsNullOrEmpty(phone_number))
            {
                phone_number = null;
            }
            else
            {
                if (System.Text.RegularExpressions.Regex.IsMatch(phone_number, "^[+][0-9]{0,3}[7-9]{1,2}[0-9]{0,7}$"))
                    return phone_number.ToUpper();
                else
                    throw new Exception(string.Format("Le numéro de téléphone {0} n'est pas valide\nUne numéro de téléphone valide doit respecter le format suivant : +243972727527 et n'utiliser que des chiffres 0 à 9 et et le + au début pour le code !!!", phone_number));
            }
            return phone_number;
        }
        #endregion

        #endregion CLSPERSONNE 
        #region  CLSUSB3
        public clsusb3 getClsusb3(object intid)
        {
            clsusb3 varclsusb3 = new clsusb3();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM usb3 WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsusb3.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsusb3.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsusb3.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsusb3.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsusb3.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsusb3.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'usb3' avec la classe 'clsusb3' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsusb3;
        }

        public List<clsusb3> getAllClsusb3(string criteria)
        {
            List<clsusb3> lstclsusb3 = new List<clsusb3>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_usb3_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsusb3 varclsusb3 = null;
                        while (dr.Read())
                        {
                            varclsusb3 = new clsusb3();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsusb3.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsusb3.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsusb3.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsusb3.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsusb3.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsusb3.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsusb3.Add(varclsusb3);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'usb3' avec la classe 'clsusb3' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsusb3;
        }

        public List<clsusb3> getAllClsusb3()
        {
            List<clsusb3> lstclsusb3 = new List<clsusb3>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM usb3 ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsusb3 varclsusb3 = null;
                        while (dr.Read())
                        {
                            varclsusb3 = new clsusb3();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsusb3.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsusb3.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsusb3.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsusb3.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsusb3.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsusb3.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsusb3.Add(varclsusb3);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'usb3' avec la classe 'clsusb3' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsusb3;
        }

        public int insertClsusb3(clsusb3 varclsusb3)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO usb3 ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsusb3.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsusb3.Valeur));
                    if (varclsusb3.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsusb3.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsusb3.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsusb3.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsusb3.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsusb3.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsusb3.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsusb3.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'usb3' avec la classe 'clsusb3' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsusb3(clsusb3 varclsusb3)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE usb3  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsusb3.Valeur));
                    if (varclsusb3.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsusb3.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsusb3.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsusb3.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsusb3.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsusb3.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsusb3.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsusb3.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsusb3.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'usb3' avec la classe 'clsusb3' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsusb3(clsusb3 varclsusb3)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM usb3  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsusb3.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'usb3' avec la classe 'clsusb3' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSUSB3 
        #region  CLSTYPE_LIEU_AFFECTATION
        public clstype_lieu_affectation getClstype_lieu_affectation(object intid)
        {
            clstype_lieu_affectation varclstype_lieu_affectation = new clstype_lieu_affectation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM type_lieu_affectation WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_lieu_affectation.Id = int.Parse(dr["id"].ToString());
                            varclstype_lieu_affectation.Designation = dr["designation"].ToString();
                            varclstype_lieu_affectation.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_lieu_affectation.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_lieu_affectation.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_lieu_affectation.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'type_lieu_affectation' avec la classe 'clstype_lieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstype_lieu_affectation;
        }

        public List<clstype_lieu_affectation> getAllClstype_lieu_affectation(string criteria)
        {
            List<clstype_lieu_affectation> lstclstype_lieu_affectation = new List<clstype_lieu_affectation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_type_lieu_affectationcriteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_lieu_affectation varclstype_lieu_affectation = null;
                        while (dr.Read())
                        {
                            varclstype_lieu_affectation = new clstype_lieu_affectation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_lieu_affectation.Id = int.Parse(dr["id"].ToString());
                            varclstype_lieu_affectation.Designation = dr["designation"].ToString();
                            varclstype_lieu_affectation.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_lieu_affectation.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_lieu_affectation.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_lieu_affectation.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_lieu_affectation.Add(varclstype_lieu_affectation);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'type_lieu_affectation' avec la classe 'clstype_lieu_affectation' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_lieu_affectation;
        }

        public List<clstype_lieu_affectation> getAllClstype_lieu_affectation()
        {
            List<clstype_lieu_affectation> lstclstype_lieu_affectation = new List<clstype_lieu_affectation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM type_lieu_affectation ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstype_lieu_affectation varclstype_lieu_affectation = null;
                        while (dr.Read())
                        {
                            varclstype_lieu_affectation = new clstype_lieu_affectation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstype_lieu_affectation.Id = int.Parse(dr["id"].ToString());
                            varclstype_lieu_affectation.Designation = dr["designation"].ToString();
                            varclstype_lieu_affectation.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstype_lieu_affectation.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstype_lieu_affectation.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstype_lieu_affectation.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstype_lieu_affectation.Add(varclstype_lieu_affectation);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'type_lieu_affectation' avec la classe 'clstype_lieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstype_lieu_affectation;
        }

        public int insertClstype_lieu_affectation(clstype_lieu_affectation varclstype_lieu_affectation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO type_lieu_affectation ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_lieu_affectation.Id));
                    if (varclstype_lieu_affectation.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_lieu_affectation.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_lieu_affectation.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_lieu_affectation.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_lieu_affectation.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_lieu_affectation.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_lieu_affectation.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_lieu_affectation.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_lieu_affectation.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_lieu_affectation.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'type_lieu_affectation' avec la classe 'clstype_lieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstype_lieu_affectation(clstype_lieu_affectation varclstype_lieu_affectation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE type_lieu_affectation  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclstype_lieu_affectation.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclstype_lieu_affectation.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclstype_lieu_affectation.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstype_lieu_affectation.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstype_lieu_affectation.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstype_lieu_affectation.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstype_lieu_affectation.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstype_lieu_affectation.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstype_lieu_affectation.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstype_lieu_affectation.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_lieu_affectation.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'type_lieu_affectation' avec la classe 'clstype_lieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstype_lieu_affectation(clstype_lieu_affectation varclstype_lieu_affectation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM type_lieu_affectation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstype_lieu_affectation.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'type_lieu_affectation' avec la classe 'clstype_lieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTYPE_LIEU_AFFECTATION 
        #region  CLSHDMI
        public clshdmi getClshdmi(object intid)
        {
            clshdmi varclshdmi = new clshdmi();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM hdmi WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclshdmi.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclshdmi.Valeur = int.Parse(dr["valeur"].ToString());
                            varclshdmi.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclshdmi.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclshdmi.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclshdmi.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'hdmi' avec la classe 'clshdmi' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclshdmi;
        }

        public List<clshdmi> getAllClshdmi(string criteria)
        {
            List<clshdmi> lstclshdmi = new List<clshdmi>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_hdmi_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clshdmi varclshdmi = null;
                        while (dr.Read())
                        {
                            varclshdmi = new clshdmi();
                            if (!dr["id"].ToString().Trim().Equals("")) varclshdmi.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclshdmi.Valeur = int.Parse(dr["valeur"].ToString());
                            varclshdmi.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclshdmi.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclshdmi.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclshdmi.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclshdmi.Add(varclshdmi);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'hdmi' avec la classe 'clshdmi' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclshdmi;
        }

        public List<clshdmi> getAllClshdmi()
        {
            List<clshdmi> lstclshdmi = new List<clshdmi>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM hdmi ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clshdmi varclshdmi = null;
                        while (dr.Read())
                        {
                            varclshdmi = new clshdmi();
                            if (!dr["id"].ToString().Trim().Equals("")) varclshdmi.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclshdmi.Valeur = int.Parse(dr["valeur"].ToString());
                            varclshdmi.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclshdmi.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclshdmi.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclshdmi.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclshdmi.Add(varclshdmi);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'hdmi' avec la classe 'clshdmi' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclshdmi;
        }

        public int insertClshdmi(clshdmi varclshdmi)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO hdmi ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclshdmi.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclshdmi.Valeur));
                    if (varclshdmi.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclshdmi.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclshdmi.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclshdmi.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclshdmi.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclshdmi.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclshdmi.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclshdmi.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'hdmi' avec la classe 'clshdmi' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClshdmi(clshdmi varclshdmi)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE hdmi  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclshdmi.Valeur));
                    if (varclshdmi.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclshdmi.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclshdmi.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclshdmi.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclshdmi.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclshdmi.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclshdmi.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclshdmi.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclshdmi.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'hdmi' avec la classe 'clshdmi' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClshdmi(clshdmi varclshdmi)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM hdmi  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclshdmi.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'hdmi' avec la classe 'clshdmi' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSHDMI 
        #region  CLSAC
        public clsAC getClsAC(object intid)
        {
            clsAC varclsAC = new clsAC();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM AC WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsAC.Id = int.Parse(dr["id"].ToString());
                            varclsAC.Code_str = dr["code_str"].ToString();
                            varclsAC.Designation = dr["designation"].ToString();
                            varclsAC.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsAC.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsAC.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsAC.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'AC' avec la classe 'clsAC' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsAC;
        }

        public List<clsAC> getAllClsAC(string criteria)
        {
            List<clsAC> lstclsAC = new List<clsAC>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_AC_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsAC varclsAC = null;
                        while (dr.Read())
                        {
                            varclsAC = new clsAC();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsAC.Id = int.Parse(dr["id"].ToString());
                            varclsAC.Code_str = dr["code_str"].ToString();
                            varclsAC.Designation = dr["designation"].ToString();
                            varclsAC.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsAC.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsAC.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsAC.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsAC.Add(varclsAC);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'AC' avec la classe 'clsAC' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsAC;
        }

        public List<clsAC> getAllClsAC()
        {
            List<clsAC> lstclsAC = new List<clsAC>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM AC ORDER BY designation DESC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsAC varclsAC = null;
                        while (dr.Read())
                        {
                            varclsAC = new clsAC();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsAC.Id = int.Parse(dr["id"].ToString());
                            varclsAC.Code_str = dr["code_str"].ToString();
                            varclsAC.Designation = dr["designation"].ToString();
                            varclsAC.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsAC.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsAC.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsAC.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsAC.Add(varclsAC);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'AC' avec la classe 'clsAC' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsAC;
        }

        public int insertClsAC(clsAC varclsAC)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO AC ( id,code_str,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@code_str,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsAC.Id));
                    if (varclsAC.Code_str != null) cmd.Parameters.Add(getParameter(cmd, "@code_str", DbType.String, 50, varclsAC.Code_str));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_str", DbType.String, 50, DBNull.Value));
                    if (varclsAC.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsAC.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsAC.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsAC.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsAC.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsAC.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsAC.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsAC.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsAC.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsAC.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'AC' avec la classe 'clsAC' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsAC(clsAC varclsAC)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE AC  SET code_str=@code_str,designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsAC.Code_str != null) cmd.Parameters.Add(getParameter(cmd, "@code_str", DbType.String, 50, varclsAC.Code_str));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_str", DbType.String, 50, DBNull.Value));
                    if (varclsAC.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsAC.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsAC.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsAC.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsAC.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsAC.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsAC.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsAC.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsAC.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsAC.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsAC.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'AC' avec la classe 'clsAC' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsAC(clsAC varclsAC)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM AC  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsAC.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'AC' avec la classe 'clsAC' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSAC 
        #region  CLSVGA
        public clsvga getClsvga(object intid)
        {
            clsvga varclsvga = new clsvga();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM vga WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvga.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsvga.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsvga.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsvga.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsvga.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsvga.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'vga' avec la classe 'clsvga' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsvga;
        }

        public List<clsvga> getAllClsvga(string criteria)
        {
            List<clsvga> lstclsvga = new List<clsvga>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_vga_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsvga varclsvga = null;
                        while (dr.Read())
                        {
                            varclsvga = new clsvga();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvga.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsvga.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsvga.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsvga.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsvga.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsvga.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsvga.Add(varclsvga);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'vga' avec la classe 'clsvga' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsvga;
        }

        public List<clsvga> getAllClsvga()
        {
            List<clsvga> lstclsvga = new List<clsvga>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM vga ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsvga varclsvga = null;
                        while (dr.Read())
                        {
                            varclsvga = new clsvga();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvga.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsvga.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsvga.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsvga.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsvga.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsvga.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsvga.Add(varclsvga);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'vga' avec la classe 'clsvga' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsvga;
        }

        public int insertClsvga(clsvga varclsvga)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO vga ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsvga.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsvga.Valeur));
                    if (varclsvga.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsvga.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsvga.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsvga.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsvga.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsvga.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsvga.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsvga.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'vga' avec la classe 'clsvga' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsvga(clsvga varclsvga)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE vga  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsvga.Valeur));
                    if (varclsvga.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsvga.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsvga.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsvga.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsvga.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsvga.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsvga.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsvga.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsvga.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'vga' avec la classe 'clsvga' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsvga(clsvga varclsvga)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM vga  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsvga.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'vga' avec la classe 'clsvga' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSVGA 
        #region  CLSOPTIO
        public clsoptio getClsoptio(object intid)
        {
            clsoptio varclsoptio = new clsoptio();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM optio WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsoptio.Id = int.Parse(dr["id"].ToString());
                            varclsoptio.Designation = dr["designation"].ToString();
                            varclsoptio.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsoptio.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsoptio.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsoptio.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'optio' avec la classe 'clsoptio' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsoptio;
        }

        public List<clsoptio> getAllClsoptio(string criteria)
        {
            List<clsoptio> lstclsoptio = new List<clsoptio>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_optio_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsoptio varclsoptio = null;
                        while (dr.Read())
                        {
                            varclsoptio = new clsoptio();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsoptio.Id = int.Parse(dr["id"].ToString());
                            varclsoptio.Designation = dr["designation"].ToString();
                            varclsoptio.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsoptio.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsoptio.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsoptio.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsoptio.Add(varclsoptio);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'optio' avec la classe 'clsoptio' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsoptio;
        }

        public List<clsoptio> getAllClsoptio()
        {
            List<clsoptio> lstclsoptio = new List<clsoptio>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM optio ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsoptio varclsoptio = null;
                        while (dr.Read())
                        {
                            varclsoptio = new clsoptio();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsoptio.Id = int.Parse(dr["id"].ToString());
                            varclsoptio.Designation = dr["designation"].ToString();
                            varclsoptio.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsoptio.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsoptio.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsoptio.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsoptio.Add(varclsoptio);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'optio' avec la classe 'clsoptio' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsoptio;
        }

        public int insertClsoptio(clsoptio varclsoptio)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO optio ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsoptio.Id));
                    if (varclsoptio.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsoptio.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsoptio.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsoptio.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsoptio.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsoptio.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsoptio.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsoptio.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsoptio.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsoptio.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'optio' avec la classe 'clsoptio' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsoptio(clsoptio varclsoptio)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE optio  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsoptio.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsoptio.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsoptio.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsoptio.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsoptio.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsoptio.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsoptio.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsoptio.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsoptio.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsoptio.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsoptio.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'optio' avec la classe 'clsoptio' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsoptio(clsoptio varclsoptio)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM optio  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsoptio.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'optio' avec la classe 'clsoptio' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSOPTIO 
        #region  CLSTENSION_BATTERIE
        public clstension_batterie getClstension_batterie(object intid)
        {
            clstension_batterie varclstension_batterie = new clstension_batterie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM tension_batterie WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstension_batterie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstension_batterie.Valeur = double.Parse(dr["valeur"].ToString());
                            varclstension_batterie.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstension_batterie.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstension_batterie.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstension_batterie.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'tension_batterie' avec la classe 'clstension_batterie' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstension_batterie;
        }

        public List<clstension_batterie> getAllClstension_batterie(string criteria)
        {
            List<clstension_batterie> lstclstension_batterie = new List<clstension_batterie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_tension_batterie_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstension_batterie varclstension_batterie = null;
                        while (dr.Read())
                        {
                            varclstension_batterie = new clstension_batterie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstension_batterie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstension_batterie.Valeur = double.Parse(dr["valeur"].ToString());
                            varclstension_batterie.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstension_batterie.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstension_batterie.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstension_batterie.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstension_batterie.Add(varclstension_batterie);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'tension_batterie' avec la classe 'clstension_batterie' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstension_batterie;
        }

        public List<clstension_batterie> getAllClstension_batterie()
        {
            List<clstension_batterie> lstclstension_batterie = new List<clstension_batterie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tension_batterie ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstension_batterie varclstension_batterie = null;
                        while (dr.Read())
                        {
                            varclstension_batterie = new clstension_batterie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstension_batterie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstension_batterie.Valeur = double.Parse(dr["valeur"].ToString());
                            varclstension_batterie.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstension_batterie.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstension_batterie.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstension_batterie.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstension_batterie.Add(varclstension_batterie);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'tension_batterie' avec la classe 'clstension_batterie' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstension_batterie;
        }

        public int insertClstension_batterie(clstension_batterie varclstension_batterie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tension_batterie ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstension_batterie.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclstension_batterie.Valeur));
                    if (varclstension_batterie.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstension_batterie.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstension_batterie.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstension_batterie.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstension_batterie.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstension_batterie.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstension_batterie.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstension_batterie.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'tension_batterie' avec la classe 'clstension_batterie' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstension_batterie(clstension_batterie varclstension_batterie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tension_batterie  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclstension_batterie.Valeur));
                    if (varclstension_batterie.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstension_batterie.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstension_batterie.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstension_batterie.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstension_batterie.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstension_batterie.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstension_batterie.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstension_batterie.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstension_batterie.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'tension_batterie' avec la classe 'clstension_batterie' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstension_batterie(clstension_batterie varclstension_batterie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tension_batterie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstension_batterie.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'tension_batterie' avec la classe 'clstension_batterie' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTENSION_BATTERIE 
        #region  CLSPROMOTION
        public clspromotion getClspromotion(object intid)
        {
            clspromotion varclspromotion = new clspromotion();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM promotion WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspromotion.Id = int.Parse(dr["id"].ToString());
                            varclspromotion.Designation = dr["designation"].ToString();
                            varclspromotion.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspromotion.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspromotion.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspromotion.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'promotion' avec la classe 'clspromotion' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclspromotion;
        }

        public List<clspromotion> getAllClspromotion(string criteria)
        {
            List<clspromotion> lstclspromotion = new List<clspromotion>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_promotion_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspromotion varclspromotion = null;
                        while (dr.Read())
                        {
                            varclspromotion = new clspromotion();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspromotion.Id = int.Parse(dr["id"].ToString());
                            varclspromotion.Designation = dr["designation"].ToString();
                            varclspromotion.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspromotion.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspromotion.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspromotion.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclspromotion.Add(varclspromotion);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'promotion' avec la classe 'clspromotion' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspromotion;
        }

        public List<clspromotion> getAllClspromotion()
        {
            List<clspromotion> lstclspromotion = new List<clspromotion>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM promotion ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspromotion varclspromotion = null;
                        while (dr.Read())
                        {
                            varclspromotion = new clspromotion();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspromotion.Id = int.Parse(dr["id"].ToString());
                            varclspromotion.Designation = dr["designation"].ToString();
                            varclspromotion.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspromotion.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspromotion.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspromotion.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclspromotion.Add(varclspromotion);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'promotion' avec la classe 'clspromotion' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspromotion;
        }

        public int insertClspromotion(clspromotion varclspromotion)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO promotion ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspromotion.Id));
                    if (varclspromotion.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclspromotion.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclspromotion.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspromotion.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspromotion.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspromotion.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspromotion.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspromotion.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspromotion.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspromotion.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'promotion' avec la classe 'clspromotion' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClspromotion(clspromotion varclspromotion)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE promotion  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclspromotion.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclspromotion.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclspromotion.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspromotion.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspromotion.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspromotion.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspromotion.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspromotion.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspromotion.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspromotion.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspromotion.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'promotion' avec la classe 'clspromotion' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClspromotion(clspromotion varclspromotion)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM promotion  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspromotion.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'promotion' avec la classe 'clspromotion' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSPROMOTION 
        #region  CLSTENSION_ADAPTATEUR
        public clstension_adaptateur getClstension_adaptateur(object intid)
        {
            clstension_adaptateur varclstension_adaptateur = new clstension_adaptateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM tension_adaptateur WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstension_adaptateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstension_adaptateur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclstension_adaptateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstension_adaptateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstension_adaptateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstension_adaptateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'tension_adaptateur' avec la classe 'clstension_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstension_adaptateur;
        }

        public List<clstension_adaptateur> getAllClstension_adaptateur(string criteria)
        {
            List<clstension_adaptateur> lstclstension_adaptateur = new List<clstension_adaptateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_tension_adaptateur_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstension_adaptateur varclstension_adaptateur = null;
                        while (dr.Read())
                        {
                            varclstension_adaptateur = new clstension_adaptateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstension_adaptateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstension_adaptateur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclstension_adaptateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstension_adaptateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstension_adaptateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstension_adaptateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstension_adaptateur.Add(varclstension_adaptateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'tension_adaptateur' avec la classe 'clstension_adaptateur' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstension_adaptateur;
        }

        public List<clstension_adaptateur> getAllClstension_adaptateur()
        {
            List<clstension_adaptateur> lstclstension_adaptateur = new List<clstension_adaptateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tension_adaptateur ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstension_adaptateur varclstension_adaptateur = null;
                        while (dr.Read())
                        {
                            varclstension_adaptateur = new clstension_adaptateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstension_adaptateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstension_adaptateur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclstension_adaptateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstension_adaptateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstension_adaptateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstension_adaptateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstension_adaptateur.Add(varclstension_adaptateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'tension_adaptateur' avec la classe 'clstension_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstension_adaptateur;
        }

        public int insertClstension_adaptateur(clstension_adaptateur varclstension_adaptateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tension_adaptateur ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstension_adaptateur.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclstension_adaptateur.Valeur));
                    if (varclstension_adaptateur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstension_adaptateur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstension_adaptateur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstension_adaptateur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstension_adaptateur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstension_adaptateur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstension_adaptateur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstension_adaptateur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'tension_adaptateur' avec la classe 'clstension_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstension_adaptateur(clstension_adaptateur varclstension_adaptateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tension_adaptateur  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclstension_adaptateur.Valeur));
                    if (varclstension_adaptateur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstension_adaptateur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstension_adaptateur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstension_adaptateur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstension_adaptateur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstension_adaptateur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstension_adaptateur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstension_adaptateur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstension_adaptateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'tension_adaptateur' avec la classe 'clstension_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstension_adaptateur(clstension_adaptateur varclstension_adaptateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tension_adaptateur  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstension_adaptateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'tension_adaptateur' avec la classe 'clstension_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTENSION_ADAPTATEUR 
        #region  CLSSECTION
        public clssection getClssection(object intid)
        {
            clssection varclssection = new clssection();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM section WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclssection.Id = int.Parse(dr["id"].ToString());
                            varclssection.Designation1 = dr["designation1"].ToString();
                            varclssection.Designation2 = dr["designation2"].ToString();
                            varclssection.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssection.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssection.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssection.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'section' avec la classe 'clssection' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclssection;
        }

        public List<clssection> getAllClssection(string criteria)
        {
            List<clssection> lstclssection = new List<clssection>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_section_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssection varclssection = null;
                        while (dr.Read())
                        {
                            varclssection = new clssection();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssection.Id = int.Parse(dr["id"].ToString());
                            varclssection.Designation1 = dr["designation1"].ToString();
                            varclssection.Designation2 = dr["designation2"].ToString();
                            varclssection.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssection.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssection.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssection.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclssection.Add(varclssection);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'section' avec la classe 'clssection' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclssection;
        }

        public List<clssection> getAllClssection()
        {
            List<clssection> lstclssection = new List<clssection>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM section ORDER BY designation1 ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssection varclssection = null;
                        while (dr.Read())
                        {
                            varclssection = new clssection();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssection.Id = int.Parse(dr["id"].ToString());
                            varclssection.Designation1 = dr["designation1"].ToString();
                            varclssection.Designation2 = dr["designation2"].ToString();
                            varclssection.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssection.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssection.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssection.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclssection.Add(varclssection);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'section' avec la classe 'clssection' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclssection;
        }

        public int insertClssection(clssection varclssection)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO section ( id,designation1,designation2,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation1,@designation2,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssection.Id));
                    if (varclssection.Designation1 != null) cmd.Parameters.Add(getParameter(cmd, "@designation1", DbType.String, 5, varclssection.Designation1));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation1", DbType.String, 5, DBNull.Value));
                    if (varclssection.Designation2 != null) cmd.Parameters.Add(getParameter(cmd, "@designation2", DbType.String, 30, varclssection.Designation2));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation2", DbType.String, 30, DBNull.Value));
                    if (varclssection.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclssection.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclssection.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclssection.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclssection.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclssection.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclssection.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclssection.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'section' avec la classe 'clssection' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClssection(clssection varclssection)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE section  SET designation1=@designation1,designation2=@designation2,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclssection.Designation1 != null) cmd.Parameters.Add(getParameter(cmd, "@designation1", DbType.String, 5, varclssection.Designation1));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation1", DbType.String, 5, DBNull.Value));
                    if (varclssection.Designation2 != null) cmd.Parameters.Add(getParameter(cmd, "@designation2", DbType.String, 30, varclssection.Designation2));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation2", DbType.String, 30, DBNull.Value));
                    if (varclssection.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclssection.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclssection.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclssection.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclssection.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclssection.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclssection.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclssection.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssection.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'section' avec la classe 'clssection' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClssection(clssection varclssection)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM section  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssection.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'section' avec la classe 'clssection' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSSECTION 
        #region  CLSPUISSANCE_ADAPTATEUR
        public clspuissance_adaptateur getClspuissance_adaptateur(object intid)
        {
            clspuissance_adaptateur varclspuissance_adaptateur = new clspuissance_adaptateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM puissance_adaptateur WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspuissance_adaptateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspuissance_adaptateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'puissance_adaptateur' avec la classe 'clspuissance_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclspuissance_adaptateur;
        }

        public List<clspuissance_adaptateur> getAllClspuissance_adaptateur(string criteria)
        {
            List<clspuissance_adaptateur> lstclspuissance_adaptateur = new List<clspuissance_adaptateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_puissance_adaptateur_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspuissance_adaptateur varclspuissance_adaptateur = null;
                        while (dr.Read())
                        {
                            varclspuissance_adaptateur = new clspuissance_adaptateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspuissance_adaptateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspuissance_adaptateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclspuissance_adaptateur.Add(varclspuissance_adaptateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'puissance_adaptateur' avec la classe 'clspuissance_adaptateur' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspuissance_adaptateur;
        }

        public List<clspuissance_adaptateur> getAllClspuissance_adaptateur()
        {
            List<clspuissance_adaptateur> lstclspuissance_adaptateur = new List<clspuissance_adaptateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM puissance_adaptateur ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspuissance_adaptateur varclspuissance_adaptateur = null;
                        while (dr.Read())
                        {
                            varclspuissance_adaptateur = new clspuissance_adaptateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspuissance_adaptateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspuissance_adaptateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspuissance_adaptateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclspuissance_adaptateur.Add(varclspuissance_adaptateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'puissance_adaptateur' avec la classe 'clspuissance_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspuissance_adaptateur;
        }

        public int insertClspuissance_adaptateur(clspuissance_adaptateur varclspuissance_adaptateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO puissance_adaptateur ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspuissance_adaptateur.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclspuissance_adaptateur.Valeur));
                    if (varclspuissance_adaptateur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspuissance_adaptateur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspuissance_adaptateur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspuissance_adaptateur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspuissance_adaptateur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspuissance_adaptateur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspuissance_adaptateur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspuissance_adaptateur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'puissance_adaptateur' avec la classe 'clspuissance_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClspuissance_adaptateur(clspuissance_adaptateur varclspuissance_adaptateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE puissance_adaptateur  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclspuissance_adaptateur.Valeur));
                    if (varclspuissance_adaptateur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspuissance_adaptateur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspuissance_adaptateur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspuissance_adaptateur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspuissance_adaptateur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspuissance_adaptateur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspuissance_adaptateur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspuissance_adaptateur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspuissance_adaptateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'puissance_adaptateur' avec la classe 'clspuissance_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClspuissance_adaptateur(clspuissance_adaptateur varclspuissance_adaptateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM puissance_adaptateur  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspuissance_adaptateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'puissance_adaptateur' avec la classe 'clspuissance_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSPUISSANCE_ADAPTATEUR 
        #region  CLSRETRAIT_MATERIEL
        public clsretrait_materiel getClsretrait_materiel(object intid)
        {
            clsretrait_materiel varclsretrait_materiel = new clsretrait_materiel();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM retrait_materiel WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsretrait_materiel.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsretrait_materiel.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_optio"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_optio = int.Parse(dr["id_optio"].ToString());
                            if (!dr["id_promotion"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_promotion = int.Parse(dr["id_promotion"].ToString());
                            if (!dr["id_section"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_section = int.Parse(dr["id_section"].ToString());
                            if (!dr["date_retrait"].ToString().Trim().Equals("")) varclsretrait_materiel.Date_retrait = DateTime.Parse(dr["date_retrait"].ToString());
                            if (!dr["retirer"].ToString().Trim().Equals("")) varclsretrait_materiel.Retirer = bool.Parse(dr["retirer"].ToString());
                            if (!dr["deposer"].ToString().Trim().Equals("")) varclsretrait_materiel.Deposer = bool.Parse(dr["deposer"].ToString());
                            varclsretrait_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsretrait_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsretrait_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsretrait_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'retrait_materiel' avec la classe 'clsretrait_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsretrait_materiel;
        }

        public List<clsretrait_materiel> getAllClsretrait_materiel(string criteria)
        {
            List<clsretrait_materiel> lstclsretrait_materiel = new List<clsretrait_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_retrait_materiel_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsretrait_materiel varclsretrait_materiel = null;
                        while (dr.Read())
                        {
                            varclsretrait_materiel = new clsretrait_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsretrait_materiel.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsretrait_materiel.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_optio"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_optio = int.Parse(dr["id_optio"].ToString());
                            if (!dr["id_promotion"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_promotion = int.Parse(dr["id_promotion"].ToString());
                            if (!dr["id_section"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_section = int.Parse(dr["id_section"].ToString());
                            if (!dr["date_retrait"].ToString().Trim().Equals("")) varclsretrait_materiel.Date_retrait = DateTime.Parse(dr["date_retrait"].ToString());
                            if (!dr["retirer"].ToString().Trim().Equals("")) varclsretrait_materiel.Retirer = bool.Parse(dr["retirer"].ToString());
                            if (!dr["deposer"].ToString().Trim().Equals("")) varclsretrait_materiel.Deposer = bool.Parse(dr["deposer"].ToString());
                            varclsretrait_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsretrait_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsretrait_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsretrait_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsretrait_materiel.Add(varclsretrait_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'retrait_materiel' avec la classe 'clsretrait_materiel' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsretrait_materiel;
        }

        public List<clsretrait_materiel> getAllClsretrait_materiel()
        {
            List<clsretrait_materiel> lstclsretrait_materiel = new List<clsretrait_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM retrait_materiel ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsretrait_materiel varclsretrait_materiel = null;
                        while (dr.Read())
                        {
                            varclsretrait_materiel = new clsretrait_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsretrait_materiel.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsretrait_materiel.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_optio"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_optio = int.Parse(dr["id_optio"].ToString());
                            if (!dr["id_promotion"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_promotion = int.Parse(dr["id_promotion"].ToString());
                            if (!dr["id_section"].ToString().Trim().Equals("")) varclsretrait_materiel.Id_section = int.Parse(dr["id_section"].ToString());
                            if (!dr["date_retrait"].ToString().Trim().Equals("")) varclsretrait_materiel.Date_retrait = DateTime.Parse(dr["date_retrait"].ToString());
                            if (!dr["retirer"].ToString().Trim().Equals("")) varclsretrait_materiel.Retirer = bool.Parse(dr["retirer"].ToString());
                            if (!dr["deposer"].ToString().Trim().Equals("")) varclsretrait_materiel.Deposer = bool.Parse(dr["deposer"].ToString());
                            varclsretrait_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsretrait_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsretrait_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsretrait_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsretrait_materiel.Add(varclsretrait_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'retrait_materiel' avec la classe 'clsretrait_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsretrait_materiel;
        }

        public int insertClsretrait_materiel(clsretrait_materiel varclsretrait_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO retrait_materiel ( id,id_personne,code_AC,id_optio,id_promotion,id_section,date_retrait,retirer,deposer,user_created,date_created,user_modified,date_modified ) VALUES (@id,@id_personne,@code_AC,@id_optio,@id_promotion,@id_section,@date_retrait,@retirer,@deposer,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsretrait_materiel.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsretrait_materiel.Id_personne));
                    if (varclsretrait_materiel.Code_ac != null) cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, varclsretrait_materiel.Code_ac));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, DBNull.Value));
                    if (varclsretrait_materiel.Id_optio.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_optio", DbType.Int32, 4, varclsretrait_materiel.Id_optio));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_optio", DbType.Int32, 4, DBNull.Value));
                    if (varclsretrait_materiel.Id_promotion.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_promotion", DbType.Int32, 4, varclsretrait_materiel.Id_promotion));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_promotion", DbType.Int32, 4, DBNull.Value));
                    if (varclsretrait_materiel.Id_section.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_section", DbType.Int32, 4, varclsretrait_materiel.Id_section));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_section", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@date_retrait", DbType.DateTime, 8, varclsretrait_materiel.Date_retrait));
                    cmd.Parameters.Add(getParameter(cmd, "@retirer", DbType.Boolean, 2, varclsretrait_materiel.Retirer));
                    if (varclsretrait_materiel.Deposer.HasValue) cmd.Parameters.Add(getParameter(cmd, "@deposer", DbType.Boolean, 2, varclsretrait_materiel.Deposer));
                    else cmd.Parameters.Add(getParameter(cmd, "@deposer", DbType.Boolean, 2, DBNull.Value));
                    if (varclsretrait_materiel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsretrait_materiel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsretrait_materiel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsretrait_materiel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsretrait_materiel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsretrait_materiel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsretrait_materiel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsretrait_materiel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'retrait_materiel' avec la classe 'clsretrait_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsretrait_materiel(clsretrait_materiel varclsretrait_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE retrait_materiel  SET id_personne=@id_personne,code_AC=@code_AC,id_optio=@id_optio,id_promotion=@id_promotion,id_section=@id_section,date_retrait=@date_retrait,retirer=@retirer,deposer=@deposer,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsretrait_materiel.Id_personne));
                    if (varclsretrait_materiel.Code_ac != null) cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, varclsretrait_materiel.Code_ac));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, DBNull.Value));
                    if (varclsretrait_materiel.Id_optio.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_optio", DbType.Int32, 4, varclsretrait_materiel.Id_optio));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_optio", DbType.Int32, 4, DBNull.Value));
                    if (varclsretrait_materiel.Id_promotion.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_promotion", DbType.Int32, 4, varclsretrait_materiel.Id_promotion));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_promotion", DbType.Int32, 4, DBNull.Value));
                    if (varclsretrait_materiel.Id_section.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_section", DbType.Int32, 4, varclsretrait_materiel.Id_section));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_section", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@date_retrait", DbType.DateTime, 8, varclsretrait_materiel.Date_retrait));
                    cmd.Parameters.Add(getParameter(cmd, "@retirer", DbType.Boolean, 2, varclsretrait_materiel.Retirer));
                    if (varclsretrait_materiel.Deposer.HasValue) cmd.Parameters.Add(getParameter(cmd, "@deposer", DbType.Boolean, 2, varclsretrait_materiel.Deposer));
                    else cmd.Parameters.Add(getParameter(cmd, "@deposer", DbType.Boolean, 2, DBNull.Value));
                    if (varclsretrait_materiel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsretrait_materiel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsretrait_materiel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsretrait_materiel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsretrait_materiel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsretrait_materiel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsretrait_materiel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsretrait_materiel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsretrait_materiel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'retrait_materiel' avec la classe 'clsretrait_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsretrait_materiel(clsretrait_materiel varclsretrait_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM retrait_materiel  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsretrait_materiel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'retrait_materiel' avec la classe 'clsretrait_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSRETRAIT_MATERIEL 
        #region  CLSINTENSITE_ADAPTATEUR
        public clsintensite_adaptateur getClsintensite_adaptateur(object intid)
        {
            clsintensite_adaptateur varclsintensite_adaptateur = new clsintensite_adaptateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM intensite_adaptateur WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsintensite_adaptateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsintensite_adaptateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'intensite_adaptateur' avec la classe 'clsintensite_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsintensite_adaptateur;
        }

        public List<clsintensite_adaptateur> getAllClsintensite_adaptateur(string criteria)
        {
            List<clsintensite_adaptateur> lstclsintensite_adaptateur = new List<clsintensite_adaptateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_intensite_adaptateur_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {                        clsintensite_adaptateur varclsintensite_adaptateur = null;
                        while (dr.Read())
                        {
                            varclsintensite_adaptateur = new clsintensite_adaptateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsintensite_adaptateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsintensite_adaptateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsintensite_adaptateur.Add(varclsintensite_adaptateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'intensite_adaptateur' avec la classe 'clsintensite_adaptateur' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsintensite_adaptateur;
        }

        public List<clsintensite_adaptateur> getAllClsintensite_adaptateur()
        {
            List<clsintensite_adaptateur> lstclsintensite_adaptateur = new List<clsintensite_adaptateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM intensite_adaptateur ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsintensite_adaptateur varclsintensite_adaptateur = null;
                        while (dr.Read())
                        {
                            varclsintensite_adaptateur = new clsintensite_adaptateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsintensite_adaptateur.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsintensite_adaptateur.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsintensite_adaptateur.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsintensite_adaptateur.Add(varclsintensite_adaptateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'intensite_adaptateur' avec la classe 'clsintensite_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsintensite_adaptateur;
        }

        public int insertClsintensite_adaptateur(clsintensite_adaptateur varclsintensite_adaptateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO intensite_adaptateur ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsintensite_adaptateur.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclsintensite_adaptateur.Valeur));
                    if (varclsintensite_adaptateur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsintensite_adaptateur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsintensite_adaptateur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsintensite_adaptateur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsintensite_adaptateur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsintensite_adaptateur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsintensite_adaptateur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsintensite_adaptateur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'intensite_adaptateur' avec la classe 'clsintensite_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsintensite_adaptateur(clsintensite_adaptateur varclsintensite_adaptateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "UPDATE intensite_adaptateur  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclsintensite_adaptateur.Valeur));
                    if (varclsintensite_adaptateur.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsintensite_adaptateur.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsintensite_adaptateur.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsintensite_adaptateur.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsintensite_adaptateur.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsintensite_adaptateur.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsintensite_adaptateur.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsintensite_adaptateur.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsintensite_adaptateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'intensite_adaptateur' avec la classe 'clsintensite_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsintensite_adaptateur(clsintensite_adaptateur varclsintensite_adaptateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "DELETE FROM intensite_adaptateur  WHERE  1=1  AND id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsintensite_adaptateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'intensite_adaptateur' avec la classe 'clsintensite_adaptateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSINTENSITE_ADAPTATEUR 
        #region  CLSPUISSANCE
        public clspuissance getClspuissance(object intid)
        {
            clspuissance varclspuissance = new clspuissance();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM puissance WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspuissance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspuissance.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspuissance.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspuissance.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspuissance.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspuissance.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'puissance' avec la classe 'clspuissance' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclspuissance;
        }

        public List<clspuissance> getAllClspuissance(string criteria)
        {
            List<clspuissance> lstclspuissance = new List<clspuissance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_puissance_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspuissance varclspuissance = null;
                        while (dr.Read())
                        {
                            varclspuissance = new clspuissance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspuissance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspuissance.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspuissance.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspuissance.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspuissance.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspuissance.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclspuissance.Add(varclspuissance);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'puissance' avec la classe 'clspuissance' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspuissance;
        }

        public List<clspuissance> getAllClspuissance()
        {
            List<clspuissance> lstclspuissance = new List<clspuissance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM puissance ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspuissance varclspuissance = null;
                        while (dr.Read())
                        {
                            varclspuissance = new clspuissance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspuissance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspuissance.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspuissance.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspuissance.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspuissance.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspuissance.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclspuissance.Add(varclspuissance);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'puissance' avec la classe 'clspuissance' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspuissance;
        }

        public int insertClspuissance(clspuissance varclspuissance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO puissance ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspuissance.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclspuissance.Valeur));
                    if (varclspuissance.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspuissance.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspuissance.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspuissance.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspuissance.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspuissance.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspuissance.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspuissance.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'puissance' avec la classe 'clspuissance' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClspuissance(clspuissance varclspuissance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE puissance  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclspuissance.Valeur));
                    if (varclspuissance.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspuissance.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspuissance.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspuissance.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspuissance.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspuissance.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspuissance.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspuissance.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspuissance.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'puissance' avec la classe 'clspuissance' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClspuissance(clspuissance varclspuissance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM puissance  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspuissance.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'puissance' avec la classe 'clspuissance' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSPUISSANCE 
        #region  CLSDETAIL_RETRAIT_MATERIEL
        public clsdetail_retrait_materiel getClsdetail_retrait_materiel(object intid)
        {
            clsdetail_retrait_materiel varclsdetail_retrait_materiel = new clsdetail_retrait_materiel();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM detail_retrait_materiel WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_retrait_materiel"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Id_retrait_materiel = int.Parse(dr["id_retrait_materiel"].ToString());
                            if (!dr["id_materiel"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Id_materiel = int.Parse(dr["id_materiel"].ToString());
                            varclsdetail_retrait_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsdetail_retrait_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'detail_retrait_materiel' avec la classe 'clsdetail_retrait_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsdetail_retrait_materiel;
        }

        public List<clsdetail_retrait_materiel> getAllClsdetail_retrait_materiel(string criteria)
        {
            List<clsdetail_retrait_materiel> lstclsdetail_retrait_materiel = new List<clsdetail_retrait_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_detail_retrait_materiel_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdetail_retrait_materiel varclsdetail_retrait_materiel = null;
                        while (dr.Read())
                        {
                            varclsdetail_retrait_materiel = new clsdetail_retrait_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_retrait_materiel"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Id_retrait_materiel = int.Parse(dr["id_retrait_materiel"].ToString());
                            if (!dr["id_materiel"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Id_materiel = int.Parse(dr["id_materiel"].ToString());
                            varclsdetail_retrait_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsdetail_retrait_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsdetail_retrait_materiel.Add(varclsdetail_retrait_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'detail_retrait_materiel' avec la classe 'clsdetail_retrait_materiel' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsdetail_retrait_materiel;
        }

        public List<clsdetail_retrait_materiel> getAllClsdetail_retrait_materiel()
        {
            List<clsdetail_retrait_materiel> lstclsdetail_retrait_materiel = new List<clsdetail_retrait_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM detail_retrait_materiel ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdetail_retrait_materiel varclsdetail_retrait_materiel = null;
                        while (dr.Read())
                        {
                            varclsdetail_retrait_materiel = new clsdetail_retrait_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_retrait_materiel"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Id_retrait_materiel = int.Parse(dr["id_retrait_materiel"].ToString());
                            if (!dr["id_materiel"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Id_materiel = int.Parse(dr["id_materiel"].ToString());
                            varclsdetail_retrait_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsdetail_retrait_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsdetail_retrait_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsdetail_retrait_materiel.Add(varclsdetail_retrait_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'detail_retrait_materiel' avec la classe 'clsdetail_retrait_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsdetail_retrait_materiel;
        }

        public int insertClsdetail_retrait_materiel(clsdetail_retrait_materiel varclsdetail_retrait_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO detail_retrait_materiel ( id,id_retrait_materiel,id_materiel,user_created,date_created,user_modified,date_modified ) VALUES (@id,@id_retrait_materiel,@id_materiel,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdetail_retrait_materiel.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@id_retrait_materiel", DbType.Int32, 4, varclsdetail_retrait_materiel.Id_retrait_materiel));
                    cmd.Parameters.Add(getParameter(cmd, "@id_materiel", DbType.Int32, 4, varclsdetail_retrait_materiel.Id_materiel));
                    if (varclsdetail_retrait_materiel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsdetail_retrait_materiel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsdetail_retrait_materiel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsdetail_retrait_materiel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdetail_retrait_materiel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsdetail_retrait_materiel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsdetail_retrait_materiel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsdetail_retrait_materiel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'detail_retrait_materiel' avec la classe 'clsdetail_retrait_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsdetail_retrait_materiel(clsdetail_retrait_materiel varclsdetail_retrait_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE detail_retrait_materiel  SET id_retrait_materiel=@id_retrait_materiel,id_materiel=@id_materiel,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_retrait_materiel", DbType.Int32, 4, varclsdetail_retrait_materiel.Id_retrait_materiel));
                    cmd.Parameters.Add(getParameter(cmd, "@id_materiel", DbType.Int32, 4, varclsdetail_retrait_materiel.Id_materiel));
                    if (varclsdetail_retrait_materiel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsdetail_retrait_materiel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsdetail_retrait_materiel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsdetail_retrait_materiel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdetail_retrait_materiel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsdetail_retrait_materiel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsdetail_retrait_materiel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsdetail_retrait_materiel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdetail_retrait_materiel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'detail_retrait_materiel' avec la classe 'clsdetail_retrait_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsdetail_retrait_materiel(clsdetail_retrait_materiel varclsdetail_retrait_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM detail_retrait_materiel  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdetail_retrait_materiel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'detail_retrait_materiel' avec la classe 'clsdetail_retrait_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSDETAIL_RETRAIT_MATERIEL 
        #region  CLSINTENSITE
        public clsintensite getClsintensite(object intid)
        {
            clsintensite varclsintensite = new clsintensite();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM intensite WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsintensite.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsintensite.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsintensite.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsintensite.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsintensite.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsintensite.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'intensite' avec la classe 'clsintensite' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsintensite;
        }

        public List<clsintensite> getAllClsintensite(string criteria)
        {
            List<clsintensite> lstclsintensite = new List<clsintensite>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_intensite_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsintensite varclsintensite = null;
                        while (dr.Read())
                        {
                            varclsintensite = new clsintensite();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsintensite.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsintensite.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsintensite.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsintensite.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsintensite.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsintensite.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsintensite.Add(varclsintensite);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'intensite' avec la classe 'clsintensite' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsintensite;
        }

        public List<clsintensite> getAllClsintensite()
        {
            List<clsintensite> lstclsintensite = new List<clsintensite>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM intensite ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsintensite varclsintensite = null;
                        while (dr.Read())
                        {
                            varclsintensite = new clsintensite();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsintensite.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsintensite.Valeur = double.Parse(dr["valeur"].ToString());
                            varclsintensite.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsintensite.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsintensite.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsintensite.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsintensite.Add(varclsintensite);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'intensite' avec la classe 'clsintensite' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsintensite;
        }

        public int insertClsintensite(clsintensite varclsintensite)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO intensite ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsintensite.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclsintensite.Valeur));
                    if (varclsintensite.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsintensite.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsintensite.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsintensite.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsintensite.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsintensite.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsintensite.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsintensite.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'intensite' avec la classe 'clsintensite' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsintensite(clsintensite varclsintensite)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE intensite  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclsintensite.Valeur));
                    if (varclsintensite.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsintensite.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsintensite.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsintensite.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsintensite.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsintensite.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsintensite.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsintensite.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsintensite.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'intensite' avec la classe 'clsintensite' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsintensite(clsintensite varclsintensite)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM intensite  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsintensite.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'intensite' avec la classe 'clsintensite' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSINTENSITE 
        #region  CLSPAGE_PAR_MINUTE
        public clspage_par_minute getClspage_par_minute(object intid)
        {
            clspage_par_minute varclspage_par_minute = new clspage_par_minute();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM page_par_minute WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspage_par_minute.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspage_par_minute.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspage_par_minute.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspage_par_minute.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspage_par_minute.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspage_par_minute.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'page_par_minute' avec la classe 'clspage_par_minute' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclspage_par_minute;
        }

        public List<clspage_par_minute> getAllClspage_par_minute(string criteria)
        {
            List<clspage_par_minute> lstclspage_par_minute = new List<clspage_par_minute>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_page_par_minute_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspage_par_minute varclspage_par_minute = null;
                        while (dr.Read())
                        {
                            varclspage_par_minute = new clspage_par_minute();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspage_par_minute.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspage_par_minute.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspage_par_minute.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspage_par_minute.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspage_par_minute.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspage_par_minute.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclspage_par_minute.Add(varclspage_par_minute);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'page_par_minute' avec la classe 'clspage_par_minute' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspage_par_minute;
        }

        public List<clspage_par_minute> getAllClspage_par_minute()
        {
            List<clspage_par_minute> lstclspage_par_minute = new List<clspage_par_minute>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM page_par_minute ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspage_par_minute varclspage_par_minute = null;
                        while (dr.Read())
                        {
                            varclspage_par_minute = new clspage_par_minute();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspage_par_minute.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclspage_par_minute.Valeur = double.Parse(dr["valeur"].ToString());
                            varclspage_par_minute.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclspage_par_minute.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclspage_par_minute.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclspage_par_minute.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclspage_par_minute.Add(varclspage_par_minute);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'page_par_minute' avec la classe 'clspage_par_minute' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclspage_par_minute;
        }

        public int insertClspage_par_minute(clspage_par_minute varclspage_par_minute)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO page_par_minute ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspage_par_minute.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclspage_par_minute.Valeur));
                    if (varclspage_par_minute.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspage_par_minute.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspage_par_minute.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspage_par_minute.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspage_par_minute.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspage_par_minute.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspage_par_minute.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspage_par_minute.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'page_par_minute' avec la classe 'clspage_par_minute' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClspage_par_minute(clspage_par_minute varclspage_par_minute)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE page_par_minute  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Single, 4, varclspage_par_minute.Valeur));
                    if (varclspage_par_minute.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclspage_par_minute.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclspage_par_minute.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclspage_par_minute.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclspage_par_minute.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclspage_par_minute.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclspage_par_minute.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclspage_par_minute.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspage_par_minute.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'page_par_minute' avec la classe 'clspage_par_minute' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClspage_par_minute(clspage_par_minute varclspage_par_minute)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM page_par_minute  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspage_par_minute.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'page_par_minute' avec la classe 'clspage_par_minute' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSPAGE_PAR_MINUTE 
        #region  CLSSIGNATAIRE
        public clssignataire getClssignataire(object intid)
        {
            clssignataire varclssignataire = new clssignataire();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM signataire WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclssignataire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclssignataire.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclssignataire.Code_ac = dr["code_AC"].ToString();
                            if (!dr["signature_specimen"].ToString().Trim().Equals("")) varclssignataire.Signature_specimen = (Byte[])dr["signature_specimen"];
                            varclssignataire.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssignataire.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssignataire.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssignataire.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'signataire' avec la classe 'clssignataire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclssignataire;
        }

        public List<clssignataire> getAllClssignataire(string criteria)
        {
            List<clssignataire> lstclssignataire = new List<clssignataire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_signataire_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssignataire varclssignataire = null;
                        while (dr.Read())
                        {
                            varclssignataire = new clssignataire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssignataire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclssignataire.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclssignataire.Code_ac = dr["code_AC"].ToString();
                            if (!dr["signature_specimen"].ToString().Trim().Equals("")) varclssignataire.Signature_specimen = (Byte[])dr["signature_specimen"];
                            varclssignataire.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssignataire.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssignataire.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssignataire.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclssignataire.Add(varclssignataire);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'signataire' avec la classe 'clssignataire' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclssignataire;
        }

        public List<clssignataire> getAllClssignataire()
        {
            List<clssignataire> lstclssignataire = new List<clssignataire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM signataire ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssignataire varclssignataire = null;
                        while (dr.Read())
                        {
                            varclssignataire = new clssignataire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssignataire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclssignataire.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclssignataire.Code_ac = dr["code_AC"].ToString();
                            if (!dr["signature_specimen"].ToString().Trim().Equals("")) varclssignataire.Signature_specimen = (Byte[])dr["signature_specimen"];
                            varclssignataire.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssignataire.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssignataire.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssignataire.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclssignataire.Add(varclssignataire);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'signataire' avec la classe 'clssignataire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclssignataire;
        }

        public int insertClssignataire(clssignataire varclssignataire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO signataire ( id,id_personne,code_AC,signature_specimen,user_created,date_created,user_modified,date_modified ) VALUES (@id,@id_personne,@code_AC,@signature_specimen,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssignataire.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclssignataire.Id_personne));
                    if (varclssignataire.Code_ac != null) cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, varclssignataire.Code_ac));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, DBNull.Value));
                    if (varclssignataire.Signature_specimen != null) cmd.Parameters.Add(getParameter(cmd, "@signature_specimen", DbType.Binary, Int32.MaxValue, varclssignataire.Signature_specimen));
                    else cmd.Parameters.Add(getParameter(cmd, "@signature_specimen", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    if (varclssignataire.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclssignataire.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclssignataire.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclssignataire.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclssignataire.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclssignataire.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclssignataire.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclssignataire.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'signataire' avec la classe 'clssignataire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClssignataire(clssignataire varclssignataire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE signataire  SET id_personne=@id_personne,code_AC=@code_AC,signature_specimen=@signature_specimen,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclssignataire.Id_personne));
                    if (varclssignataire.Code_ac != null) cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, varclssignataire.Code_ac));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, DBNull.Value));
                    if (varclssignataire.Signature_specimen != null) cmd.Parameters.Add(getParameter(cmd, "@signature_specimen", DbType.Binary, Int32.MaxValue, varclssignataire.Signature_specimen));
                    else cmd.Parameters.Add(getParameter(cmd, "@signature_specimen", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    if (varclssignataire.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclssignataire.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclssignataire.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclssignataire.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclssignataire.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclssignataire.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclssignataire.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclssignataire.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssignataire.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'signataire' avec la classe 'clssignataire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClssignataire(clssignataire varclssignataire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM signataire  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssignataire.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'signataire' avec la classe 'clssignataire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSSIGNATAIRE 
        #region  CLSTENSION_ALIMENTATION
        public clstension_alimentation getClstension_alimentation(object intid)
        {
            clstension_alimentation varclstension_alimentation = new clstension_alimentation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM tension_alimentation WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstension_alimentation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstension_alimentation.Valeur = int.Parse(dr["valeur"].ToString());
                            varclstension_alimentation.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstension_alimentation.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstension_alimentation.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstension_alimentation.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'tension_alimentation' avec la classe 'clstension_alimentation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclstension_alimentation;
        }

        public List<clstension_alimentation> getAllClstension_alimentation(string criteria)
        {
            List<clstension_alimentation> lstclstension_alimentation = new List<clstension_alimentation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_tension_alimentation_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstension_alimentation varclstension_alimentation = null;
                        while (dr.Read())
                        {
                            varclstension_alimentation = new clstension_alimentation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstension_alimentation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstension_alimentation.Valeur = int.Parse(dr["valeur"].ToString());
                            varclstension_alimentation.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstension_alimentation.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstension_alimentation.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstension_alimentation.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstension_alimentation.Add(varclstension_alimentation);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'tension_alimentation' avec la classe 'clstension_alimentation' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstension_alimentation;
        }

        public List<clstension_alimentation> getAllClstension_alimentation()
        {
            List<clstension_alimentation> lstclstension_alimentation = new List<clstension_alimentation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tension_alimentation ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstension_alimentation varclstension_alimentation = null;
                        while (dr.Read())
                        {
                            varclstension_alimentation = new clstension_alimentation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstension_alimentation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclstension_alimentation.Valeur = int.Parse(dr["valeur"].ToString());
                            varclstension_alimentation.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclstension_alimentation.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclstension_alimentation.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclstension_alimentation.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclstension_alimentation.Add(varclstension_alimentation);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'tension_alimentation' avec la classe 'clstension_alimentation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstension_alimentation;
        }

        public int insertClstension_alimentation(clstension_alimentation varclstension_alimentation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tension_alimentation ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstension_alimentation.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclstension_alimentation.Valeur));
                    if (varclstension_alimentation.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstension_alimentation.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstension_alimentation.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstension_alimentation.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstension_alimentation.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstension_alimentation.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstension_alimentation.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstension_alimentation.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'tension_alimentation' avec la classe 'clstension_alimentation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClstension_alimentation(clstension_alimentation varclstension_alimentation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tension_alimentation  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclstension_alimentation.Valeur));
                    if (varclstension_alimentation.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclstension_alimentation.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclstension_alimentation.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclstension_alimentation.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclstension_alimentation.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclstension_alimentation.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclstension_alimentation.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclstension_alimentation.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstension_alimentation.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'tension_alimentation' avec la classe 'clstension_alimentation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClstension_alimentation(clstension_alimentation varclstension_alimentation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tension_alimentation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstension_alimentation.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'tension_alimentation' avec la classe 'clstension_alimentation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSTENSION_ALIMENTATION 
        #region  CLSSALLE
        public clssalle getClssalle(object intid)
        {
            clssalle varclssalle = new clssalle();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM salle WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclssalle.Id = int.Parse(dr["id"].ToString());
                            varclssalle.Designation = dr["designation"].ToString();
                            varclssalle.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssalle.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssalle.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssalle.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'salle' avec la classe 'clssalle' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclssalle;
        }

        public List<clssalle> getAllClssalle(string criteria)
        {
            List<clssalle> lstclssalle = new List<clssalle>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_salle_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssalle varclssalle = null;
                        while (dr.Read())
                        {
                            varclssalle = new clssalle();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssalle.Id = int.Parse(dr["id"].ToString());
                            varclssalle.Designation = dr["designation"].ToString();
                            varclssalle.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssalle.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssalle.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssalle.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclssalle.Add(varclssalle);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'salle' avec la classe 'clssalle' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclssalle;
        }

        public List<clssalle> getAllClssalle()
        {
            List<clssalle> lstclssalle = new List<clssalle>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM salle ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssalle varclssalle = null;
                        while (dr.Read())
                        {
                            varclssalle = new clssalle();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssalle.Id = int.Parse(dr["id"].ToString());
                            varclssalle.Designation = dr["designation"].ToString();
                            varclssalle.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssalle.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssalle.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssalle.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclssalle.Add(varclssalle);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'salle' avec la classe 'clssalle' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclssalle;
        }

        public int insertClssalle(clssalle varclssalle)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO salle ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssalle.Id));
                    if (varclssalle.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclssalle.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclssalle.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclssalle.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclssalle.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclssalle.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclssalle.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclssalle.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclssalle.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclssalle.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'salle' avec la classe 'clssalle' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClssalle(clssalle varclssalle)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE salle  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclssalle.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclssalle.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclssalle.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclssalle.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclssalle.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclssalle.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclssalle.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclssalle.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclssalle.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclssalle.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssalle.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'salle' avec la classe 'clssalle' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClssalle(clssalle varclssalle)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM salle  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssalle.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'salle' avec la classe 'clssalle' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSSALLE 
        #region  CLSUSB
        public clsusb getClsusb(object intid)
        {
            clsusb varclsusb = new clsusb();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM usb WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsusb.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsusb.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsusb.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsusb.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsusb.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsusb.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'usb' avec la classe 'clsusb' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsusb;
        }

        public List<clsusb> getAllClsusb(string criteria)
        {
            List<clsusb> lstclsusb = new List<clsusb>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_usb_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsusb varclsusb = null;
                        while (dr.Read())
                        {
                            varclsusb = new clsusb();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsusb.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsusb.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsusb.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsusb.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsusb.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsusb.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsusb.Add(varclsusb);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'usb' avec la classe 'clsusb' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsusb;
        }

        public List<clsusb> getAllClsusb()
        {
            List<clsusb> lstclsusb = new List<clsusb>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM usb ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsusb varclsusb = null;
                        while (dr.Read())
                        {
                            varclsusb = new clsusb();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsusb.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsusb.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsusb.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsusb.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsusb.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsusb.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsusb.Add(varclsusb);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'usb' avec la classe 'clsusb' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsusb;
        }

        public int insertClsusb(clsusb varclsusb)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO usb ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsusb.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsusb.Valeur));
                    if (varclsusb.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsusb.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsusb.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsusb.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsusb.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsusb.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsusb.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsusb.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'usb' avec la classe 'clsusb' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsusb(clsusb varclsusb)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE usb  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsusb.Valeur));
                    if (varclsusb.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsusb.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsusb.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsusb.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsusb.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsusb.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsusb.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsusb.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsusb.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'usb' avec la classe 'clsusb' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsusb(clsusb varclsusb)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM usb  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsusb.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'usb' avec la classe 'clsusb' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSUSB 
        #region  CLSFONCTION
        public clsfonction getClsfonction(object intid)
        {
            clsfonction varclsfonction = new clsfonction();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM fonction WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfonction.Id = int.Parse(dr["id"].ToString());
                            varclsfonction.Designation = dr["designation"].ToString();
                            varclsfonction.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfonction.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfonction.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfonction.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'fonction' avec la classe 'clsfonction' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsfonction;
        }

        public List<clsfonction> getAllClsfonction(string criteria)
        {
            List<clsfonction> lstclsfonction = new List<clsfonction>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_fonction_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfonction varclsfonction = null;
                        while (dr.Read())
                        {
                            varclsfonction = new clsfonction();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfonction.Id = int.Parse(dr["id"].ToString());
                            varclsfonction.Designation = dr["designation"].ToString();
                            varclsfonction.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfonction.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfonction.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfonction.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsfonction.Add(varclsfonction);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'fonction' avec la classe 'clsfonction' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsfonction;
        }

        public List<clsfonction> getAllClsfonction()
        {
            List<clsfonction> lstclsfonction = new List<clsfonction>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM fonction ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfonction varclsfonction = null;
                        while (dr.Read())
                        {
                            varclsfonction = new clsfonction();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfonction.Id = int.Parse(dr["id"].ToString());
                            varclsfonction.Designation = dr["designation"].ToString();
                            varclsfonction.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfonction.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfonction.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfonction.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsfonction.Add(varclsfonction);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'fonction' avec la classe 'clsfonction' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsfonction;
        }

        public int insertClsfonction(clsfonction varclsfonction)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO fonction ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfonction.Id));
                    if (varclsfonction.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsfonction.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsfonction.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsfonction.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsfonction.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsfonction.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsfonction.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsfonction.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsfonction.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsfonction.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'fonction' avec la classe 'clsfonction' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsfonction(clsfonction varclsfonction)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE fonction  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclsfonction.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsfonction.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclsfonction.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsfonction.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsfonction.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsfonction.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsfonction.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsfonction.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsfonction.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsfonction.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfonction.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'fonction' avec la classe 'clsfonction' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsfonction(clsfonction varclsfonction)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM fonction  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfonction.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'fonction' avec la classe 'clsfonction' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSFONCTION 
        #region  CLSMEMOIRE
        public clsmemoire getClsmemoire(object intid)
        {
            clsmemoire varclsmemoire = new clsmemoire();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM memoire WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmemoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsmemoire.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsmemoire.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmemoire.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmemoire.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmemoire.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'memoire' avec la classe 'clsmemoire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsmemoire;
        }

        public List<clsmemoire> getAllClsmemoire(string criteria)
        {
            List<clsmemoire> lstclsmemoire = new List<clsmemoire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_memoire_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmemoire varclsmemoire = null;
                        while (dr.Read())
                        {
                            varclsmemoire = new clsmemoire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmemoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsmemoire.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsmemoire.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmemoire.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmemoire.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmemoire.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsmemoire.Add(varclsmemoire);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'memoire' avec la classe 'clsmemoire' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmemoire;
        }

        public List<clsmemoire> getAllClsmemoire()
        {
            List<clsmemoire> lstclsmemoire = new List<clsmemoire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM memoire ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmemoire varclsmemoire = null;
                        while (dr.Read())
                        {
                            varclsmemoire = new clsmemoire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmemoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsmemoire.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsmemoire.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmemoire.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmemoire.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmemoire.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsmemoire.Add(varclsmemoire);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'memoire' avec la classe 'clsmemoire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmemoire;
        }

        public int insertClsmemoire(clsmemoire varclsmemoire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO memoire ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmemoire.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsmemoire.Valeur));
                    if (varclsmemoire.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsmemoire.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsmemoire.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsmemoire.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmemoire.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsmemoire.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsmemoire.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsmemoire.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'memoire' avec la classe 'clsmemoire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsmemoire(clsmemoire varclsmemoire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE memoire  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsmemoire.Valeur));
                    if (varclsmemoire.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsmemoire.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsmemoire.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsmemoire.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmemoire.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsmemoire.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsmemoire.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsmemoire.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmemoire.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'memoire' avec la classe 'clsmemoire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsmemoire(clsmemoire varclsmemoire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM memoire  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmemoire.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'memoire' avec la classe 'clsmemoire' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSMEMOIRE 
        #region  CLSLIEU_AFFECTATION
        public clslieu_affectation getClslieu_affectation(object intid)
        {
            clslieu_affectation varclslieu_affectation = new clslieu_affectation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM lieu_affectation WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclslieu_affectation.Id = int.Parse(dr["id"].ToString());
                            varclslieu_affectation.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_type_lieu_affectation"].ToString().Trim().Equals("")) varclslieu_affectation.Id_type_lieu_affectation = int.Parse(dr["id_type_lieu_affectation"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclslieu_affectation.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_fonction"].ToString().Trim().Equals("")) varclslieu_affectation.Id_fonction = int.Parse(dr["id_fonction"].ToString());
                            varclslieu_affectation.Designation = dr["designation"].ToString();
                            if (!dr["date_affectation"].ToString().Trim().Equals("")) varclslieu_affectation.Date_affectation = DateTime.Parse(dr["date_affectation"].ToString());
                            varclslieu_affectation.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclslieu_affectation.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclslieu_affectation.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclslieu_affectation.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'lieu_affectation' avec la classe 'clslieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclslieu_affectation;
        }

        public List<clslieu_affectation> getAllClslieu_affectation(string criteria)
        {
            List<clslieu_affectation> lstclslieu_affectation = new List<clslieu_affectation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_lieu_affectation_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clslieu_affectation varclslieu_affectation = null;
                        while (dr.Read())
                        {
                            varclslieu_affectation = new clslieu_affectation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclslieu_affectation.Id = int.Parse(dr["id"].ToString());
                            varclslieu_affectation.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_type_lieu_affectation"].ToString().Trim().Equals("")) varclslieu_affectation.Id_type_lieu_affectation = int.Parse(dr["id_type_lieu_affectation"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclslieu_affectation.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_fonction"].ToString().Trim().Equals("")) varclslieu_affectation.Id_fonction = int.Parse(dr["id_fonction"].ToString());
                            varclslieu_affectation.Designation = dr["designation"].ToString();
                            if (!dr["date_affectation"].ToString().Trim().Equals("")) varclslieu_affectation.Date_affectation = DateTime.Parse(dr["date_affectation"].ToString());
                            varclslieu_affectation.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclslieu_affectation.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclslieu_affectation.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclslieu_affectation.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclslieu_affectation.Add(varclslieu_affectation);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'lieu_affectation' avec la classe 'clslieu_affectation' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclslieu_affectation;
        }

        public List<clslieu_affectation> getAllClslieu_affectation()
        {
            List<clslieu_affectation> lstclslieu_affectation = new List<clslieu_affectation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM lieu_affectation ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clslieu_affectation varclslieu_affectation = null;
                        while (dr.Read())
                        {
                            varclslieu_affectation = new clslieu_affectation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclslieu_affectation.Id = int.Parse(dr["id"].ToString());
                            varclslieu_affectation.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_type_lieu_affectation"].ToString().Trim().Equals("")) varclslieu_affectation.Id_type_lieu_affectation = int.Parse(dr["id_type_lieu_affectation"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclslieu_affectation.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_fonction"].ToString().Trim().Equals("")) varclslieu_affectation.Id_fonction = int.Parse(dr["id_fonction"].ToString());
                            varclslieu_affectation.Designation = dr["designation"].ToString();
                            if (!dr["date_affectation"].ToString().Trim().Equals("")) varclslieu_affectation.Date_affectation = DateTime.Parse(dr["date_affectation"].ToString());
                            varclslieu_affectation.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclslieu_affectation.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclslieu_affectation.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclslieu_affectation.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclslieu_affectation.Add(varclslieu_affectation);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'lieu_affectation' avec la classe 'clslieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclslieu_affectation;
        }

        public List<clslieu_affectation> getAllClslieu_affectation_AC(string AnneeAcad)
        {
            List<clslieu_affectation> lstclslieu_affectation = new List<clslieu_affectation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM lieu_affectation WHERE code_AC=@code_AC ORDER BY designation ASC");
                    cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, AnneeAcad));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clslieu_affectation varclslieu_affectation = null;
                        while (dr.Read())
                        {
                            varclslieu_affectation = new clslieu_affectation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclslieu_affectation.Id = int.Parse(dr["id"].ToString());
                            varclslieu_affectation.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_type_lieu_affectation"].ToString().Trim().Equals("")) varclslieu_affectation.Id_type_lieu_affectation = int.Parse(dr["id_type_lieu_affectation"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclslieu_affectation.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_fonction"].ToString().Trim().Equals("")) varclslieu_affectation.Id_fonction = int.Parse(dr["id_fonction"].ToString());
                            varclslieu_affectation.Designation = dr["designation"].ToString();
                            if (!dr["date_affectation"].ToString().Trim().Equals("")) varclslieu_affectation.Date_affectation = DateTime.Parse(dr["date_affectation"].ToString());
                            varclslieu_affectation.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclslieu_affectation.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclslieu_affectation.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclslieu_affectation.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclslieu_affectation.Add(varclslieu_affectation);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'lieu_affectation' avec la classe 'clslieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclslieu_affectation;
        }

        public int insertClslieu_affectation(clslieu_affectation varclslieu_affectation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO lieu_affectation ( id,code_AC,id_type_lieu_affectation,id_personne,id_fonction,designation,date_affectation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@code_AC,@id_type_lieu_affectation,@id_personne,@id_fonction,@designation,@date_affectation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclslieu_affectation.Id));
                    if (varclslieu_affectation.Code_ac != null) cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, varclslieu_affectation.Code_ac));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_type_lieu_affectation", DbType.Int32, 4, varclslieu_affectation.Id_type_lieu_affectation));
                    if (varclslieu_affectation.Id_personne.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclslieu_affectation.Id_personne));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, DBNull.Value));
                    if (varclslieu_affectation.Id_fonction.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_fonction", DbType.Int32, 4, varclslieu_affectation.Id_fonction));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_fonction", DbType.Int32, 4, DBNull.Value));
                    if (varclslieu_affectation.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclslieu_affectation.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@date_affectation", DbType.DateTime, 8, varclslieu_affectation.Date_affectation));
                    if (varclslieu_affectation.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclslieu_affectation.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclslieu_affectation.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclslieu_affectation.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclslieu_affectation.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclslieu_affectation.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclslieu_affectation.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclslieu_affectation.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'lieu_affectation' avec la classe 'clslieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClslieu_affectation(clslieu_affectation varclslieu_affectation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE lieu_affectation  SET code_AC=@code_AC,id_type_lieu_affectation=@id_type_lieu_affectation,id_personne=@id_personne,id_fonction=@id_fonction,designation=@designation,date_affectation=@date_affectation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclslieu_affectation.Code_ac != null) cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, varclslieu_affectation.Code_ac));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_type_lieu_affectation", DbType.Int32, 4, varclslieu_affectation.Id_type_lieu_affectation));
                    if (varclslieu_affectation.Id_personne.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclslieu_affectation.Id_personne));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, DBNull.Value));
                    if (varclslieu_affectation.Id_fonction.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_fonction", DbType.Int32, 4, varclslieu_affectation.Id_fonction));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_fonction", DbType.Int32, 4, DBNull.Value));
                    if (varclslieu_affectation.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclslieu_affectation.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@date_affectation", DbType.DateTime, 8, varclslieu_affectation.Date_affectation));
                    if (varclslieu_affectation.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclslieu_affectation.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclslieu_affectation.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclslieu_affectation.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclslieu_affectation.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclslieu_affectation.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclslieu_affectation.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclslieu_affectation.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclslieu_affectation.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'lieu_affectation' avec la classe 'clslieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClslieu_affectation(clslieu_affectation varclslieu_affectation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM lieu_affectation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclslieu_affectation.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'lieu_affectation' avec la classe 'clslieu_affectation' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSLIEU_AFFECTATION 
        #region  CLSSORTIES_AUDIO
        public clssorties_audio getClssorties_audio(object intid)
        {
            clssorties_audio varclssorties_audio = new clssorties_audio();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM sorties_audio WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclssorties_audio.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclssorties_audio.Valeur = int.Parse(dr["valeur"].ToString());
                            varclssorties_audio.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssorties_audio.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssorties_audio.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssorties_audio.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'sorties_audio' avec la classe 'clssorties_audio' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclssorties_audio;
        }

        public List<clssorties_audio> getAllClssorties_audio(string criteria)
        {
            List<clssorties_audio> lstclssorties_audio = new List<clssorties_audio>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_sorties_audio_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssorties_audio varclssorties_audio = null;
                        while (dr.Read())
                        {
                            varclssorties_audio = new clssorties_audio();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssorties_audio.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclssorties_audio.Valeur = int.Parse(dr["valeur"].ToString());
                            varclssorties_audio.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssorties_audio.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssorties_audio.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssorties_audio.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclssorties_audio.Add(varclssorties_audio);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'sorties_audio' avec la classe 'clssorties_audio' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclssorties_audio;
        }

        public List<clssorties_audio> getAllClssorties_audio()
        {
            List<clssorties_audio> lstclssorties_audio = new List<clssorties_audio>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM sorties_audio ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssorties_audio varclssorties_audio = null;
                        while (dr.Read())
                        {
                            varclssorties_audio = new clssorties_audio();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssorties_audio.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclssorties_audio.Valeur = int.Parse(dr["valeur"].ToString());
                            varclssorties_audio.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclssorties_audio.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclssorties_audio.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclssorties_audio.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclssorties_audio.Add(varclssorties_audio);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'sorties_audio' avec la classe 'clssorties_audio' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclssorties_audio;
        }

        public int insertClssorties_audio(clssorties_audio varclssorties_audio)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO sorties_audio ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssorties_audio.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclssorties_audio.Valeur));
                    if (varclssorties_audio.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclssorties_audio.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclssorties_audio.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclssorties_audio.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclssorties_audio.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclssorties_audio.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclssorties_audio.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclssorties_audio.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'sorties_audio' avec la classe 'clssorties_audio' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClssorties_audio(clssorties_audio varclssorties_audio)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE sorties_audio  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclssorties_audio.Valeur));
                    if (varclssorties_audio.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclssorties_audio.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclssorties_audio.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclssorties_audio.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclssorties_audio.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclssorties_audio.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclssorties_audio.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclssorties_audio.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssorties_audio.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'sorties_audio' avec la classe 'clssorties_audio' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClssorties_audio(clssorties_audio varclssorties_audio)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM sorties_audio  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssorties_audio.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'sorties_audio' avec la classe 'clssorties_audio' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSSORTIES_AUDIO 
        #region  CLSMICROPHONE
        public clsmicrophone getClsmicrophone(object intid)
        {
            clsmicrophone varclsmicrophone = new clsmicrophone();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM microphone WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmicrophone.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsmicrophone.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsmicrophone.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmicrophone.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmicrophone.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmicrophone.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'microphone' avec la classe 'clsmicrophone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsmicrophone;
        }

        public List<clsmicrophone> getAllClsmicrophone(string criteria)
        {
            List<clsmicrophone> lstclsmicrophone = new List<clsmicrophone>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_microphone_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmicrophone varclsmicrophone = null;
                        while (dr.Read())
                        {
                            varclsmicrophone = new clsmicrophone();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmicrophone.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsmicrophone.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsmicrophone.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmicrophone.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmicrophone.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmicrophone.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsmicrophone.Add(varclsmicrophone);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'microphone' avec la classe 'clsmicrophone' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmicrophone;
        }

        public List<clsmicrophone> getAllClsmicrophone()
        {
            List<clsmicrophone> lstclsmicrophone = new List<clsmicrophone>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM microphone ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmicrophone varclsmicrophone = null;
                        while (dr.Read())
                        {
                            varclsmicrophone = new clsmicrophone();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmicrophone.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsmicrophone.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsmicrophone.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsmicrophone.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsmicrophone.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsmicrophone.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsmicrophone.Add(varclsmicrophone);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'microphone' avec la classe 'clsmicrophone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsmicrophone;
        }

        public int insertClsmicrophone(clsmicrophone varclsmicrophone)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO microphone ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmicrophone.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsmicrophone.Valeur));
                    if (varclsmicrophone.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsmicrophone.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsmicrophone.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsmicrophone.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmicrophone.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsmicrophone.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsmicrophone.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsmicrophone.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'microphone' avec la classe 'clsmicrophone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsmicrophone(clsmicrophone varclsmicrophone)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE microphone  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsmicrophone.Valeur));
                    if (varclsmicrophone.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsmicrophone.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsmicrophone.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsmicrophone.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmicrophone.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsmicrophone.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsmicrophone.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsmicrophone.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmicrophone.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'microphone' avec la classe 'clsmicrophone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsmicrophone(clsmicrophone varclsmicrophone)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM microphone  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmicrophone.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'microphone' avec la classe 'clsmicrophone' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSMICROPHONE 
        #region  CLSAFFECTATION_MATERIEL
        public clsaffectation_materiel getClsaffectation_materiel(object intid)
        {
            clsaffectation_materiel varclsaffectation_materiel = new clsaffectation_materiel();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM affectation_materiel WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id = int.Parse(dr["id"].ToString());
                            varclsaffectation_materiel.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_lieu_affectation"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_lieu_affectation = int.Parse(dr["id_lieu_affectation"].ToString());
                            if (!dr["id_materiel"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_materiel = int.Parse(dr["id_materiel"].ToString());
                            if (!dr["id_salle"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_salle = int.Parse(dr["id_salle"].ToString());
                            if (!dr["date_affectation"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_affectation = DateTime.Parse(dr["date_affectation"].ToString());
                            varclsaffectation_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsaffectation_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());

                            if (!dr["ip"].ToString().Trim().Equals("")) varclsaffectation_materiel.Ip = dr["ip"].ToString();
                            if (!dr["ssid"].ToString().Trim().Equals("")) varclsaffectation_materiel.Ssid = dr["ssid"].ToString();
                            if (!dr["isdgw"].ToString().Trim().Equals("")) varclsaffectation_materiel.Isdgw = bool.Parse(dr["isdgw"].ToString());
                            if (!dr["current_password"].ToString().Trim().Equals("")) varclsaffectation_materiel.Current_password = dr["current_password"].ToString();
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'affectation_materiel' avec la classe 'clsaffectation_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsaffectation_materiel;
        }

        public List<clsaffectation_materiel> getAllClsaffectation_materiel(string criteria)
        {
            List<clsaffectation_materiel> lstclsaffectation_materiel = new List<clsaffectation_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_affectation_materiel_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsaffectation_materiel varclsaffectation_materiel = null;
                        while (dr.Read())
                        {
                            varclsaffectation_materiel = new clsaffectation_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id = int.Parse(dr["id"].ToString());
                            varclsaffectation_materiel.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_lieu_affectation"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_lieu_affectation = int.Parse(dr["id_lieu_affectation"].ToString());
                            if (!dr["id_materiel"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_materiel = int.Parse(dr["id_materiel"].ToString());
                            if (!dr["id_salle"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_salle = int.Parse(dr["id_salle"].ToString());
                            if (!dr["date_affectation"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_affectation = DateTime.Parse(dr["date_affectation"].ToString());
                            varclsaffectation_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsaffectation_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());

                            if (!dr["ip"].ToString().Trim().Equals("")) varclsaffectation_materiel.Ip = dr["ip"].ToString();
                            if (!dr["ssid"].ToString().Trim().Equals("")) varclsaffectation_materiel.Ssid = dr["ssid"].ToString();
                            if (!dr["isdgw"].ToString().Trim().Equals("")) varclsaffectation_materiel.Isdgw = bool.Parse(dr["isdgw"].ToString());
                            if (!dr["current_password"].ToString().Trim().Equals("")) varclsaffectation_materiel.Current_password = dr["current_password"].ToString();

                            lstclsaffectation_materiel.Add(varclsaffectation_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'affectation_materiel' avec la classe 'clsaffectation_materiel' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsaffectation_materiel;
        }

        public List<clsaffectation_materiel> getAllClsaffectation_materiel()
        {
            List<clsaffectation_materiel> lstclsaffectation_materiel = new List<clsaffectation_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM affectation_materiel ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsaffectation_materiel varclsaffectation_materiel = null;
                        while (dr.Read())
                        {
                            varclsaffectation_materiel = new clsaffectation_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id = int.Parse(dr["id"].ToString());
                            varclsaffectation_materiel.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_lieu_affectation"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_lieu_affectation = int.Parse(dr["id_lieu_affectation"].ToString());
                            if (!dr["id_materiel"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_materiel = int.Parse(dr["id_materiel"].ToString());
                            if (!dr["id_salle"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_salle = int.Parse(dr["id_salle"].ToString());
                            if (!dr["date_affectation"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_affectation = DateTime.Parse(dr["date_affectation"].ToString());
                            varclsaffectation_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsaffectation_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());

                            if (!dr["ip"].ToString().Trim().Equals("")) varclsaffectation_materiel.Ip = dr["ip"].ToString();
                            if (!dr["ssid"].ToString().Trim().Equals("")) varclsaffectation_materiel.Ssid = dr["ssid"].ToString();
                            if (!dr["isdgw"].ToString().Trim().Equals("")) varclsaffectation_materiel.Isdgw = bool.Parse(dr["isdgw"].ToString());
                            if (!dr["current_password"].ToString().Trim().Equals("")) varclsaffectation_materiel.Current_password = dr["current_password"].ToString();

                            lstclsaffectation_materiel.Add(varclsaffectation_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'affectation_materiel' avec la classe 'clsaffectation_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsaffectation_materiel;
        }

        public List<clsaffectation_materiel> getAllClsaffectation_materiel_AC(string annee_academique)
        {
            List<clsaffectation_materiel> lstclsaffectation_materiel = new List<clsaffectation_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM affectation_materiel WHERE code_AC=@code_AC ORDER BY id ASC");
                    cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, annee_academique));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsaffectation_materiel varclsaffectation_materiel = null;
                        while (dr.Read())
                        {
                            varclsaffectation_materiel = new clsaffectation_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id = int.Parse(dr["id"].ToString());
                            varclsaffectation_materiel.Code_ac = dr["code_AC"].ToString();
                            if (!dr["id_lieu_affectation"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_lieu_affectation = int.Parse(dr["id_lieu_affectation"].ToString());
                            if (!dr["id_materiel"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_materiel = int.Parse(dr["id_materiel"].ToString());
                            if (!dr["id_salle"].ToString().Trim().Equals("")) varclsaffectation_materiel.Id_salle = int.Parse(dr["id_salle"].ToString());
                            if (!dr["date_affectation"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_affectation = DateTime.Parse(dr["date_affectation"].ToString());
                            varclsaffectation_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsaffectation_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsaffectation_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());

                            if (!dr["ip"].ToString().Trim().Equals("")) varclsaffectation_materiel.Ip = dr["ip"].ToString();
                            if (!dr["ssid"].ToString().Trim().Equals("")) varclsaffectation_materiel.Ssid = dr["ssid"].ToString();
                            if (!dr["isdgw"].ToString().Trim().Equals("")) varclsaffectation_materiel.Isdgw = bool.Parse(dr["isdgw"].ToString());
                            if (!dr["current_password"].ToString().Trim().Equals("")) varclsaffectation_materiel.Current_password = dr["current_password"].ToString();

                            lstclsaffectation_materiel.Add(varclsaffectation_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'affectation_materiel' avec la classe 'clsaffectation_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsaffectation_materiel;
        }

        public int insertClsaffectation_materiel(clsaffectation_materiel varclsaffectation_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO affectation_materiel ( id,code_AC,id_lieu_affectation,id_materiel,id_salle,date_affectation,user_created,date_created,user_modified,date_modified,ip,ssid,isdgw,current_password ) VALUES (@id,@code_AC,@id_lieu_affectation,@id_materiel,@id_salle,@date_affectation,@user_created,@date_created,@user_modified,@date_modified,@ip,@ssid,@isdgw,@current_password  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsaffectation_materiel.Id));
                    if (varclsaffectation_materiel.Code_ac != null) cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, varclsaffectation_materiel.Code_ac));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_lieu_affectation", DbType.Int32, 4, varclsaffectation_materiel.Id_lieu_affectation));
                    cmd.Parameters.Add(getParameter(cmd, "@id_materiel", DbType.Int32, 4, varclsaffectation_materiel.Id_materiel));
                    if (varclsaffectation_materiel.Id_salle.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_salle", DbType.Int32, 4, varclsaffectation_materiel.Id_salle));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_salle", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@date_affectation", DbType.DateTime, 8, varclsaffectation_materiel.Date_affectation));
                    if (varclsaffectation_materiel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsaffectation_materiel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsaffectation_materiel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsaffectation_materiel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsaffectation_materiel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsaffectation_materiel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsaffectation_materiel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsaffectation_materiel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));

                    if (varclsaffectation_materiel.Ip != null) cmd.Parameters.Add(getParameter(cmd, "@ip", DbType.String, 50, varclsaffectation_materiel.Ip));
                    else cmd.Parameters.Add(getParameter(cmd, "@ip", DbType.String, 50, DBNull.Value));
                    if (varclsaffectation_materiel.Ssid != null) cmd.Parameters.Add(getParameter(cmd, "@ssid", DbType.String, 50, varclsaffectation_materiel.Ssid));
                    else cmd.Parameters.Add(getParameter(cmd, "@ssid", DbType.String, 50, DBNull.Value));
                    if (varclsaffectation_materiel.Isdgw.HasValue) cmd.Parameters.Add(getParameter(cmd, "@isdgw", DbType.Boolean, 2, varclsaffectation_materiel.Isdgw));
                    else cmd.Parameters.Add(getParameter(cmd, "@isdgw", DbType.Boolean, 2, DBNull.Value));
                    if (varclsaffectation_materiel.Current_password != null) cmd.Parameters.Add(getParameter(cmd, "@current_password", DbType.String, 1000, varclsaffectation_materiel.Current_password));
                    else cmd.Parameters.Add(getParameter(cmd, "@current_password", DbType.String, 1000, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'affectation_materiel' avec la classe 'clsaffectation_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsaffectation_materiel(clsaffectation_materiel varclsaffectation_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE affectation_materiel  SET code_AC=@code_AC,id_lieu_affectation=@id_lieu_affectation,id_materiel=@id_materiel,id_salle=@id_salle,date_affectation=@date_affectation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified,ip=@ip,ssid=@ssid,isdgw=@isdgw,current_password=@current_password  WHERE 1=1  AND id=@id ");
                    if (varclsaffectation_materiel.Code_ac != null) cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, varclsaffectation_materiel.Code_ac));
                    else cmd.Parameters.Add(getParameter(cmd, "@code_AC", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_lieu_affectation", DbType.Int32, 4, varclsaffectation_materiel.Id_lieu_affectation));
                    cmd.Parameters.Add(getParameter(cmd, "@id_materiel", DbType.Int32, 4, varclsaffectation_materiel.Id_materiel));
                    if (varclsaffectation_materiel.Id_salle.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_salle", DbType.Int32, 4, varclsaffectation_materiel.Id_salle));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_salle", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@date_affectation", DbType.DateTime, 8, varclsaffectation_materiel.Date_affectation));
                    if (varclsaffectation_materiel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsaffectation_materiel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsaffectation_materiel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsaffectation_materiel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsaffectation_materiel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsaffectation_materiel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsaffectation_materiel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsaffectation_materiel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsaffectation_materiel.Id));

                    if (varclsaffectation_materiel.Ip != null) cmd.Parameters.Add(getParameter(cmd, "@ip", DbType.String, 50, varclsaffectation_materiel.Ip));
                    else cmd.Parameters.Add(getParameter(cmd, "@ip", DbType.String, 50, DBNull.Value));
                    if (varclsaffectation_materiel.Ssid != null) cmd.Parameters.Add(getParameter(cmd, "@ssid", DbType.String, 50, varclsaffectation_materiel.Ssid));
                    else cmd.Parameters.Add(getParameter(cmd, "@ssid", DbType.String, 50, DBNull.Value));
                    if (varclsaffectation_materiel.Isdgw.HasValue) cmd.Parameters.Add(getParameter(cmd, "@isdgw", DbType.Boolean, 2, varclsaffectation_materiel.Isdgw));
                    else cmd.Parameters.Add(getParameter(cmd, "@isdgw", DbType.Boolean, 2, DBNull.Value));
                    if (varclsaffectation_materiel.Current_password != null) cmd.Parameters.Add(getParameter(cmd, "@current_password", DbType.String, 1000, varclsaffectation_materiel.Current_password));
                    else cmd.Parameters.Add(getParameter(cmd, "@current_password", DbType.String, 1000, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'affectation_materiel' avec la classe 'clsaffectation_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsaffectation_materiel(clsaffectation_materiel varclsaffectation_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM affectation_materiel  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsaffectation_materiel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'affectation_materiel' avec la classe 'clsaffectation_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSAFFECTATION_MATERIEL 
        #region  CLSGAIN
        public clsgain getClsgain(object intid)
        {
            clsgain varclsgain = new clsgain();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM gain WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgain.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsgain.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsgain.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgain.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgain.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgain.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'gain' avec la classe 'clsgain' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsgain;
        }

        public List<clsgain> getAllClsgain(string criteria)
        {
            List<clsgain> lstclsgain = new List<clsgain>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_gain_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgain varclsgain = null;
                        while (dr.Read())
                        {
                            varclsgain = new clsgain();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgain.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsgain.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsgain.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgain.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgain.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgain.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsgain.Add(varclsgain);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'gain' avec la classe 'clsgain' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsgain;
        }

        public List<clsgain> getAllClsgain()
        {
            List<clsgain> lstclsgain = new List<clsgain>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM gain ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgain varclsgain = null;
                        while (dr.Read())
                        {
                            varclsgain = new clsgain();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgain.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsgain.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsgain.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgain.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgain.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgain.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsgain.Add(varclsgain);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'gain' avec la classe 'clsgain' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsgain;
        }

        public int insertClsgain(clsgain varclsgain)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO gain ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgain.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsgain.Valeur));
                    if (varclsgain.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsgain.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsgain.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsgain.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsgain.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsgain.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsgain.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsgain.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'gain' avec la classe 'clsgain' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsgain(clsgain varclsgain)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE gain  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsgain.Valeur));
                    if (varclsgain.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsgain.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsgain.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsgain.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsgain.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsgain.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsgain.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsgain.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgain.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'gain' avec la classe 'clsgain' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsgain(clsgain varclsgain)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM gain  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgain.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'gain' avec la classe 'clsgain' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSGAIN 
        #region  CLSGBE
        public clsgbe getClsgbe(object intid)
        {
            clsgbe varclsgbe = new clsgbe();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM gbe WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgbe.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsgbe.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsgbe.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgbe.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgbe.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgbe.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'gbe' avec la classe 'clsgbe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsgbe;
        }

        public List<clsgbe> getAllClsgbe(string criteria)
        {
            List<clsgbe> lstclsgbe = new List<clsgbe>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_gbe_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgbe varclsgbe = null;
                        while (dr.Read())
                        {
                            varclsgbe = new clsgbe();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgbe.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsgbe.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsgbe.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgbe.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgbe.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgbe.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsgbe.Add(varclsgbe);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'gbe' avec la classe 'clsgbe' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsgbe;
        }

        public List<clsgbe> getAllClsgbe()
        {
            List<clsgbe> lstclsgbe = new List<clsgbe>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM gbe ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgbe varclsgbe = null;
                        while (dr.Read())
                        {
                            varclsgbe = new clsgbe();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgbe.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsgbe.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsgbe.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsgbe.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsgbe.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsgbe.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsgbe.Add(varclsgbe);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'gbe' avec la classe 'clsgbe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsgbe;
        }

        public int insertClsgbe(clsgbe varclsgbe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO gbe ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgbe.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsgbe.Valeur));
                    if (varclsgbe.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsgbe.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsgbe.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsgbe.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsgbe.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsgbe.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsgbe.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsgbe.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'gbe' avec la classe 'clsgbe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsgbe(clsgbe varclsgbe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE gbe  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsgbe.Valeur));
                    if (varclsgbe.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsgbe.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsgbe.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsgbe.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsgbe.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsgbe.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsgbe.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsgbe.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgbe.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'gbe' avec la classe 'clsgbe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsgbe(clsgbe varclsgbe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM gbe  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsgbe.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'gbe' avec la classe 'clsgbe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSGBE 
        #region  CLSUTILISATEUR
        public clsutilisateur getClsutilisateur(object intid)
        {
            clsutilisateur varclsutilisateur = new clsutilisateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM utilisateur WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsutilisateur.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsutilisateur.Nomuser = dr["nomuser"].ToString();
                            varclsutilisateur.Motpass = dr["motpass"].ToString();
                            varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                            varclsutilisateur.Droits = dr["droits"].ToString();
                            if (!dr["activation"].ToString().Trim().Equals("")) varclsutilisateur.Activation = bool.Parse(dr["activation"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'utilisateur' avec la classe 'clsutilisateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsutilisateur;
        }

        public List<clsutilisateur> getAllClsutilisateur(string criteria)
        {
            List<clsutilisateur> lstclsutilisateur = new List<clsutilisateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_utilisateur_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsutilisateur varclsutilisateur = null;
                        while (dr.Read())
                        {
                            varclsutilisateur = new clsutilisateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsutilisateur.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsutilisateur.Nomuser = dr["nomuser"].ToString();
                            varclsutilisateur.Motpass = dr["motpass"].ToString();
                            varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                            varclsutilisateur.Droits = dr["droits"].ToString();
                            if (!dr["activation"].ToString().Trim().Equals("")) varclsutilisateur.Activation = bool.Parse(dr["activation"].ToString());
                            lstclsutilisateur.Add(varclsutilisateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'utilisateur' avec la classe 'clsutilisateur' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsutilisateur;
        }

        public List<clsutilisateur> getAllClsutilisateur()
        {
            List<clsutilisateur> lstclsutilisateur = new List<clsutilisateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM utilisateur ORDER BY nomuser ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsutilisateur varclsutilisateur = null;
                        while (dr.Read())
                        {
                            varclsutilisateur = new clsutilisateur();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsutilisateur.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsutilisateur.Nomuser = dr["nomuser"].ToString();
                            varclsutilisateur.Motpass = dr["motpass"].ToString();
                            varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                            varclsutilisateur.Droits = dr["droits"].ToString();
                            if (!dr["activation"].ToString().Trim().Equals("")) varclsutilisateur.Activation = bool.Parse(dr["activation"].ToString());
                            lstclsutilisateur.Add(varclsutilisateur);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'utilisateur' avec la classe 'clsutilisateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsutilisateur;
        }

        public int insertClsutilisateur1(clsutilisateur varclsutilisateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO utilisateur (id,id_personne,nomuser,motpass,schema_user,droits,activation ) VALUES (@id,@id_personne,@nomuser,@motpass,@schema_user,@droits,@activation  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsutilisateur.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsutilisateur.Id_personne));
                    if (varclsutilisateur.Nomuser != null) cmd.Parameters.Add(getParameter(cmd, "@nomuser", DbType.String, 30, varclsutilisateur.Nomuser));
                    else cmd.Parameters.Add(getParameter(cmd, "@nomuser", DbType.String, 30, DBNull.Value));
                    if (varclsutilisateur.Motpass != null) cmd.Parameters.Add(getParameter(cmd, "@motpass", DbType.String, 1000, varclsutilisateur.Motpass));
                    else cmd.Parameters.Add(getParameter(cmd, "@motpass", DbType.String, 1000, DBNull.Value));
                    if (varclsutilisateur.Schema_user != null) cmd.Parameters.Add(getParameter(cmd, "@schema_user", DbType.String, 20, varclsutilisateur.Schema_user));
                    else cmd.Parameters.Add(getParameter(cmd, "@schema_user", DbType.String, 20, DBNull.Value));
                    if (varclsutilisateur.Droits != null) cmd.Parameters.Add(getParameter(cmd, "@droits", DbType.String, 300, varclsutilisateur.Droits));
                    else cmd.Parameters.Add(getParameter(cmd, "@droits", DbType.String, 300, DBNull.Value));
                    if (varclsutilisateur.Activation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@activation", DbType.Boolean, 2, varclsutilisateur.Activation));
                    else cmd.Parameters.Add(getParameter(cmd, "@activation", DbType.Boolean, 2, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'utilisateur' avec la classe 'clsutilisateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsutilisateur1(clsutilisateur varclsutilisateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE utilisateur  SET id_personne=@id_personne,nomuser=@nomuser,motpass=@motpass,schema_user=@schema_user,droits=@droits,activation=@activation  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsutilisateur.Id_personne));
                    if (varclsutilisateur.Nomuser != null) cmd.Parameters.Add(getParameter(cmd, "@nomuser", DbType.String, 30, varclsutilisateur.Nomuser));
                    else cmd.Parameters.Add(getParameter(cmd, "@nomuser", DbType.String, 30, DBNull.Value));
                    if (varclsutilisateur.Motpass != null) cmd.Parameters.Add(getParameter(cmd, "@motpass", DbType.String, 1000, varclsutilisateur.Motpass));
                    else cmd.Parameters.Add(getParameter(cmd, "@motpass", DbType.String, 1000, DBNull.Value));
                    if (varclsutilisateur.Schema_user != null) cmd.Parameters.Add(getParameter(cmd, "@schema_user", DbType.String, 20, varclsutilisateur.Schema_user));
                    else cmd.Parameters.Add(getParameter(cmd, "@schema_user", DbType.String, 20, DBNull.Value));
                    if (varclsutilisateur.Droits != null) cmd.Parameters.Add(getParameter(cmd, "@droits", DbType.String, 300, varclsutilisateur.Droits));
                    else cmd.Parameters.Add(getParameter(cmd, "@droits", DbType.String, 300, DBNull.Value));
                    if (varclsutilisateur.Activation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@activation", DbType.Boolean, 2, varclsutilisateur.Activation));
                    else cmd.Parameters.Add(getParameter(cmd, "@activation", DbType.Boolean, 2, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsutilisateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'utilisateur' avec la classe 'clsutilisateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsutilisateur1(clsutilisateur varclsutilisateur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM utilisateur  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsutilisateur.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'utilisateur' avec la classe 'clsutilisateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #region BEGIN ADD UTILISATEUR
        public int GenerateLastID(string table_name)
        {
            int lastID = 0;
            try
            {
                if (conn.State == ConnectionState.Closed)
                    conn.Open();

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT MAX(id) AS lastID From " + table_name;

                    IDataReader rd = cmd.ExecuteReader();

                    if (rd.Read())
                    {
                        if (rd["lastID"] == DBNull.Value)
                            lastID = 1;
                        else if (Convert.ToInt32(rd["lastID"].ToString()) == 0)
                            lastID = 1;
                        else
                            lastID = Convert.ToInt32(rd["lastID"].ToString()) + 1;
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Echec lors de la génération de l'id de l'utilisateur  : " + exc.GetType().ToString() + " : " + " => " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName); 
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lastID;
        }

        //Bonne partie pour Gestion users
        public int insertClsutilisateur(clsutilisateur varclsutilisateur)
        {
            //On crée d'abord le user en déhors de la transaction car les procedures stocke ont un traitement 
            //transactionnel par defaut
            bool echec_create = true;
            string message_erreur_user = "";

            try
            {
                //Avant tous on commence par creer l'ID qui sera inseree dans la table des users
                varclsutilisateur.Id = this.GenerateLastID("utilisateur");
                //Avant de faire l'insertion dans la table utilisateur, on commence par créer le login et le user de la BD
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"exec sp_addlogin '" + varclsutilisateur.Nomuser + "','" + varclsutilisateur.Motpass + "','" + bdEnCours + @"'                                               
                                                      exec sp_grantdbaccess '" + varclsutilisateur.Nomuser + @"'
                                                 ");
                    int j = cmd.ExecuteNonQuery();
                    echec_create = false;
                }
            }
            catch (Exception exc)
            {
                message_erreur_user = exc.Message;
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            //Dans la transaction on fait le reste
            IDbTransaction transaction = null;

            int i = 0;

            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                if (echec_create)
                    throw new Exception(message_erreur_user);//Si la création du user a échoué, on fait échoué le reste

                //Si l'on à cocher la case à cocher d'activation de l'utilisateur on doit le donner accès à se connecter ou non
                if (!(bool)varclsutilisateur.Activation)
                {
                    using (IDbCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = string.Format(@"revoke connect to " + varclsutilisateur.Nomuser); //On interdit à l'utilisateur de se connecter au serveur
                        cmd2.Transaction = transaction;

                        i = cmd2.ExecuteNonQuery();
                    }
                }

                //Insertion de l'utilisateur créé dans la table des user sans droits
                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = string.Format("INSERT INTO utilisateur (id,id_personne,nomuser,motpass,schema_user,activation ) VALUES (@id,@id_personne,@nomuser,@motpass,@schema_user,@activation)");
                    cmd3.Parameters.Add(getParameter(cmd3, "@id", DbType.Int32, 4, varclsutilisateur.Id));
                    cmd3.Parameters.Add(getParameter(cmd3, "@id_personne", DbType.Int32, 4, varclsutilisateur.Id_personne));
                    if (varclsutilisateur.Nomuser != null) cmd3.Parameters.Add(getParameter(cmd3, "@nomuser", DbType.String, 30, varclsutilisateur.Nomuser));
                    else cmd3.Parameters.Add(getParameter(cmd3, "@nomuser", DbType.String, 30, DBNull.Value));
                    if (varclsutilisateur.Motpass != null) cmd3.Parameters.Add(getParameter(cmd3, "@motpass", DbType.String, 1000, ImplementChiffer.Instance.Cipher(varclsutilisateur.Motpass, "Jos@mRootP@ss")));//On chiffre le password a mettre dans la BD
                    else cmd3.Parameters.Add(getParameter(cmd3, "@motpass", DbType.String, 1000, DBNull.Value));
                    varclsutilisateur.Schema_user = varclsutilisateur.Nomuser;
                    if (varclsutilisateur.Schema_user != null) cmd3.Parameters.Add(getParameter(cmd3, "@schema_user", DbType.String, 20, varclsutilisateur.Schema_user));
                    else cmd3.Parameters.Add(getParameter(cmd3, "@schema_user", DbType.String, 20, DBNull.Value));
                    if (varclsutilisateur.Activation.HasValue) cmd3.Parameters.Add(getParameter(cmd3, "@activation", DbType.Boolean, 2, varclsutilisateur.Activation));
                    else cmd3.Parameters.Add(getParameter(cmd3, "@activation", DbType.Boolean, 2, DBNull.Value));
                    cmd3.Transaction = transaction;
                    i = cmd3.ExecuteNonQuery();

                    transaction.Commit();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();

                    ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Echec lors de la création de l'utilisateur  : " + exc.GetType().ToString() + " : " + message_erreur_user + " => " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                    throw;
                }
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsutilisateur(DataRowView varclsutilisateur)
        {
            IDbTransaction transaction = null;
            int i = 0;
            bool ok = false;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                if (clsTools.etat_modification_user == 4)
                {
                    varclsutilisateur["activation"] = clsTools.activationUser;

                    if (conn.State != ConnectionState.Open) conn.Open();

                    if ((bool)varclsutilisateur["activation"])
                    {
                        using (IDbCommand cmd3 = conn.CreateCommand())
                        {
                            cmd3.CommandText = string.Format(@"grant connect to " + varclsutilisateur["nomuser"]); //On interdit à l'utilisateur de se connecter au serveur
                            cmd3.Transaction = transaction;
                            i = cmd3.ExecuteNonQuery();
                        }
                    }
                    else
                    {
                        using (IDbCommand cmd3 = conn.CreateCommand())
                        {
                            cmd3.CommandText = string.Format(@"revoke connect to " + varclsutilisateur["nomuser"]); //On interdit à l'utilisateur de se connecter au serveur
                            cmd3.Transaction = transaction;
                            i = cmd3.ExecuteNonQuery();
                        }
                    }

                    using (IDbCommand cmd4 = conn.CreateCommand())
                    {
                        cmd4.CommandText = string.Format("UPDATE utilisateur SET activation=@activation  WHERE 1=1  AND id=@id ");
                        cmd4.Parameters.Add(getParameter(cmd4, "@activation", DbType.Boolean, 2, varclsutilisateur["activation"]));
                        cmd4.Parameters.Add(getParameter(cmd4, "@id", DbType.Int32, 4, varclsutilisateur["id"]));
                        cmd4.Transaction = transaction;

                        i = cmd4.ExecuteNonQuery();
                    }
                }
                else if (clsTools.etat_modification_user == 1)
                {
                    //Modification du nom user seulement

                    //Avant de modifier l'utilisateur dans la table, on modifie le user de la bd
                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        varclsutilisateur["nomuser"] = clsTools.newUser;
                        //varclstbl_utilisateur.Motpass = clsTools.oldPassword;
                        cmd1.CommandText = string.Format("alter login " + clsTools.oldUser + " with name=" + varclsutilisateur["nomuser"]); //On modifie le login de l'utilisateur pour changer son mode de connexion
                        cmd1.Transaction = transaction;
                        i = cmd1.ExecuteNonQuery();
                    }
                }
                else if (clsTools.etat_modification_user == 2)
                {
                    //Modification du mot de passe seulement

                    //Avant de modifier l'utilisateur dans la table, on modifie le user de la bd
                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        varclsutilisateur["motpass"] = clsTools.newPassword;
                        cmd1.CommandText = string.Format("alter LOGIN " + varclsutilisateur["nomuser"] + " WITH PASSWORD='" + ImplementChiffer.Instance.Decipher(clsTools.newPassword, "Jos@mRootP@ss") + "'"); //On modifie le login de l'utilisateur pour changer son mot de passe de connexion
                        cmd1.Transaction = transaction;
                        i = cmd1.ExecuteNonQuery();
                    }
                }
                else if (clsTools.etat_modification_user == 3)
                {
                    //Modification du nom d'utilisateur et du mot de passe

                    //Avant de modifier l'utilisateur dans la table, on modifie le user de la bd
                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        varclsutilisateur["nomuser"] = clsTools.newUser;
                        varclsutilisateur["motpass"] = clsTools.newPassword;
                        cmd1.CommandText = string.Format("ALTER LOGIN " + clsTools.oldUser + " WITH PASSWORD='" + ImplementChiffer.Instance.Decipher(clsTools.newPassword, "Jos@mRootP@ss") + "'" + @"
                                                          ALTER LOGIN " + clsTools.oldUser + " WITH NAME=" + varclsutilisateur["nomuser"]); //On modifie le login de l'utilisateur pour changer son mot de passe de connexion, puis on modifie son nom de login
                        cmd1.Transaction = transaction;
                        i = cmd1.ExecuteNonQuery();
                    }
                }

                if (clsTools.etat_modification_user == 1)
                {
                    //Modification de l'utilisateur
                    using (IDbCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = string.Format("UPDATE utilisateur  SET id_personne=@id_personne,nomuser=@nomuser,activation=@activation  WHERE 1=1  AND id=@id ");
                        cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsutilisateur["id_personne"]));
                        if (varclsutilisateur["nomuser"] != null) cmd.Parameters.Add(getParameter(cmd, "@nomuser", DbType.String, 30, varclsutilisateur["nomuser"]));
                        else cmd.Parameters.Add(getParameter(cmd, "@nomuser", DbType.String, 30, DBNull.Value));
                        if (varclsutilisateur["activation"] != null) cmd.Parameters.Add(getParameter(cmd, "@activation", DbType.Boolean, 2, varclsutilisateur["activation"]));
                        else cmd.Parameters.Add(getParameter(cmd, "@activation", DbType.Boolean, 2, DBNull.Value));
                        cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsutilisateur["id"]));
                        cmd.Transaction = transaction;
                        i = cmd.ExecuteNonQuery();
                        ok = true;
                    }
                }
                else if (clsTools.etat_modification_user == 2 || clsTools.etat_modification_user == 3)
                {
                    //Modification de l'utilisateur
                    using (IDbCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = string.Format("UPDATE utilisateur  SET id_personne=@id_personne,nomuser=@nomuser,motpass=@motpass,activation=@activation  WHERE 1=1  AND id=@id ");
                        cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsutilisateur["id_personne"]));
                        if (varclsutilisateur["nomuser"] != null) cmd.Parameters.Add(getParameter(cmd, "@nomuser", DbType.String, 30, varclsutilisateur["nomuser"]));
                        else cmd.Parameters.Add(getParameter(cmd, "@nomuser", DbType.String, 30, DBNull.Value));
                        if (varclsutilisateur["motpass"] != null) cmd.Parameters.Add(getParameter(cmd, "@motpass", DbType.String, 1000, varclsutilisateur["motpass"]));
                        else cmd.Parameters.Add(getParameter(cmd, "@motpass", DbType.String, 1000, DBNull.Value));
                        if (varclsutilisateur["activation"] != null) cmd.Parameters.Add(getParameter(cmd, "@activation", DbType.Boolean, 2, varclsutilisateur["activation"]));
                        else cmd.Parameters.Add(getParameter(cmd, "@activation", DbType.Boolean, 2, DBNull.Value));
                        cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsutilisateur["id"]));
                        cmd.Transaction = transaction;
                        i = cmd.ExecuteNonQuery();
                        ok = true;
                    }
                }

                if (!ok) conn.Close();

                if (ok)
                {
                    if (clsTools.etat_modification_user == 1 || clsTools.etat_modification_user == 2 || clsTools.etat_modification_user == 3)
                    {
                        if (conn.State != ConnectionState.Open) conn.Open();

                        //On récupère le nom de l'utilisateur qui correspond au premier qui a été créé à la première fois
                        //et qui est équivalente au nom du schema de ce dernier

                        using (IDbCommand cmd2 = conn.CreateCommand())
                        {
                            cmd2.CommandText = "SELECT utilisateur.schema_user FROM utilisateur WHERE utilisateur.id=@id";
                            cmd2.Parameters.Add(getParameter(cmd2, "@id_utilisateur", DbType.Int32, 4, varclsutilisateur["id"]));
                            cmd2.Transaction = transaction;

                            using (IDataReader dr = cmd2.ExecuteReader())
                            {
                                if (dr.Read())
                                {
                                    varclsutilisateur["nomuser"] = dr["schema_user"].ToString();
                                }
                            }
                        }

                        //Si l'on à cocher la case à cocher d'activation de l'utilisateur on doit le donner accès à se connecter ou non
                        if ((bool)varclsutilisateur["activation"])
                        {
                            using (IDbCommand cmd3 = conn.CreateCommand())
                            {
                                cmd3.CommandText = string.Format(@"grant connect to " + varclsutilisateur["nomuser"]); //On interdit à l'utilisateur de se connecter au serveur
                                cmd3.Transaction = transaction;
                                i = cmd3.ExecuteNonQuery();
                                transaction.Commit();
                                conn.Close();
                            }
                        }
                        else
                        {
                            using (IDbCommand cmd3 = conn.CreateCommand())
                            {
                                cmd3.CommandText = string.Format(@"revoke connect to " + varclsutilisateur["nomuser"]); //On interdit à l'utilisateur de se connecter au serveur
                                cmd3.Transaction = transaction;
                                i = cmd3.ExecuteNonQuery();
                                transaction.Commit();
                            }
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();

                    ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Echec lors de la modification de l'utilisateur : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                    throw;
                }
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            clsTools.etat_modification_user = -1;
            return i;
        }

        public int deleteClsutilisateur(DataRowView varclsutilisateur)
        {
            int i = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = @"SELECT utilisateur.schema_user FROM utilisateur WHERE utilisateur.id=@id_utilisateur";
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_utilisateur", DbType.Int32, 4, varclsutilisateur["id"]));
                    cmd1.Transaction = transaction;
                    using (IDataReader dr = cmd1.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["schema_user"].ToString().Trim().Equals(""))
                                varclsutilisateur["schema_user"] = dr["schema_user"].ToString();
                        }
                    }
                }

                //Avant de supprimer l'utilisateur dans la table, on supprime son schema qui correspond au premier nom d'utilisateur crée
                //puis on supprime son nom d'utilisateur et enfin on supprime son login
                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DROP SCHEMA " + varclsutilisateur["schema_user"] + @" 
                                                      DROP USER " + varclsutilisateur["schema_user"] + @"
                                                      DROP LOGIN " + varclsutilisateur["nomuser"]);
                    cmd2.Transaction = transaction;
                    i = cmd2.ExecuteNonQuery();
                }

                //Enfin on supprime l'utilisateur dans la table des utilisateurs
                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = "DELETE FROM utilisateur WHERE  1=1  AND id=@id";
                    cmd3.Parameters.Add(getParameter(cmd3, "@id", DbType.Int32, 4, varclsutilisateur["id"]));
                    cmd3.Transaction = transaction;
                    i = cmd3.ExecuteNonQuery();
                    transaction.Commit();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();

                    ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Echec lors de la suppression de l'utilisateur : " + exc.GetType().ToString() + " : " +exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                    throw;
                }
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        /// <summary>
        /// Permet de verifier les paramètres de connexion de l'utilisateur, donc username et password
        /// et retourne un tableau contenant successivement l'Id de l'Agent, son nom et ses droits qui determinent son niveau
        /// </summary>
        /// <param name="String nom d'utilisateur"></param>
        /// <param name="String mot de passe"></param>
        /// <returns>ArrayList</returns>
        public ArrayList verifieLoginUser(string username, string password)
        {
            ArrayList lstValue = new ArrayList();
            bool okActivateUser = false;

            //Echec de la connexion en superAdministrateur alors on peut se connecte en Administrateur 
            //ou en invite (User)
            ////if (username.ToLower().Equals("sa"))
            ////{
            ////    throw new Exception("L'utilisateur 'SA' a été désactivé dans cette application pour raisons de sécurité, veuillez contacter votre Administrateur");
            ////}
            ////else 
            if (username.ToLower().Equals("sa"))//Super Administrateur par defaut
            {
                //Super utilisateur de la BD
                lstValue.Add("0");
                lstValue.Add("Superutilisateur de la BD");
                lstValue.Add("Administrateur");
                lstValue.Add(true);
            }
            else
            {
                try
                {
                    if (conn.State != ConnectionState.Open)
                        conn.Open();

                    //On commence par recuperer le password chiffre dans la BD pour la comparer avec celui que 
                    //le user a saisi
                    string strBDdecipherPasswor = "", strBDCipher = "";
                    bool ok = false;

                    using (IDbCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "SELECT motpass from utilisateur WHERE nomuser=@username";
                        cmd.Parameters.Add(getParameter(cmd, "@username", DbType.String, 50, username));

                        using (IDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.Read())
                            {
                                strBDCipher = (dr["motpass"]).ToString();
                                strBDdecipherPasswor = ImplementChiffer.Instance.Decipher((dr["motpass"]).ToString(), "Jos@mRootP@ss");
                                ok = true;
                            }
                        }
                    }


                    if (ok && strBDdecipherPasswor.CompareTo(password) == 0)
                    {
                        using (IDbCommand cmd = conn.CreateCommand())
                        {
                            cmd.CommandText = @"SELECT personne.id AS id,ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS nom,utilisateur.activation AS activation,utilisateur.nomuser,utilisateur.droits AS droits,utilisateur.motpass FROM personne 
                            LEFT OUTER JOIN utilisateur ON personne.id=utilisateur.id_personne WHERE utilisateur.nomuser=@username AND utilisateur.motpass=@strBDCipher";
                            cmd.Parameters.Add(getParameter(cmd, "@username", DbType.String, 30, username));
                            cmd.Parameters.Add(getParameter(cmd, "@strBDCipher", DbType.String, 1000, strBDCipher));

                            using (IDataReader dr = cmd.ExecuteReader())
                            {
                                if (dr.Read())
                                {
                                    lstValue.Add(dr["id"].ToString());
                                    lstValue.Add(Convert.ToString(dr["nom"]));
                                    lstValue.Add(Convert.ToString(dr["droits"]));//Tous les droit de l'utilisateur
                                                                                 /*Ces droits sont:0->Administrateur : Administrateur de la BD avec tous les droits
                                                                                                   1->Admin          : Adminikstrateur local de l'application avec certaines restrictions
                                                                                                     comme la non possibilite de suppression de users ou des enregistrements
                                                                                                   2->User           : Utilisateur simple avec beaucoup des restrictions
                                                                                 */

                                    okActivateUser = Convert.ToBoolean(dr["activation"]);

                                    //Recuperation du nombre des droits de l'utilisateur
                                    int nbr = 0;

                                    if (!string.IsNullOrEmpty(lstValue[2].ToString()))
                                    {
                                        string[] nbdroit = lstValue[2].ToString().Split(',');
                                        foreach (string str in nbdroit)
                                            nbr++;
                                        clsTools.nombre_droit = nbr;//Nombre total des droits de l'utilisateur
                                    }

                                    if (okActivateUser)
                                    {
                                        if (clsTools.nombre_droit == 0)
                                        {
                                            lstValue.Add(false);
                                            throw new Exception("Cet utilisateur est activé mais n'a encore aucun droit");
                                        }
                                        else
                                        {
                                            //Utilisateur valide
                                            lstValue.Add(true);
                                        }
                                    }
                                    else
                                    {
                                        lstValue.Add(false);

                                        if (clsTools.nombre_droit == 0)
                                        {
                                            throw new Exception("Cet utilisateur est désactivé et n'a aucun droit");
                                        }
                                        else
                                        {
                                            throw new Exception("Cet utilisateur est désactivé mais a des droits d'accès");
                                        }
                                    }
                                }

                            }
                        }
                    }
                    else
                    {
                        lstValue.Add(false);
                        throw new Exception("Nom d'utilisateur ou mot de passe invalide, contacter votre administrateur");
                    }
                }
                catch (Exception exc)
                {
                    ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Vérification des paramètres de connexion de l'utilisateur : username et password : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                    throw;
                }
                finally
                {
                    if (conn != null)
                        conn.Close();
                }
            }
            return lstValue;
        }

        public DataTable getAllClsutilisateur_Agent()
        {
            DataTable lstclstbl_utilisateur = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT utilisateur.id,utilisateur.id_personne,utilisateur.nomuser,utilisateur.motpass,utilisateur.schema_user,utilisateur.droits,utilisateur.activation, ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS nom FROM utilisateur 
                    INNER JOIN personne ON personne.id = utilisateur.id_personne ORDER BY utilisateur.nomuser ASC");

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclstbl_utilisateur.Load(dr);
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'utilisateur' avec la classe 'clsutilisateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstbl_utilisateur;
        }

        public DataTable getAllClsutilisateur_Agent2(int intid)
        {
            DataTable lstclstbl_utilisateur = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = @"SELECT utilisateur.id,utilisateur.id_personne,utilisateur.nomuser,utilisateur.motpass,utilisateur.schema_user,
                    utilisateur.droits,utilisateur.activation, ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS nom FROM utilisateur 
                    INNER JOIN personne ON personne.id = utilisateur.id_personne WHERE utilisateur.id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, intid));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclstbl_utilisateur.Load(dr);
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'utilisateur' avec la classe 'clsutilisateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclstbl_utilisateur;
        }

        public clsutilisateur getClsutilisateurUser(string nom_user)
        {
            clsutilisateur varclsutilisateur = new clsutilisateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = @"SELECT utilisateur.id AS idUser,utilisateur.id_personne,utilisateur.nomuser,utilisateur.motpass,
                    utilisateur.schema_user,utilisateur.droits,utilisateur.activation, ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'')  AS nom FROM utilisateur 
                    INNER JOIN personne ON personne.id = utilisateur.id_personne WHERE utilisateur.nomuser=@nom_user";
                    cmd.Parameters.Add(getParameter(cmd, "@nom_user", DbType.String, 30, nom_user));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Utilisateur
                            if (!dr["idUser"].ToString().Trim().Equals("")) varclsutilisateur.Id = int.Parse(dr["idUser"].ToString());
                            varclsutilisateur.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsutilisateur.Nomuser = dr["nomuser"].ToString();
                            varclsutilisateur.Motpass = ImplementChiffer.Instance.Decipher(dr["motpass"].ToString(), "Jos@mRootP@ss");
                            varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                            varclsutilisateur.Droits = dr["droits"].ToString();
                            if (!dr["activation"].ToString().Trim().Equals("")) varclsutilisateur.Activation = bool.Parse(dr["activation"].ToString());

                            //Personne
                            varclsutilisateur.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsutilisateur.Nom = dr["nom"].ToString();
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Vérification des paramètres de connexion de l'utilisateur : username et password : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsutilisateur;
        }

        public int updateClsutilisateur_droit(int id_user, string droits)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();

                //Modification de l'utilisateur
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE utilisateur  SET droits=@droits  WHERE 1=1  AND id=@id ");
                    if (droits != null) cmd.Parameters.Add(getParameter(cmd, "@droits", DbType.String, 100, droits));
                    else cmd.Parameters.Add(getParameter(cmd, "@droits", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id_user));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'utilisateur' avec la classe 'clsutilisateur' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion END ADD UTILISATEUR
        #region GESTION DES DROITS D'ACCES SUR LES TABLES POUR LES UTILISATEUR
        public string[] getLogin_SchemaUser(int id_user)
        {
            string[] schema = new string[2];

            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT nomuser,schema_user  FROM utilisateur WHERE id=@id_user";
                    cmd.Parameters.Add(getParameter(cmd, "@id_user", DbType.Int32, 4, id_user));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            schema[0] = dr["nomuser"].ToString();
                            schema[1] = dr["schema_user"].ToString();
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'tbl_fiche_menage' avec la classe 'clstbl_fiche_menage' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return schema;
        }

        public List<int> getDroitsUser(int id_user)
        {
            List<int> droits = new List<int>();

            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT droits FROM utilisateur WHERE id=@id_user";
                    cmd.Parameters.Add(getParameter(cmd, "@id_user", DbType.Int32, 4, id_user));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            string[] temp = dr["droits"].ToString().Split(',');
                            int taille = temp.Length;

                            foreach (string str in temp)
                            {
                                if (str.ToString().Equals("Administrateur")) droits.Add(0);
                                else if (str.Equals("Admin")) droits.Add(1);
                                else if (str.Equals("User")) droits.Add(2);
                            }
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'tbl_fiche_menage' avec la classe 'clstbl_fiche_menage' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return droits;
        }

        public void grantPermission(List<int> permission, string nom_login, string nom_utilisateur)
        {
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                //On tourne dans la boucle qui tournera tant qu'il ya encore un groupe de permission à accordé
                foreach (int droit in permission)
                {
                    if (droit == 0)
                    {
                        #region Droit pour administrateur (Ce dernier a tous les droits sur le systeme)
                        string requete = @"exec sp_addsrvrolemember '" + nom_login + @"','sysadmin' 
                        exec sp_addsrvrolemember '" + nom_login + @"','securityadmin' 
                        exec sp_addsrvrolemember '" + nom_login + @"','dbcreator' 
                        exec sp_addrolemember 'db_owner','" + nom_utilisateur + @"'
                        exec sp_addrolemember 'db_ddladmin','" + nom_utilisateur + @"'
                        exec sp_addrolemember 'db_accessadmin','" + nom_utilisateur + @"'";

                        using (IDbCommand cmd = conn.CreateCommand())
                        {
                            cmd.CommandText = string.Format(requete);
                            cmd.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 1)
                    {
                        #region Droit pour Admin (Ce dernier est aussi administrateur mais avec certaines limites comme suppressionm etc)
                        string requete = @"grant select,insert,update on compte to " + nom_utilisateur + @" 
                        grant select,insert,update on marque  to " + nom_utilisateur + @"
                        grant select,insert,update on modele  to " + nom_utilisateur + @"
                        grant select,insert,update on couleur  to " + nom_utilisateur + @"
                        grant select,insert,update on poids  to " + nom_utilisateur + @"
                        grant select,insert,update on type_ordinateur  to " + nom_utilisateur + @"
                        grant select,insert,update on type_imprimante  to " + nom_utilisateur + @"
                        grant select,insert,update on type_amplificateur  to " + nom_utilisateur + @"
                        grant select,insert,update on type_routeur_AP  to " + nom_utilisateur + @"
                        grant select,insert,update on type_AP  to " + nom_utilisateur + @"
                        grant select,insert,update on type_switch  to " + nom_utilisateur + @"
                        grant select,insert,update on type_clavier  to " + nom_utilisateur + @"
                        grant select,insert,update on etat_materiel  to " + nom_utilisateur + @"
                        grant select,insert,update on type_OS  to " + nom_utilisateur + @"
                        grant select,insert,update on architecture_OS  to " + nom_utilisateur + @"
                        grant select,insert,update on OS  to " + nom_utilisateur + @"
                        grant select,insert,update on version_ios  to " + nom_utilisateur + @"
                        grant select,insert,update on netette  to " + nom_utilisateur + @"
                        grant select,insert,update on materiel  to " + nom_utilisateur + @"
                        grant select,insert,update on grade  to " + nom_utilisateur + @"
                        grant select,insert,update on personne  to " + nom_utilisateur + @"
                        grant select,insert,update on type_lieu_affectation  to " + nom_utilisateur + @"
                        grant select,insert,update on AC  to " + nom_utilisateur + @"
                        grant select,insert,update on optio  to " + nom_utilisateur + @"
                        grant select,insert,update on promotion  to " + nom_utilisateur + @"
                        grant select,insert,update on section  to " + nom_utilisateur + @"
                        grant select,insert,update on retrait_materiel  to " + nom_utilisateur + @"
                        grant select,insert,update on detail_retrait_materiel  to " + nom_utilisateur + @"
                        grant select,insert,update on signataire  to " + nom_utilisateur + @"
                        grant select,insert,update on salle  to " + nom_utilisateur + @"
                        grant select,insert,update on fonction  to " + nom_utilisateur + @"
                        grant select,insert,update on lieu_affectation  to " + nom_utilisateur + @"
                        grant select,insert,update on affectation_materiel  to " + nom_utilisateur + @"
                        grant select on utilisateur  to " + nom_utilisateur + @"
                        grant select on groupe  to " + nom_utilisateur;

                        using (IDbCommand cmd1 = conn.CreateCommand())
                        {
                            cmd1.CommandText = string.Format(requete);
                            cmd1.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 2)
                    {
                        #region Droit pour User
                        string requete = @"grant select on compte to " + nom_utilisateur + @" 
                        grant select on marque  to " + nom_utilisateur + @"
                        grant select on modele  to " + nom_utilisateur + @"
                        grant select on couleur  to " + nom_utilisateur + @"
                        grant select on poids  to " + nom_utilisateur + @"
                        grant select on type_ordinateur  to " + nom_utilisateur + @"
                        grant select on type_imprimante  to " + nom_utilisateur + @"
                        grant select on type_amplificateur  to " + nom_utilisateur + @"
                        grant select on type_routeur_AP  to " + nom_utilisateur + @"
                        grant select on type_AP  to " + nom_utilisateur + @"
                        grant select on type_switch  to " + nom_utilisateur + @"
                        grant select on type_clavier  to " + nom_utilisateur + @"
                        grant select on etat_materiel  to " + nom_utilisateur + @"
                        grant select on type_OS  to " + nom_utilisateur + @"
                        grant select on architecture_OS  to " + nom_utilisateur + @"
                        grant select on OS  to " + nom_utilisateur + @"
                        grant select on version_ios  to " + nom_utilisateur + @"
                        grant select on netette  to " + nom_utilisateur + @"
                        grant select on materiel  to " + nom_utilisateur + @"
                        grant select on grade  to " + nom_utilisateur + @"
                        grant select on personne  to " + nom_utilisateur + @"
                        grant select on type_lieu_affectation  to " + nom_utilisateur + @"
                        grant select on AC  to " + nom_utilisateur + @"
                        grant select on optio  to " + nom_utilisateur + @"
                        grant select on promotion  to " + nom_utilisateur + @"
                        grant select on section  to " + nom_utilisateur + @"
                        grant select on retrait_materiel  to " + nom_utilisateur + @"
                        grant select on detail_retrait_materiel  to " + nom_utilisateur + @"
                        grant select on signataire  to " + nom_utilisateur + @"
                        grant select on salle  to " + nom_utilisateur + @"
                        grant select on fonction  to " + nom_utilisateur + @"
                        grant select on lieu_affectation  to " + nom_utilisateur + @"
                        grant select on affectation_materiel  to " + nom_utilisateur + @"
                        grant select on utilisateur  to " + nom_utilisateur + @"
                        grant select on groupe  to " + nom_utilisateur;

                        using (IDbCommand cmd2 = conn.CreateCommand())
                        {
                            cmd2.CommandText = string.Format(requete);
                            cmd2.ExecuteNonQuery();
                        }
                        #endregion
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Echec d'attribution des droits à l'utilisateur, veuillez réessayez ultérieurement : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
        }

        public void revokePermission(List<int> permission, string nom_login, string nom_utilisateur)
        {
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                //On tourne dans la boucle qui tournera tant qu'il ya encore un groupe dde permission à accordé
                foreach (int droit in permission)
                {
                    if (droit == 0)
                    {
                        //Droit pour administrateur
                        throw new Exception("Les droits de l'administrateur ne peuvent pas être retirés à ce niveau, reportez vous au moteur de SGBD");
                    }
                    else if (droit == 1)
                    {
                        #region Droit pour Admin
                        string requete = @"revoke select,insert,update on compte to " + nom_utilisateur + @" 
                        revoke select,insert,update on marque  to " + nom_utilisateur + @"
                        revoke select,insert,update on modele  to " + nom_utilisateur + @"
                        revoke select,insert,update on couleur  to " + nom_utilisateur + @"
                        revoke select,insert,update on poids  to " + nom_utilisateur + @"
                        revoke select,insert,update on type_ordinateur  to " + nom_utilisateur + @"
                        revoke select,insert,update on type_imprimante  to " + nom_utilisateur + @"
                        revoke select,insert,update on type_amplificateur  to " + nom_utilisateur + @"
                        revoke select,insert,update on type_routeur_AP  to " + nom_utilisateur + @"
                        revoke select,insert,update on type_AP  to " + nom_utilisateur + @"
                        revoke select,insert,update on type_switch  to " + nom_utilisateur + @"
                        revoke select,insert,update on type_clavier  to " + nom_utilisateur + @"
                        revoke select,insert,update on etat_materiel  to " + nom_utilisateur + @"
                        revoke select,insert,update on type_OS  to " + nom_utilisateur + @"
                        revoke select,insert,update on architecture_OS  to " + nom_utilisateur + @"
                        revoke select,insert,update on OS  to " + nom_utilisateur + @"
                        revoke select,insert,update on version_ios  to " + nom_utilisateur + @"
                        revoke select,insert,update on netette  to " + nom_utilisateur + @"
                        revoke select,insert,update on materiel  to " + nom_utilisateur + @"
                        revoke select,insert,update on grade  to " + nom_utilisateur + @"
                        revoke select,insert,update on personne  to " + nom_utilisateur + @"
                        revoke select,insert,update on type_lieu_affectation  to " + nom_utilisateur + @"
                        revokerevoke select,insert,update on AC  to " + nom_utilisateur + @"
                        revoke select,insert,update on optio  to " + nom_utilisateur + @"
                        revoke select,insert,update on promotion  to " + nom_utilisateur + @"
                        revoke select,insert,update on section  to " + nom_utilisateur + @"
                        revoke select,insert,update on retrait_materiel  to " + nom_utilisateur + @"
                        revoke select,insert,update on detail_retrait_materiel  to " + nom_utilisateur + @"
                        revoke select,insert,update on signataire  to " + nom_utilisateur + @"
                        revoke select,insert,update on salle  to " + nom_utilisateur + @"
                        revoke select,insert,update on fonction  to " + nom_utilisateur + @"
                        revoke select,insert,update on lieu_affectation  to " + nom_utilisateur + @"
                        revoke select,insert,update on affectation_materiel  to " + nom_utilisateur + @"
                        revoke select on utilisateur  to " + nom_utilisateur + @"
                        revoke select on groupe  to " + nom_utilisateur;

                        using (IDbCommand cmd1 = conn.CreateCommand())
                        {
                            cmd1.CommandText = string.Format(requete);
                            cmd1.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 2)
                    {
                        #region Droit pour User
                        string requete = @"revoke select on compte to " + nom_utilisateur + @" 
                        revoke select on marque  to " + nom_utilisateur + @"
                        revoke select on modele  to " + nom_utilisateur + @"
                        revoke select on couleur  to " + nom_utilisateur + @"
                        revoke select on poids  to " + nom_utilisateur + @"
                        revoke select on type_ordinateur  to " + nom_utilisateur + @"
                        revoke select on type_imprimante  to " + nom_utilisateur + @"
                        revoke select on type_amplificateur  to " + nom_utilisateur + @"
                        revoke select on type_routeur_AP  to " + nom_utilisateur + @"
                        revoke select on type_AP  to " + nom_utilisateur + @"
                        revoke select on type_switch  to " + nom_utilisateur + @"
                        revoke select on type_clavier  to " + nom_utilisateur + @"
                        revoke select on etat_materiel  to " + nom_utilisateur + @"
                        revoke select on type_OS  to " + nom_utilisateur + @"
                        revoke select on architecture_OS  to " + nom_utilisateur + @"
                        revoke select on OS  to " + nom_utilisateur + @"
                        revoke select on version_ios  to " + nom_utilisateur + @"
                        revoke select on netette  to " + nom_utilisateur + @"
                        revoke select on materiel  to " + nom_utilisateur + @"
                        revoke select on grade  to " + nom_utilisateur + @"
                        revoke select on personne  to " + nom_utilisateur + @"
                        revoke select on type_lieu_affectation  to " + nom_utilisateur + @"
                        revoke select on AC  to " + nom_utilisateur + @"
                        revoke select on optio  to " + nom_utilisateur + @"
                        revoke select on promotion  to " + nom_utilisateur + @"
                        revoke select on section  to " + nom_utilisateur + @"
                        revoke select on retrait_materiel  to " + nom_utilisateur + @"
                        revoke select on detail_retrait_materiel  to " + nom_utilisateur + @"
                        revoke select on signataire  to " + nom_utilisateur + @"
                        revoke select on salle  to " + nom_utilisateur + @"
                        revoke select on fonction  to " + nom_utilisateur + @"
                        revoke select on lieu_affectation  to " + nom_utilisateur + @"
                        revoke select on affectation_materiel  to " + nom_utilisateur + @"
                        revoke select on utilisateur  to " + nom_utilisateur + @"
                        revoke select on groupe  to " + nom_utilisateur;

                        using (IDbCommand cmd2 = conn.CreateCommand())
                        {
                            cmd2.CommandText = string.Format(requete);
                            cmd2.ExecuteNonQuery();
                        }
                        #endregion
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Echec retrait des droits à l'utilisateur, veuillez réessayez ultérieurement : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
        }
        #endregion

        #endregion CLSUTILISATEUR 
        #region  CLSCATEGORIE_MATERIEL
        public clscategorie_materiel getClscategorie_materiel(object intid)
        {
            clscategorie_materiel varclscategorie_materiel = new clscategorie_materiel();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM categorie_materiel WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclscategorie_materiel.Id = int.Parse(dr["id"].ToString());
                            varclscategorie_materiel.Designation = dr["designation"].ToString();
                            varclscategorie_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscategorie_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscategorie_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscategorie_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'categorie_materiel' avec la classe 'clscategorie_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclscategorie_materiel;
        }

        public List<clscategorie_materiel> getAllClscategorie_materiel(string criteria)
        {
            List<clscategorie_materiel> lstclscategorie_materiel = new List<clscategorie_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_categorie_materiel_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscategorie_materiel varclscategorie_materiel = null;
                        while (dr.Read())
                        {

                            varclscategorie_materiel = new clscategorie_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscategorie_materiel.Id = int.Parse(dr["id"].ToString());
                            varclscategorie_materiel.Designation = dr["designation"].ToString();
                            varclscategorie_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscategorie_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscategorie_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscategorie_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclscategorie_materiel.Add(varclscategorie_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'categorie_materiel' avec la classe 'clscategorie_materiel' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclscategorie_materiel;
        }

        public List<clscategorie_materiel> getAllClscategorie_materiel()
        {
            List<clscategorie_materiel> lstclscategorie_materiel = new List<clscategorie_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM categorie_materiel ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscategorie_materiel varclscategorie_materiel = null;
                        while (dr.Read())
                        {

                            varclscategorie_materiel = new clscategorie_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscategorie_materiel.Id = int.Parse(dr["id"].ToString());
                            varclscategorie_materiel.Designation = dr["designation"].ToString();
                            varclscategorie_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscategorie_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscategorie_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscategorie_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclscategorie_materiel.Add(varclscategorie_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'categorie_materiel' avec la classe 'clscategorie_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclscategorie_materiel;
        }

        public List<clscategorie_materiel> getAllClscategorie_materiel1()
        {
            List<clscategorie_materiel> lstclscategorie_materiel = new List<clscategorie_materiel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM categorie_materiel ORDER BY id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscategorie_materiel varclscategorie_materiel = null;
                        while (dr.Read())
                        {

                            varclscategorie_materiel = new clscategorie_materiel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscategorie_materiel.Id = int.Parse(dr["id"].ToString());
                            varclscategorie_materiel.Designation = dr["designation"].ToString();
                            varclscategorie_materiel.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclscategorie_materiel.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclscategorie_materiel.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclscategorie_materiel.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclscategorie_materiel.Add(varclscategorie_materiel);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'categorie_materiel' avec la classe 'clscategorie_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclscategorie_materiel;
        }

        public int insertClscategorie_materiel(clscategorie_materiel varclscategorie_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO categorie_materiel ( id,designation,user_created,date_created,user_modified,date_modified ) VALUES (@id,@designation,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscategorie_materiel.Id));
                    if (varclscategorie_materiel.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclscategorie_materiel.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclscategorie_materiel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclscategorie_materiel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclscategorie_materiel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclscategorie_materiel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclscategorie_materiel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclscategorie_materiel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclscategorie_materiel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclscategorie_materiel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'categorie_materiel' avec la classe 'clscategorie_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClscategorie_materiel(clscategorie_materiel varclscategorie_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE categorie_materiel  SET designation=@designation,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    if (varclscategorie_materiel.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclscategorie_materiel.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    if (varclscategorie_materiel.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclscategorie_materiel.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclscategorie_materiel.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclscategorie_materiel.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclscategorie_materiel.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclscategorie_materiel.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclscategorie_materiel.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclscategorie_materiel.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscategorie_materiel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'categorie_materiel' avec la classe 'clscategorie_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClscategorie_materiel(clscategorie_materiel varclscategorie_materiel)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM categorie_materiel  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscategorie_materiel.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'categorie_materiel' avec la classe 'clscategorie_materiel' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        #endregion CLSCATEGORIE_MATERIEL 
        #region  CLSFE
        public clsfe getClsfe(object intid)
        {
            clsfe varclsfe = new clsfe();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM fe WHERE id=@id";
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, Convert.ToInt32(intid)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsfe.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsfe.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsfe.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfe.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfe.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfe.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection d'un enregistrement de la table : 'fe' avec la classe 'clsfe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return varclsfe;
        }

        public List<clsfe> getAllClsfe(string criteria)
        {
            List<clsfe> lstclsfe = new List<clsfe>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "sp_fe_criteria";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(getParameter(cmd, "@criteria", DbType.String, 50, string.Format("%{0}%", criteria)));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfe varclsfe = null;
                        while (dr.Read())
                        {
                            varclsfe = new clsfe();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfe.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsfe.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsfe.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfe.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfe.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfe.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsfe.Add(varclsfe);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection des tous les enregistrements de la table : 'fe' avec la classe 'clsfe' suivant un critère : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsfe;
        }

        public List<clsfe> getAllClsfe()
        {
            List<clsfe> lstclsfe = new List<clsfe>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM fe ORDER BY valeur ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfe varclsfe = null;
                        while (dr.Read())
                        {
                            varclsfe = new clsfe();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfe.Id = int.Parse(dr["id"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsfe.Valeur = int.Parse(dr["valeur"].ToString());
                            varclsfe.User_created = dr["user_created"].ToString();
                            if (!dr["date_created"].ToString().Trim().Equals("")) varclsfe.Date_created = DateTime.Parse(dr["date_created"].ToString());
                            varclsfe.User_modified = dr["user_modified"].ToString();
                            if (!dr["date_modified"].ToString().Trim().Equals("")) varclsfe.Date_modified = DateTime.Parse(dr["date_modified"].ToString());
                            lstclsfe.Add(varclsfe);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Sélection de tous les enregistrements de la table : 'fe' avec la classe 'clsfe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return lstclsfe;
        }

        public int insertClsfe(clsfe varclsfe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO fe ( id,valeur,user_created,date_created,user_modified,date_modified ) VALUES (@id,@valeur,@user_created,@date_created,@user_modified,@date_modified  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfe.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsfe.Valeur));
                    if (varclsfe.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsfe.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsfe.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsfe.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsfe.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsfe.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsfe.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsfe.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Insertion enregistrement de la table : 'fe' avec la classe 'clsfe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int updateClsfe(clsfe varclsfe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE fe  SET valeur=@valeur,user_created=@user_created,date_created=@date_created,user_modified=@user_modified,date_modified=@date_modified  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsfe.Valeur));
                    if (varclsfe.User_created != null) cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, varclsfe.User_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_created", DbType.String, 50, DBNull.Value));
                    if (varclsfe.Date_created.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, varclsfe.Date_created));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_created", DbType.DateTime, 8, DBNull.Value));
                    if (varclsfe.User_modified != null) cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, varclsfe.User_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@user_modified", DbType.String, 50, DBNull.Value));
                    if (varclsfe.Date_modified.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, varclsfe.Date_modified));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_modified", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfe.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Update enregistrement de la table : 'fe' avec la classe 'clsfe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public int deleteClsfe(clsfe varclsfe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM fe  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfe.Id));
                    i = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception exc)
            {
                ImplementLog.Instance.PutLogMessage(Properties.Settings.Default.MasterDirectory, DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + " : Suppression enregistrement de la table : 'fe' avec la classe 'clsfe' : " + exc.GetType().ToString() + " : " + exc.Message, Properties.Settings.Default.DirectoryUtilLog, Properties.Settings.Default.MasterDirectory + Properties.Settings.Default.LogFileName);
                throw;
            }
            finally
            {
                if (conn != null)
                    conn.Close();
            }
            return i;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if(disposing)
            {
                if (conn != null)
                    conn.Close();
            }
        }

        #endregion CLSFE 
    } //***fin class 
} //***fin namespace 
